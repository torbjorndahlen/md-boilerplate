{
  "instrumentation": "node-jscoverage",
  "sloc": 1638,
  "hits": 1251,
  "misses": 387,
  "coverage": 76.37362637362637,
  "files": [
    {
      "filename": "feedhenry.js",
      "coverage": 81.15942028985508,
      "hits": 56,
      "misses": 13,
      "sloc": 69,
      "source": {
        "1": {
          "source": "var constants = require(\"./modules/constants\");",
          "coverage": 1
        },
        "2": {
          "source": "var logger = require(\"./modules/logger\");",
          "coverage": 1
        },
        "3": {
          "source": "var ajax = require(\"./modules/ajax\");",
          "coverage": 1
        },
        "4": {
          "source": "var events = require(\"./modules/events\");",
          "coverage": 1
        },
        "5": {
          "source": "var cloud = require(\"./modules/waitForCloud\");",
          "coverage": 1
        },
        "6": {
          "source": "var api_act = require(\"./modules/api_act\");",
          "coverage": 1
        },
        "7": {
          "source": "var api_auth = require(\"./modules/api_auth\");",
          "coverage": 1
        },
        "8": {
          "source": "var api_sec = require(\"./modules/api_sec\");",
          "coverage": 1
        },
        "9": {
          "source": "var api_hash = require(\"./modules/api_hash\");",
          "coverage": 1
        },
        "10": {
          "source": "var api_sync = require(\"./modules/sync-cli\");",
          "coverage": 1
        },
        "11": {
          "source": "var api_mbaas = require(\"./modules/api_mbaas\");",
          "coverage": 1
        },
        "12": {
          "source": "var api_cloud = require(\"./modules/api_cloud\");",
          "coverage": 1
        },
        "13": {
          "source": "var fhparams = require(\"./modules/fhparams\");",
          "coverage": 1
        },
        "14": {
          "source": "var appProps = require(\"./modules/appProps\");",
          "coverage": 1
        },
        "15": {
          "source": "var device = require(\"./modules/device\");",
          "coverage": 1
        },
        "16": {
          "source": "",
          "coverage": ""
        },
        "17": {
          "source": "var defaultFail = function(msg, error){",
          "coverage": 1
        },
        "18": {
          "source": "  logger.error(msg + \":\" + JSON.stringify(error));",
          "coverage": 0
        },
        "19": {
          "source": "};",
          "coverage": ""
        },
        "20": {
          "source": "",
          "coverage": ""
        },
        "21": {
          "source": "var addListener = function(type, listener){",
          "coverage": 1
        },
        "22": {
          "source": "  events.addListener(type, listener);",
          "coverage": 4
        },
        "23": {
          "source": "  if(type === constants.INIT_EVENT){",
          "coverage": 4
        },
        "24": {
          "source": "    //for fhinit event, need to check the status of cloud and may need to fire the listener immediately.",
          "coverage": ""
        },
        "25": {
          "source": "    if(cloud.isReady()){",
          "coverage": 4
        },
        "26": {
          "source": "      listener(null, {host: cloud.getCloudHostUrl()});",
          "coverage": 4
        },
        "27": {
          "source": "    } else if(cloud.getInitError()){",
          "coverage": 0
        },
        "28": {
          "source": "      listener(cloud.getInitError());",
          "coverage": 0
        },
        "29": {
          "source": "    }",
          "coverage": ""
        },
        "30": {
          "source": "  } ",
          "coverage": ""
        },
        "31": {
          "source": "};",
          "coverage": ""
        },
        "32": {
          "source": "",
          "coverage": ""
        },
        "33": {
          "source": "var once = function(type, listener){",
          "coverage": 1
        },
        "34": {
          "source": "  if(type === constants.INIT_EVENT &amp;&amp; cloud.isReady()){",
          "coverage": 0
        },
        "35": {
          "source": "    listener(null, {host: cloud.getCloudHostUrl()});",
          "coverage": 0
        },
        "36": {
          "source": "  } else if(type === constants.INIT_EVENT &amp;&amp; cloud.getInitError()){",
          "coverage": 0
        },
        "37": {
          "source": "    listener(cloud.getInitError());",
          "coverage": 0
        },
        "38": {
          "source": "  } else {",
          "coverage": ""
        },
        "39": {
          "source": "    events.once(type, listener);",
          "coverage": 0
        },
        "40": {
          "source": "  }",
          "coverage": ""
        },
        "41": {
          "source": "};",
          "coverage": ""
        },
        "42": {
          "source": "",
          "coverage": ""
        },
        "43": {
          "source": "//Legacy shim. Init hapens based on fhconfig.json or, for v2, global var called fh_app_props which is injected as part of the index.html wrapper",
          "coverage": ""
        },
        "44": {
          "source": "var init = function(opts, success, fail){",
          "coverage": 1
        },
        "45": {
          "source": "  logger.warn(\"$fh.init will be deprecated soon\");",
          "coverage": 1
        },
        "46": {
          "source": "  cloud.ready(function(err, host){",
          "coverage": 1
        },
        "47": {
          "source": "    if(err){",
          "coverage": 1
        },
        "48": {
          "source": "      if(typeof fail === \"function\"){",
          "coverage": 0
        },
        "49": {
          "source": "        return fail(err);",
          "coverage": 0
        },
        "50": {
          "source": "      }",
          "coverage": ""
        },
        "51": {
          "source": "    } else {",
          "coverage": ""
        },
        "52": {
          "source": "      if(typeof success === \"function\"){",
          "coverage": 1
        },
        "53": {
          "source": "        success(host.host);",
          "coverage": 1
        },
        "54": {
          "source": "      }",
          "coverage": ""
        },
        "55": {
          "source": "    }",
          "coverage": ""
        },
        "56": {
          "source": "  });",
          "coverage": ""
        },
        "57": {
          "source": "};",
          "coverage": ""
        },
        "58": {
          "source": "",
          "coverage": ""
        },
        "59": {
          "source": "var fh = window.$fh || {};",
          "coverage": 1
        },
        "60": {
          "source": "fh.init = init;",
          "coverage": 1
        },
        "61": {
          "source": "fh.act = api_act;",
          "coverage": 1
        },
        "62": {
          "source": "fh.auth = api_auth;",
          "coverage": 1
        },
        "63": {
          "source": "fh.cloud = api_cloud;",
          "coverage": 1
        },
        "64": {
          "source": "fh.sec = api_sec;",
          "coverage": 1
        },
        "65": {
          "source": "fh.hash = api_hash;",
          "coverage": 1
        },
        "66": {
          "source": "fh.sync = api_sync;",
          "coverage": 1
        },
        "67": {
          "source": "fh.ajax = fh.__ajax = ajax;",
          "coverage": 1
        },
        "68": {
          "source": "fh.mbaas = api_mbaas;",
          "coverage": 1
        },
        "69": {
          "source": "fh._getDeviceId = device.getDeviceId;",
          "coverage": 1
        },
        "70": {
          "source": "fh.fh_timeout = 60000; //keep backward compatible",
          "coverage": 1
        },
        "71": {
          "source": "",
          "coverage": ""
        },
        "72": {
          "source": "fh.getCloudURL = function(){",
          "coverage": 1
        },
        "73": {
          "source": "  return cloud.getCloudHostUrl();",
          "coverage": 3
        },
        "74": {
          "source": "};",
          "coverage": ""
        },
        "75": {
          "source": "",
          "coverage": ""
        },
        "76": {
          "source": "fh.getFHParams = function(){",
          "coverage": 1
        },
        "77": {
          "source": "  return fhparams.buildFHParams();",
          "coverage": 0
        },
        "78": {
          "source": "};",
          "coverage": ""
        },
        "79": {
          "source": "",
          "coverage": ""
        },
        "80": {
          "source": "//events",
          "coverage": ""
        },
        "81": {
          "source": "fh.addListener = addListener;",
          "coverage": 1
        },
        "82": {
          "source": "fh.on = addListener;",
          "coverage": 1
        },
        "83": {
          "source": "fh.once = once;",
          "coverage": 1
        },
        "84": {
          "source": "var methods = [\"removeListener\", \"removeAllListeners\", \"setMaxListeners\", \"listeners\", \"emit\"];",
          "coverage": 1
        },
        "85": {
          "source": "for(var i=0;i&lt;methods.length;i++){",
          "coverage": 1
        },
        "86": {
          "source": "  fh[methods[i]] = events[methods[i]];",
          "coverage": 5
        },
        "87": {
          "source": "}",
          "coverage": ""
        },
        "88": {
          "source": "",
          "coverage": ""
        },
        "89": {
          "source": "//keep backward compatibility",
          "coverage": ""
        },
        "90": {
          "source": "fh.on(constants.INIT_EVENT, function(err, host){",
          "coverage": 1
        },
        "91": {
          "source": "  if(err){",
          "coverage": 8
        },
        "92": {
          "source": "    fh.cloud_props = {};",
          "coverage": 0
        },
        "93": {
          "source": "    fh.app_props = {};",
          "coverage": 0
        },
        "94": {
          "source": "  } else {",
          "coverage": ""
        },
        "95": {
          "source": "    fh.cloud_props = {hosts: {url: host.host}};",
          "coverage": 8
        },
        "96": {
          "source": "    fh.app_props = appProps.getAppProps();",
          "coverage": 8
        },
        "97": {
          "source": "  }",
          "coverage": ""
        },
        "98": {
          "source": "});",
          "coverage": ""
        },
        "99": {
          "source": "",
          "coverage": ""
        },
        "100": {
          "source": "//for test",
          "coverage": ""
        },
        "101": {
          "source": "fh.reset = cloud.reset;",
          "coverage": 1
        },
        "102": {
          "source": "//we should really stop polluting global name space. Ideally we should ask browserify to use \"$fh\" when umd-fy the module. However, \"$\" is not allowed as the standard module name.",
          "coverage": ""
        },
        "103": {
          "source": "//So, we assign $fh to the window name space directly here. (otherwise, we have to fork the grunt browserify plugin, then fork browerify and the dependent umd module, really not worthing the effort).",
          "coverage": ""
        },
        "104": {
          "source": "window.$fh = fh;",
          "coverage": 1
        },
        "105": {
          "source": "module.exports = fh;",
          "coverage": 1
        },
        "106": {
          "source": "",
          "coverage": ""
        },
        "107": {
          "source": "",
          "coverage": ""
        },
        "108": {
          "source": "",
          "coverage": ""
        },
        "109": {
          "source": "",
          "coverage": ""
        },
        "110": {
          "source": "",
          "coverage": ""
        }
      }
    },
    {
      "filename": "modules/XDomainRequestWrapper.js",
      "coverage": 17.94871794871795,
      "hits": 7,
      "misses": 32,
      "sloc": 39,
      "source": {
        "1": {
          "source": "var XDomainRequestWrapper = function(xdr){",
          "coverage": 2
        },
        "2": {
          "source": "  this.xdr = xdr;",
          "coverage": 0
        },
        "3": {
          "source": "  this.isWrapper = true;",
          "coverage": 0
        },
        "4": {
          "source": "  this.readyState = 0;",
          "coverage": 0
        },
        "5": {
          "source": "  this.onreadystatechange = null;",
          "coverage": 0
        },
        "6": {
          "source": "  this.status = 0;",
          "coverage": 0
        },
        "7": {
          "source": "  this.statusText = \"\";",
          "coverage": 0
        },
        "8": {
          "source": "  this.responseText = \"\";",
          "coverage": 0
        },
        "9": {
          "source": "  var self = this;",
          "coverage": 0
        },
        "10": {
          "source": "  this.xdr.onload = function(){",
          "coverage": 0
        },
        "11": {
          "source": "      self.readyState = 4;",
          "coverage": 0
        },
        "12": {
          "source": "      self.status = 200;",
          "coverage": 0
        },
        "13": {
          "source": "      self.statusText = \"\";",
          "coverage": 0
        },
        "14": {
          "source": "      self.responseText = self.xdr.responseText;",
          "coverage": 0
        },
        "15": {
          "source": "      if(self.onreadystatechange){",
          "coverage": 0
        },
        "16": {
          "source": "          self.onreadystatechange();",
          "coverage": 0
        },
        "17": {
          "source": "      }",
          "coverage": ""
        },
        "18": {
          "source": "  };",
          "coverage": ""
        },
        "19": {
          "source": "  this.xdr.onerror = function(){",
          "coverage": 0
        },
        "20": {
          "source": "      if(self.onerror){",
          "coverage": 0
        },
        "21": {
          "source": "          self.onerror();",
          "coverage": 0
        },
        "22": {
          "source": "      }",
          "coverage": ""
        },
        "23": {
          "source": "      self.readyState = 4;",
          "coverage": 0
        },
        "24": {
          "source": "      self.status = 0;",
          "coverage": 0
        },
        "25": {
          "source": "      self.statusText = \"\";",
          "coverage": 0
        },
        "26": {
          "source": "      if(self.onreadystatechange){",
          "coverage": 0
        },
        "27": {
          "source": "          self.onreadystatechange();",
          "coverage": 0
        },
        "28": {
          "source": "      }",
          "coverage": ""
        },
        "29": {
          "source": "  };",
          "coverage": ""
        },
        "30": {
          "source": "  this.xdr.ontimeout = function(){",
          "coverage": 0
        },
        "31": {
          "source": "      self.readyState = 4;",
          "coverage": 0
        },
        "32": {
          "source": "      self.status = 408;",
          "coverage": 0
        },
        "33": {
          "source": "      self.statusText = \"timeout\";",
          "coverage": 0
        },
        "34": {
          "source": "      if(self.onreadystatechange){",
          "coverage": 0
        },
        "35": {
          "source": "          self.onreadystatechange();",
          "coverage": 0
        },
        "36": {
          "source": "      }",
          "coverage": ""
        },
        "37": {
          "source": "  };",
          "coverage": ""
        },
        "38": {
          "source": "};",
          "coverage": ""
        },
        "39": {
          "source": "",
          "coverage": ""
        },
        "40": {
          "source": "XDomainRequestWrapper.prototype.open = function(method, url, asyn){",
          "coverage": 2
        },
        "41": {
          "source": "  this.xdr.open(method, url);",
          "coverage": 0
        },
        "42": {
          "source": "};",
          "coverage": ""
        },
        "43": {
          "source": "",
          "coverage": ""
        },
        "44": {
          "source": "XDomainRequestWrapper.prototype.send = function(data){",
          "coverage": 2
        },
        "45": {
          "source": "  this.xdr.send(data);",
          "coverage": 0
        },
        "46": {
          "source": "};",
          "coverage": ""
        },
        "47": {
          "source": "",
          "coverage": ""
        },
        "48": {
          "source": "XDomainRequestWrapper.prototype.abort = function(){",
          "coverage": 2
        },
        "49": {
          "source": "  this.xdr.abort();",
          "coverage": 0
        },
        "50": {
          "source": "};",
          "coverage": ""
        },
        "51": {
          "source": "",
          "coverage": ""
        },
        "52": {
          "source": "XDomainRequestWrapper.prototype.setRequestHeader = function(n, v){",
          "coverage": 2
        },
        "53": {
          "source": "  //not supported by xdr",
          "coverage": ""
        },
        "54": {
          "source": "  //Good doc on limitations of XDomainRequest http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx",
          "coverage": ""
        },
        "55": {
          "source": "  //XDomainRequest doesn't allow setting custom request headers. But it is the only available option to do CORS requests in IE8 &amp; 9. In IE10, they finally start to use standard XMLHttpRequest.",
          "coverage": ""
        },
        "56": {
          "source": "  //To support FH auth tokens in IE8&amp;9, we have to find a different way of doing it.",
          "coverage": ""
        },
        "57": {
          "source": "};",
          "coverage": ""
        },
        "58": {
          "source": "",
          "coverage": ""
        },
        "59": {
          "source": "XDomainRequestWrapper.prototype.getResponseHeader = function(n){",
          "coverage": 2
        },
        "60": {
          "source": "  //not supported by xdr",
          "coverage": ""
        },
        "61": {
          "source": "};",
          "coverage": ""
        },
        "62": {
          "source": "",
          "coverage": ""
        },
        "63": {
          "source": "module.exports = XDomainRequestWrapper;",
          "coverage": 2
        }
      }
    },
    {
      "filename": "modules/ajax.js",
      "coverage": 76.40449438202246,
      "hits": 136,
      "misses": 42,
      "sloc": 178,
      "source": {
        "1": {
          "source": "//a shameless copy from https://github.com/ForbesLindesay/ajax/blob/master/index.js. ",
          "coverage": ""
        },
        "2": {
          "source": "//it has the same methods and config options as jQuery/zeptojs but very light weight. see http://api.jquery.com/jQuery.ajax/",
          "coverage": ""
        },
        "3": {
          "source": "//a few small changes are made for supporting IE 8 and other features:",
          "coverage": ""
        },
        "4": {
          "source": "//1. use getXhr function to replace the default XMLHttpRequest implementation for supporting IE8",
          "coverage": ""
        },
        "5": {
          "source": "//2. Integrate with events emitter. So to subscribe ajax events, you can do $fh.on(\"ajaxStart\", handler). See http://api.jquery.com/Ajax_Events/ for full list of events",
          "coverage": ""
        },
        "6": {
          "source": "//3. allow passing xhr factory method through options: e.g. $fh.ajax({xhr: function(){/*own implementation of xhr*/}}); ",
          "coverage": ""
        },
        "7": {
          "source": "//4. Use fh_timeout value as the default timeout",
          "coverage": ""
        },
        "8": {
          "source": "//5. an extra option called \"tryJSONP\" to allow try the same call with JSONP if normal CORS failed - should only be used internally",
          "coverage": ""
        },
        "9": {
          "source": "//6. for jsonp, allow to specify the callback query param name using the \"jsonp\" option",
          "coverage": ""
        },
        "10": {
          "source": "",
          "coverage": ""
        },
        "11": {
          "source": "var eventsHandler = require(\"./events\");",
          "coverage": 2
        },
        "12": {
          "source": "var XDomainRequestWrapper = require(\"./XDomainRequestWrapper\");",
          "coverage": 2
        },
        "13": {
          "source": "var logger = require(\"./logger\");",
          "coverage": 2
        },
        "14": {
          "source": "",
          "coverage": ""
        },
        "15": {
          "source": "var type",
          "coverage": 2
        },
        "16": {
          "source": "try {",
          "coverage": 2
        },
        "17": {
          "source": "  type = require('type-of')",
          "coverage": 2
        },
        "18": {
          "source": "} catch (ex) {",
          "coverage": ""
        },
        "19": {
          "source": "  //hide from browserify",
          "coverage": ""
        },
        "20": {
          "source": "  var r = require",
          "coverage": 0
        },
        "21": {
          "source": "  type = r('type')",
          "coverage": 0
        },
        "22": {
          "source": "}",
          "coverage": ""
        },
        "23": {
          "source": "",
          "coverage": ""
        },
        "24": {
          "source": "var jsonpID = 0,",
          "coverage": 2
        },
        "25": {
          "source": "  document = window.document,",
          "coverage": ""
        },
        "26": {
          "source": "  key,",
          "coverage": ""
        },
        "27": {
          "source": "  name,",
          "coverage": ""
        },
        "28": {
          "source": "  rscript = /&lt;script\\b[^&lt;]*(?:(?!&lt;\\/script&gt;)&lt;[^&lt;]*)*&lt;\\/script&gt;/gi,",
          "coverage": ""
        },
        "29": {
          "source": "  scriptTypeRE = /^(?:text|application)\\/javascript/i,",
          "coverage": ""
        },
        "30": {
          "source": "  xmlTypeRE = /^(?:text|application)\\/xml/i,",
          "coverage": ""
        },
        "31": {
          "source": "  jsonType = 'application/json',",
          "coverage": ""
        },
        "32": {
          "source": "  htmlType = 'text/html',",
          "coverage": ""
        },
        "33": {
          "source": "  blankRE = /^\\s*$/;",
          "coverage": ""
        },
        "34": {
          "source": "",
          "coverage": ""
        },
        "35": {
          "source": "var ajax = module.exports = function (options) {",
          "coverage": 2
        },
        "36": {
          "source": "  var settings = extend({}, options || {})",
          "coverage": 54
        },
        "37": {
          "source": "  //keep backward compatibility",
          "coverage": ""
        },
        "38": {
          "source": "  if(window &amp;&amp; window.$fh &amp;&amp; typeof window.$fh.fh_timeout === \"number\"){",
          "coverage": 54
        },
        "39": {
          "source": "    ajax.settings.timeout = window.$fh.fh_timeout;",
          "coverage": 54
        },
        "40": {
          "source": "  }",
          "coverage": ""
        },
        "41": {
          "source": "",
          "coverage": ""
        },
        "42": {
          "source": "  for (key in ajax.settings)",
          "coverage": 54
        },
        "43": {
          "source": "    if (settings[key] === undefined) settings[key] = ajax.settings[key]",
          "coverage": 996
        },
        "44": {
          "source": "",
          "coverage": ""
        },
        "45": {
          "source": "  ajaxStart(settings)",
          "coverage": 54
        },
        "46": {
          "source": "",
          "coverage": ""
        },
        "47": {
          "source": "  if (!settings.crossDomain) settings.crossDomain = /^([\\w-]+:)?\\/\\/([^\\/]+)/.test(settings.url) &amp;&amp;",
          "coverage": 104
        },
        "48": {
          "source": "    RegExp.$2 != window.location.host",
          "coverage": ""
        },
        "49": {
          "source": "",
          "coverage": ""
        },
        "50": {
          "source": "  var dataType = settings.dataType,",
          "coverage": 54
        },
        "51": {
          "source": "    hasPlaceholder = /=\\?/.test(settings.url)",
          "coverage": ""
        },
        "52": {
          "source": "    if (dataType == 'jsonp' || hasPlaceholder) {",
          "coverage": 54
        },
        "53": {
          "source": "      if (!hasPlaceholder) {",
          "coverage": 4
        },
        "54": {
          "source": "        settings.url = appendQuery(settings.url, (settings.jsonp? settings.jsonp: '_callback') + '=?');",
          "coverage": 4
        },
        "55": {
          "source": "      }",
          "coverage": ""
        },
        "56": {
          "source": "      return ajax.JSONP(settings)",
          "coverage": 4
        },
        "57": {
          "source": "    }",
          "coverage": ""
        },
        "58": {
          "source": "",
          "coverage": ""
        },
        "59": {
          "source": "  if (!settings.url) settings.url = window.location.toString()",
          "coverage": 50
        },
        "60": {
          "source": "  serializeData(settings)",
          "coverage": 50
        },
        "61": {
          "source": "",
          "coverage": ""
        },
        "62": {
          "source": "  var mime = settings.accepts[dataType],",
          "coverage": 50
        },
        "63": {
          "source": "    baseHeaders = {},",
          "coverage": ""
        },
        "64": {
          "source": "    protocol = /^([\\w-]+:)\\/\\//.test(settings.url) ? RegExp.$1 : window.location.protocol,",
          "coverage": ""
        },
        "65": {
          "source": "    xhr = settings.xhr(settings.crossDomain),",
          "coverage": ""
        },
        "66": {
          "source": "    abortTimeout",
          "coverage": ""
        },
        "67": {
          "source": "",
          "coverage": ""
        },
        "68": {
          "source": "  if (!settings.crossDomain) baseHeaders['X-Requested-With'] = 'XMLHttpRequest'",
          "coverage": 52
        },
        "69": {
          "source": "  if (mime) {",
          "coverage": 50
        },
        "70": {
          "source": "    baseHeaders['Accept'] = mime",
          "coverage": 50
        },
        "71": {
          "source": "    if (mime.indexOf(',') &gt; -1) mime = mime.split(',', 2)[0]",
          "coverage": 50
        },
        "72": {
          "source": "    xhr.overrideMimeType &amp;&amp; xhr.overrideMimeType(mime)",
          "coverage": 50
        },
        "73": {
          "source": "  }",
          "coverage": ""
        },
        "74": {
          "source": "  if (settings.contentType || (settings.data &amp;&amp; !settings.formdata &amp;&amp; settings.type.toUpperCase() != 'GET'))",
          "coverage": 50
        },
        "75": {
          "source": "    baseHeaders['Content-Type'] = (settings.contentType || 'application/x-www-form-urlencoded')",
          "coverage": 48
        },
        "76": {
          "source": "  settings.headers = extend(baseHeaders, settings.headers || {})",
          "coverage": 50
        },
        "77": {
          "source": "",
          "coverage": ""
        },
        "78": {
          "source": "  xhr.onreadystatechange = function () {",
          "coverage": 50
        },
        "79": {
          "source": "    if (xhr.readyState == 4) {",
          "coverage": 789
        },
        "80": {
          "source": "      clearTimeout(abortTimeout)",
          "coverage": 50
        },
        "81": {
          "source": "      var result, error = false",
          "coverage": 50
        },
        "82": {
          "source": "      if(settings.tryJSONP){",
          "coverage": 50
        },
        "83": {
          "source": "        //check if the request has fail. In some cases, we may want to try jsonp as well. Again, FH only...",
          "coverage": ""
        },
        "84": {
          "source": "        if(xhr.status === 0 &amp;&amp; settings.crossDomain &amp;&amp; !xhr.isTimeout &amp;&amp;  protocol != 'file:'){",
          "coverage": 10
        },
        "85": {
          "source": "          logger.debug(\"retry ajax call with jsonp\")",
          "coverage": 4
        },
        "86": {
          "source": "          settings.type = \"GET\";",
          "coverage": 4
        },
        "87": {
          "source": "          settings.dataType = \"jsonp\";",
          "coverage": 4
        },
        "88": {
          "source": "          settings.data = \"_jsonpdata=\" + settings.data;",
          "coverage": 4
        },
        "89": {
          "source": "          return ajax(settings);",
          "coverage": 4
        },
        "90": {
          "source": "        }",
          "coverage": ""
        },
        "91": {
          "source": "      }",
          "coverage": ""
        },
        "92": {
          "source": "      if ((xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300) || xhr.status == 304 || (xhr.status == 0 &amp;&amp; protocol == 'file:')) {",
          "coverage": 46
        },
        "93": {
          "source": "        dataType = dataType || mimeToDataType(xhr.getResponseHeader('content-type'))",
          "coverage": 33
        },
        "94": {
          "source": "        result = xhr.responseText",
          "coverage": 33
        },
        "95": {
          "source": "        logger.debug(\"ajax response :: status = \" + xhr.status + \" :: body = \" + result)",
          "coverage": 33
        },
        "96": {
          "source": "",
          "coverage": ""
        },
        "97": {
          "source": "        try {",
          "coverage": 33
        },
        "98": {
          "source": "          if (dataType == 'script')(1, eval)(result)",
          "coverage": 33
        },
        "99": {
          "source": "          else if (dataType == 'xml') result = xhr.responseXML",
          "coverage": 33
        },
        "100": {
          "source": "          else if (dataType == 'json') result = blankRE.test(result) ? null : JSON.parse(result)",
          "coverage": 66
        },
        "101": {
          "source": "        } catch (e) {",
          "coverage": ""
        },
        "102": {
          "source": "          error = e",
          "coverage": 0
        },
        "103": {
          "source": "        }",
          "coverage": ""
        },
        "104": {
          "source": "",
          "coverage": ""
        },
        "105": {
          "source": "        if (error) {",
          "coverage": 33
        },
        "106": {
          "source": "          logger.debug(\"ajax error\", error);",
          "coverage": 0
        },
        "107": {
          "source": "          ajaxError(error, 'parsererror', xhr, settings)",
          "coverage": 0
        },
        "108": {
          "source": "        }",
          "coverage": ""
        },
        "109": {
          "source": "        else ajaxSuccess(result, xhr, settings)",
          "coverage": 33
        },
        "110": {
          "source": "      } else {",
          "coverage": ""
        },
        "111": {
          "source": "        ajaxError(null, 'error', xhr, settings)",
          "coverage": 13
        },
        "112": {
          "source": "      }",
          "coverage": ""
        },
        "113": {
          "source": "    }",
          "coverage": ""
        },
        "114": {
          "source": "  }",
          "coverage": ""
        },
        "115": {
          "source": "",
          "coverage": ""
        },
        "116": {
          "source": "  var async = 'async' in settings ? settings.async : true",
          "coverage": 50
        },
        "117": {
          "source": "  logger.debug(\"ajax call settings\", settings)",
          "coverage": 50
        },
        "118": {
          "source": "  xhr.open(settings.type, settings.url, async)",
          "coverage": 50
        },
        "119": {
          "source": "",
          "coverage": ""
        },
        "120": {
          "source": "  for (name in settings.headers) xhr.setRequestHeader(name, settings.headers[name])",
          "coverage": 150
        },
        "121": {
          "source": "",
          "coverage": ""
        },
        "122": {
          "source": "  if (ajaxBeforeSend(xhr, settings) === false) {",
          "coverage": 50
        },
        "123": {
          "source": "    logger.debug(\"ajax call is aborted due to ajaxBeforeSend\")",
          "coverage": 0
        },
        "124": {
          "source": "    xhr.abort()",
          "coverage": 0
        },
        "125": {
          "source": "    return false",
          "coverage": 0
        },
        "126": {
          "source": "  }",
          "coverage": ""
        },
        "127": {
          "source": "",
          "coverage": ""
        },
        "128": {
          "source": "  if (settings.timeout &gt; 0) abortTimeout = setTimeout(function () {",
          "coverage": 100
        },
        "129": {
          "source": "    logger.debug(\"ajax call timed out\")",
          "coverage": 0
        },
        "130": {
          "source": "    xhr.onreadystatechange = empty",
          "coverage": 0
        },
        "131": {
          "source": "    xhr.abort()",
          "coverage": 0
        },
        "132": {
          "source": "    xhr.isTimeout = true",
          "coverage": 0
        },
        "133": {
          "source": "    ajaxError(null, 'timeout', xhr, settings)",
          "coverage": 0
        },
        "134": {
          "source": "  }, settings.timeout)",
          "coverage": ""
        },
        "135": {
          "source": "",
          "coverage": ""
        },
        "136": {
          "source": "  // avoid sending empty string (#319)",
          "coverage": ""
        },
        "137": {
          "source": "  xhr.send(settings.data ? settings.data : null)",
          "coverage": 50
        },
        "138": {
          "source": "  return xhr",
          "coverage": 50
        },
        "139": {
          "source": "}",
          "coverage": ""
        },
        "140": {
          "source": "",
          "coverage": ""
        },
        "141": {
          "source": "",
          "coverage": ""
        },
        "142": {
          "source": "// trigger a custom event and return true",
          "coverage": ""
        },
        "143": {
          "source": "function triggerAndReturn(context, eventName, data) {",
          "coverage": 2
        },
        "144": {
          "source": "  eventsHandler.emit(eventName, data);",
          "coverage": 159
        },
        "145": {
          "source": "  return true;",
          "coverage": 159
        },
        "146": {
          "source": "}",
          "coverage": ""
        },
        "147": {
          "source": "",
          "coverage": ""
        },
        "148": {
          "source": "// trigger an Ajax \"global\" event",
          "coverage": ""
        },
        "149": {
          "source": "function triggerGlobal(settings, context, eventName, data) {",
          "coverage": 2
        },
        "150": {
          "source": "  if (settings.global) return triggerAndReturn(context || document, eventName, data)",
          "coverage": 318
        },
        "151": {
          "source": "}",
          "coverage": ""
        },
        "152": {
          "source": "",
          "coverage": ""
        },
        "153": {
          "source": "// Number of active Ajax requests",
          "coverage": ""
        },
        "154": {
          "source": "ajax.active = 0",
          "coverage": 2
        },
        "155": {
          "source": "",
          "coverage": ""
        },
        "156": {
          "source": "function ajaxStart(settings) {",
          "coverage": 2
        },
        "157": {
          "source": "  if (settings.global &amp;&amp; ajax.active++ === 0) triggerGlobal(settings, null, 'ajaxStart')",
          "coverage": 61
        },
        "158": {
          "source": "}",
          "coverage": ""
        },
        "159": {
          "source": "",
          "coverage": ""
        },
        "160": {
          "source": "function ajaxStop(settings) {",
          "coverage": 2
        },
        "161": {
          "source": "  if (settings.global &amp;&amp; !(--ajax.active)) triggerGlobal(settings, null, 'ajaxStop')",
          "coverage": 56
        },
        "162": {
          "source": "}",
          "coverage": ""
        },
        "163": {
          "source": "",
          "coverage": ""
        },
        "164": {
          "source": "// triggers an extra global event \"ajaxBeforeSend\" that's like \"ajaxSend\" but cancelable",
          "coverage": ""
        },
        "165": {
          "source": "function ajaxBeforeSend(xhr, settings) {",
          "coverage": 2
        },
        "166": {
          "source": "  var context = settings.context",
          "coverage": 50
        },
        "167": {
          "source": "  if (settings.beforeSend.call(context, xhr, settings) === false)",
          "coverage": 50
        },
        "168": {
          "source": "    return false",
          "coverage": 0
        },
        "169": {
          "source": "",
          "coverage": ""
        },
        "170": {
          "source": "  triggerGlobal(settings, context, 'ajaxSend', [xhr, settings])",
          "coverage": 50
        },
        "171": {
          "source": "}",
          "coverage": ""
        },
        "172": {
          "source": "",
          "coverage": ""
        },
        "173": {
          "source": "function ajaxSuccess(data, xhr, settings) {",
          "coverage": 2
        },
        "174": {
          "source": "  var context = settings.context,",
          "coverage": 33
        },
        "175": {
          "source": "    status = 'success'",
          "coverage": ""
        },
        "176": {
          "source": "  settings.success.call(context, data, status, xhr)",
          "coverage": 33
        },
        "177": {
          "source": "  triggerGlobal(settings, context, 'ajaxSuccess', [xhr, settings, data])",
          "coverage": 33
        },
        "178": {
          "source": "  ajaxComplete(status, xhr, settings)",
          "coverage": 33
        },
        "179": {
          "source": "}",
          "coverage": ""
        },
        "180": {
          "source": "// type: \"timeout\", \"error\", \"abort\", \"parsererror\"",
          "coverage": ""
        },
        "181": {
          "source": "function ajaxError(error, type, xhr, settings) {",
          "coverage": 2
        },
        "182": {
          "source": "  var context = settings.context",
          "coverage": 13
        },
        "183": {
          "source": "  settings.error.call(context, xhr, type, error)",
          "coverage": 13
        },
        "184": {
          "source": "  triggerGlobal(settings, context, 'ajaxError', [xhr, settings, error])",
          "coverage": 13
        },
        "185": {
          "source": "  ajaxComplete(type, xhr, settings)",
          "coverage": 13
        },
        "186": {
          "source": "}",
          "coverage": ""
        },
        "187": {
          "source": "// status: \"success\", \"notmodified\", \"error\", \"timeout\", \"abort\", \"parsererror\"",
          "coverage": ""
        },
        "188": {
          "source": "function ajaxComplete(status, xhr, settings) {",
          "coverage": 2
        },
        "189": {
          "source": "  var context = settings.context",
          "coverage": 50
        },
        "190": {
          "source": "  settings.complete.call(context, xhr, status)",
          "coverage": 50
        },
        "191": {
          "source": "  triggerGlobal(settings, context, 'ajaxComplete', [xhr, settings])",
          "coverage": 50
        },
        "192": {
          "source": "  ajaxStop(settings)",
          "coverage": 50
        },
        "193": {
          "source": "}",
          "coverage": ""
        },
        "194": {
          "source": "",
          "coverage": ""
        },
        "195": {
          "source": "// Empty function, used as default callback",
          "coverage": ""
        },
        "196": {
          "source": "function empty() {}",
          "coverage": 2
        },
        "197": {
          "source": "",
          "coverage": ""
        },
        "198": {
          "source": "ajax.JSONP = function (options) {",
          "coverage": 2
        },
        "199": {
          "source": "  if (!('type' in options)) return ajax(options)",
          "coverage": 4
        },
        "200": {
          "source": "",
          "coverage": ""
        },
        "201": {
          "source": "  var callbackName = 'jsonp' + (++jsonpID),",
          "coverage": 4
        },
        "202": {
          "source": "    script = document.createElement('script'),",
          "coverage": ""
        },
        "203": {
          "source": "    abort = function () {",
          "coverage": ""
        },
        "204": {
          "source": "      //todo: remove script",
          "coverage": ""
        },
        "205": {
          "source": "      //$(script).remove()",
          "coverage": ""
        },
        "206": {
          "source": "      if (callbackName in window) window[callbackName] = empty",
          "coverage": 8
        },
        "207": {
          "source": "      ajaxComplete('abort', xhr, options)",
          "coverage": 4
        },
        "208": {
          "source": "    },",
          "coverage": ""
        },
        "209": {
          "source": "    xhr = {",
          "coverage": ""
        },
        "210": {
          "source": "      abort: abort",
          "coverage": ""
        },
        "211": {
          "source": "    }, abortTimeout,",
          "coverage": ""
        },
        "212": {
          "source": "    head = document.getElementsByTagName(\"head\")[0] || document.documentElement",
          "coverage": ""
        },
        "213": {
          "source": "",
          "coverage": ""
        },
        "214": {
          "source": "  if (options.error) script.onerror = function () {",
          "coverage": 8
        },
        "215": {
          "source": "    xhr.abort()",
          "coverage": 4
        },
        "216": {
          "source": "    options.error()",
          "coverage": 4
        },
        "217": {
          "source": "  }",
          "coverage": ""
        },
        "218": {
          "source": "",
          "coverage": ""
        },
        "219": {
          "source": "  window[callbackName] = function (data) {",
          "coverage": 4
        },
        "220": {
          "source": "    clearTimeout(abortTimeout)",
          "coverage": 0
        },
        "221": {
          "source": "    //todo: remove script",
          "coverage": ""
        },
        "222": {
          "source": "    //$(script).remove()",
          "coverage": ""
        },
        "223": {
          "source": "    delete window[callbackName]",
          "coverage": 0
        },
        "224": {
          "source": "    ajaxSuccess(data, xhr, options)",
          "coverage": 0
        },
        "225": {
          "source": "  }",
          "coverage": ""
        },
        "226": {
          "source": "",
          "coverage": ""
        },
        "227": {
          "source": "  serializeData(options)",
          "coverage": 4
        },
        "228": {
          "source": "  script.src = options.url.replace(/=\\?/, '=' + callbackName)",
          "coverage": 4
        },
        "229": {
          "source": "",
          "coverage": ""
        },
        "230": {
          "source": "  // Use insertBefore instead of appendChild to circumvent an IE6 bug.",
          "coverage": ""
        },
        "231": {
          "source": "  // This arises when a base node is used (see jQuery bugs #2709 and #4378).",
          "coverage": ""
        },
        "232": {
          "source": "  head.insertBefore(script, head.firstChild);",
          "coverage": 4
        },
        "233": {
          "source": "",
          "coverage": ""
        },
        "234": {
          "source": "  if (options.timeout &gt; 0) abortTimeout = setTimeout(function () {",
          "coverage": 8
        },
        "235": {
          "source": "    xhr.abort()",
          "coverage": 0
        },
        "236": {
          "source": "    ajaxComplete('timeout', xhr, options)",
          "coverage": 0
        },
        "237": {
          "source": "  }, options.timeout)",
          "coverage": ""
        },
        "238": {
          "source": "",
          "coverage": ""
        },
        "239": {
          "source": "  return xhr",
          "coverage": 4
        },
        "240": {
          "source": "}",
          "coverage": ""
        },
        "241": {
          "source": "",
          "coverage": ""
        },
        "242": {
          "source": "function isIE(){",
          "coverage": 2
        },
        "243": {
          "source": "  var ie = false;",
          "coverage": 50
        },
        "244": {
          "source": "  if(navigator.userAgent &amp;&amp; navigator.userAgent.indexOf(\"MSIE\") &gt;=0 ){",
          "coverage": 50
        },
        "245": {
          "source": "    ie = true;",
          "coverage": 0
        },
        "246": {
          "source": "  }",
          "coverage": ""
        },
        "247": {
          "source": "  return ie;",
          "coverage": 50
        },
        "248": {
          "source": "}",
          "coverage": ""
        },
        "249": {
          "source": "",
          "coverage": ""
        },
        "250": {
          "source": "function getXhr(crossDomain){",
          "coverage": 2
        },
        "251": {
          "source": "  var xhr = null;",
          "coverage": 50
        },
        "252": {
          "source": "  //always use XMLHttpRequest if available",
          "coverage": ""
        },
        "253": {
          "source": "  if(window.XMLHttpRequest){",
          "coverage": 50
        },
        "254": {
          "source": "    xhr = new XMLHttpRequest();",
          "coverage": 50
        },
        "255": {
          "source": "  }",
          "coverage": ""
        },
        "256": {
          "source": "  //for IE8",
          "coverage": ""
        },
        "257": {
          "source": "  if(isIE() &amp;&amp; (crossDomain === true) &amp;&amp; typeof window.XDomainRequest !== \"undefined\"){",
          "coverage": 50
        },
        "258": {
          "source": "    xhr = new XDomainRequestWrapper(new XDomainRequest());",
          "coverage": 0
        },
        "259": {
          "source": "  }",
          "coverage": ""
        },
        "260": {
          "source": "  return xhr;",
          "coverage": 50
        },
        "261": {
          "source": "}",
          "coverage": ""
        },
        "262": {
          "source": "",
          "coverage": ""
        },
        "263": {
          "source": "ajax.settings = {",
          "coverage": 2
        },
        "264": {
          "source": "  // Default type of request",
          "coverage": ""
        },
        "265": {
          "source": "  type: 'GET',",
          "coverage": ""
        },
        "266": {
          "source": "  // Callback that is executed before request",
          "coverage": ""
        },
        "267": {
          "source": "  beforeSend: empty,",
          "coverage": ""
        },
        "268": {
          "source": "  // Callback that is executed if the request succeeds",
          "coverage": ""
        },
        "269": {
          "source": "  success: empty,",
          "coverage": ""
        },
        "270": {
          "source": "  // Callback that is executed the the server drops error",
          "coverage": ""
        },
        "271": {
          "source": "  error: empty,",
          "coverage": ""
        },
        "272": {
          "source": "  // Callback that is executed on request complete (both: error and success)",
          "coverage": ""
        },
        "273": {
          "source": "  complete: empty,",
          "coverage": ""
        },
        "274": {
          "source": "  // The context for the callbacks",
          "coverage": ""
        },
        "275": {
          "source": "  context: null,",
          "coverage": ""
        },
        "276": {
          "source": "  // Whether to trigger \"global\" Ajax events",
          "coverage": ""
        },
        "277": {
          "source": "  global: true,",
          "coverage": ""
        },
        "278": {
          "source": "  // Transport",
          "coverage": ""
        },
        "279": {
          "source": "  xhr: getXhr,",
          "coverage": ""
        },
        "280": {
          "source": "  // MIME types mapping",
          "coverage": ""
        },
        "281": {
          "source": "  accepts: {",
          "coverage": ""
        },
        "282": {
          "source": "    script: 'text/javascript, application/javascript',",
          "coverage": ""
        },
        "283": {
          "source": "    json: jsonType,",
          "coverage": ""
        },
        "284": {
          "source": "    xml: 'application/xml, text/xml',",
          "coverage": ""
        },
        "285": {
          "source": "    html: htmlType,",
          "coverage": ""
        },
        "286": {
          "source": "    text: 'text/plain'",
          "coverage": ""
        },
        "287": {
          "source": "  },",
          "coverage": ""
        },
        "288": {
          "source": "  // Whether the request is to another domain",
          "coverage": ""
        },
        "289": {
          "source": "  crossDomain: false",
          "coverage": ""
        },
        "290": {
          "source": "}",
          "coverage": ""
        },
        "291": {
          "source": "",
          "coverage": ""
        },
        "292": {
          "source": "function mimeToDataType(mime) {",
          "coverage": 2
        },
        "293": {
          "source": "  return mime &amp;&amp; (mime == htmlType ? 'html' :",
          "coverage": 0
        },
        "294": {
          "source": "    mime == jsonType ? 'json' :",
          "coverage": ""
        },
        "295": {
          "source": "    scriptTypeRE.test(mime) ? 'script' :",
          "coverage": ""
        },
        "296": {
          "source": "    xmlTypeRE.test(mime) &amp;&amp; 'xml') || 'text'",
          "coverage": ""
        },
        "297": {
          "source": "}",
          "coverage": ""
        },
        "298": {
          "source": "",
          "coverage": ""
        },
        "299": {
          "source": "function appendQuery(url, query) {",
          "coverage": 2
        },
        "300": {
          "source": "  return (url + '&amp;' + query).replace(/[&amp;?]{1,2}/, '?')",
          "coverage": 8
        },
        "301": {
          "source": "}",
          "coverage": ""
        },
        "302": {
          "source": "",
          "coverage": ""
        },
        "303": {
          "source": "// serialize payload and append it to the URL for GET requests",
          "coverage": ""
        },
        "304": {
          "source": "function serializeData(options) {",
          "coverage": 2
        },
        "305": {
          "source": "  if (type(options.data) === 'object') {",
          "coverage": 54
        },
        "306": {
          "source": "    if(typeof options.data.append === \"function\"){",
          "coverage": 0
        },
        "307": {
          "source": "      //we are dealing with FormData, do not serialize",
          "coverage": ""
        },
        "308": {
          "source": "      options.formdata = true;",
          "coverage": 0
        },
        "309": {
          "source": "    } else {",
          "coverage": ""
        },
        "310": {
          "source": "      options.data = param(options.data)",
          "coverage": 0
        },
        "311": {
          "source": "    }",
          "coverage": ""
        },
        "312": {
          "source": "  }",
          "coverage": ""
        },
        "313": {
          "source": "  if (options.data &amp;&amp; (!options.type || options.type.toUpperCase() == 'GET'))",
          "coverage": 54
        },
        "314": {
          "source": "    options.url = appendQuery(options.url, options.data)",
          "coverage": 4
        },
        "315": {
          "source": "}",
          "coverage": ""
        },
        "316": {
          "source": "",
          "coverage": ""
        },
        "317": {
          "source": "ajax.get = function (url, success) {",
          "coverage": 2
        },
        "318": {
          "source": "  return ajax({",
          "coverage": 0
        },
        "319": {
          "source": "    url: url,",
          "coverage": ""
        },
        "320": {
          "source": "    success: success",
          "coverage": ""
        },
        "321": {
          "source": "  })",
          "coverage": ""
        },
        "322": {
          "source": "}",
          "coverage": ""
        },
        "323": {
          "source": "",
          "coverage": ""
        },
        "324": {
          "source": "ajax.post = function (url, data, success, dataType) {",
          "coverage": 2
        },
        "325": {
          "source": "  if (type(data) === 'function') dataType = dataType || success, success = data, data = null",
          "coverage": 0
        },
        "326": {
          "source": "  return ajax({",
          "coverage": 0
        },
        "327": {
          "source": "    type: 'POST',",
          "coverage": ""
        },
        "328": {
          "source": "    url: url,",
          "coverage": ""
        },
        "329": {
          "source": "    data: data,",
          "coverage": ""
        },
        "330": {
          "source": "    success: success,",
          "coverage": ""
        },
        "331": {
          "source": "    dataType: dataType",
          "coverage": ""
        },
        "332": {
          "source": "  })",
          "coverage": ""
        },
        "333": {
          "source": "}",
          "coverage": ""
        },
        "334": {
          "source": "",
          "coverage": ""
        },
        "335": {
          "source": "ajax.getJSON = function (url, success) {",
          "coverage": 2
        },
        "336": {
          "source": "  return ajax({",
          "coverage": 0
        },
        "337": {
          "source": "    url: url,",
          "coverage": ""
        },
        "338": {
          "source": "    success: success,",
          "coverage": ""
        },
        "339": {
          "source": "    dataType: 'json'",
          "coverage": ""
        },
        "340": {
          "source": "  })",
          "coverage": ""
        },
        "341": {
          "source": "}",
          "coverage": ""
        },
        "342": {
          "source": "",
          "coverage": ""
        },
        "343": {
          "source": "var escape = encodeURIComponent;",
          "coverage": 2
        },
        "344": {
          "source": "",
          "coverage": ""
        },
        "345": {
          "source": "function serialize(params, obj, traditional, scope) {",
          "coverage": 2
        },
        "346": {
          "source": "  var array = type(obj) === 'array';",
          "coverage": 0
        },
        "347": {
          "source": "  for (var key in obj) {",
          "coverage": 0
        },
        "348": {
          "source": "    var value = obj[key];",
          "coverage": 0
        },
        "349": {
          "source": "",
          "coverage": ""
        },
        "350": {
          "source": "    if (scope) key = traditional ? scope : scope + '[' + (array ? '' : key) + ']'",
          "coverage": 0
        },
        "351": {
          "source": "    // handle data in serializeArray() format",
          "coverage": ""
        },
        "352": {
          "source": "    if (!scope &amp;&amp; array) params.add(value.name, value.value)",
          "coverage": 0
        },
        "353": {
          "source": "    // recurse into nested objects",
          "coverage": ""
        },
        "354": {
          "source": "    else if (traditional ? (type(value) === 'array') : (type(value) === 'object'))",
          "coverage": 0
        },
        "355": {
          "source": "      serialize(params, value, traditional, key)",
          "coverage": 0
        },
        "356": {
          "source": "    else params.add(key, value)",
          "coverage": 0
        },
        "357": {
          "source": "  }",
          "coverage": ""
        },
        "358": {
          "source": "}",
          "coverage": ""
        },
        "359": {
          "source": "",
          "coverage": ""
        },
        "360": {
          "source": "function param(obj, traditional) {",
          "coverage": 2
        },
        "361": {
          "source": "  var params = []",
          "coverage": 0
        },
        "362": {
          "source": "  params.add = function (k, v) {",
          "coverage": 0
        },
        "363": {
          "source": "    this.push(escape(k) + '=' + escape(v))",
          "coverage": 0
        },
        "364": {
          "source": "  }",
          "coverage": ""
        },
        "365": {
          "source": "  serialize(params, obj, traditional)",
          "coverage": 0
        },
        "366": {
          "source": "  return params.join('&amp;').replace('%20', '+')",
          "coverage": 0
        },
        "367": {
          "source": "}",
          "coverage": ""
        },
        "368": {
          "source": "",
          "coverage": ""
        },
        "369": {
          "source": "function extend(target) {",
          "coverage": 2
        },
        "370": {
          "source": "  var slice = Array.prototype.slice;",
          "coverage": 104
        },
        "371": {
          "source": "  slice.call(arguments, 1).forEach(function (source) {",
          "coverage": 104
        },
        "372": {
          "source": "    for (key in source)",
          "coverage": 104
        },
        "373": {
          "source": "      if (source[key] !== undefined)",
          "coverage": 474
        },
        "374": {
          "source": "        target[key] = source[key]",
          "coverage": 426
        },
        "375": {
          "source": "  })",
          "coverage": ""
        },
        "376": {
          "source": "  return target",
          "coverage": 104
        },
        "377": {
          "source": "}",
          "coverage": ""
        }
      }
    },
    {
      "filename": "modules/api_act.js",
      "coverage": 88.46153846153845,
      "hits": 23,
      "misses": 3,
      "sloc": 26,
      "source": {
        "1": {
          "source": "var logger =require(\"./logger\");",
          "coverage": 2
        },
        "2": {
          "source": "var cloud = require(\"./waitForCloud\");",
          "coverage": 2
        },
        "3": {
          "source": "var fhparams = require(\"./fhparams\");",
          "coverage": 2
        },
        "4": {
          "source": "var ajax = require(\"./ajax\");",
          "coverage": 2
        },
        "5": {
          "source": "var JSON = require(\"JSON\");",
          "coverage": 2
        },
        "6": {
          "source": "var handleError = require(\"./handleError\");",
          "coverage": 2
        },
        "7": {
          "source": "var appProps = require(\"./appProps\");",
          "coverage": 2
        },
        "8": {
          "source": "",
          "coverage": ""
        },
        "9": {
          "source": "function doActCall(opts, success, fail){",
          "coverage": 2
        },
        "10": {
          "source": "  var cloud_host = cloud.getCloudHost();",
          "coverage": 8
        },
        "11": {
          "source": "  var url = cloud_host.getActUrl(opts.act);",
          "coverage": 8
        },
        "12": {
          "source": "  var params = opts.req || {};",
          "coverage": 8
        },
        "13": {
          "source": "  params = fhparams.addFHParams(params);",
          "coverage": 8
        },
        "14": {
          "source": "  return ajax({",
          "coverage": 8
        },
        "15": {
          "source": "    \"url\": url,",
          "coverage": ""
        },
        "16": {
          "source": "    \"tryJSONP\": true,",
          "coverage": ""
        },
        "17": {
          "source": "    \"type\": \"POST\",",
          "coverage": ""
        },
        "18": {
          "source": "    \"dataType\": \"json\",",
          "coverage": ""
        },
        "19": {
          "source": "    \"data\": JSON.stringify(params),",
          "coverage": ""
        },
        "20": {
          "source": "    \"contentType\": \"application/json\",",
          "coverage": ""
        },
        "21": {
          "source": "    \"timeout\": opts.timeout || appProps.timeout,",
          "coverage": ""
        },
        "22": {
          "source": "    \"success\": success,",
          "coverage": ""
        },
        "23": {
          "source": "    \"error\": function(req, statusText, error){",
          "coverage": ""
        },
        "24": {
          "source": "      return handleError(fail, req, statusText, error);",
          "coverage": 6
        },
        "25": {
          "source": "    }",
          "coverage": ""
        },
        "26": {
          "source": "  })",
          "coverage": ""
        },
        "27": {
          "source": "}",
          "coverage": ""
        },
        "28": {
          "source": "",
          "coverage": ""
        },
        "29": {
          "source": "module.exports = function(opts, success, fail){",
          "coverage": 2
        },
        "30": {
          "source": "  logger.debug(\"act is called\");",
          "coverage": 9
        },
        "31": {
          "source": "  if(!fail){",
          "coverage": 9
        },
        "32": {
          "source": "    fail = function(msg, error){",
          "coverage": 0
        },
        "33": {
          "source": "      logger.debug(msg + \":\" + JSON.stringify(error));",
          "coverage": 0
        },
        "34": {
          "source": "    };",
          "coverage": ""
        },
        "35": {
          "source": "  }",
          "coverage": ""
        },
        "36": {
          "source": "",
          "coverage": ""
        },
        "37": {
          "source": "  if(!opts.act){",
          "coverage": 9
        },
        "38": {
          "source": "    return fail('act_no_action', {});",
          "coverage": 1
        },
        "39": {
          "source": "  }",
          "coverage": ""
        },
        "40": {
          "source": "",
          "coverage": ""
        },
        "41": {
          "source": "  cloud.ready(function(err, cloudHost){",
          "coverage": 8
        },
        "42": {
          "source": "    logger.debug(\"Calling fhact now\");",
          "coverage": 8
        },
        "43": {
          "source": "    if(err){",
          "coverage": 8
        },
        "44": {
          "source": "      return fail(err.message, err);",
          "coverage": 0
        },
        "45": {
          "source": "    } else {",
          "coverage": ""
        },
        "46": {
          "source": "      doActCall(opts, success, fail);",
          "coverage": 8
        },
        "47": {
          "source": "    }",
          "coverage": ""
        },
        "48": {
          "source": "  })",
          "coverage": ""
        },
        "49": {
          "source": "}",
          "coverage": ""
        }
      }
    },
    {
      "filename": "modules/api_auth.js",
      "coverage": 76.92307692307693,
      "hits": 30,
      "misses": 9,
      "sloc": 39,
      "source": {
        "1": {
          "source": "var logger =require(\"./logger\");",
          "coverage": 1
        },
        "2": {
          "source": "var cloud = require(\"./waitForCloud\");",
          "coverage": 1
        },
        "3": {
          "source": "var fhparams = require(\"./fhparams\");",
          "coverage": 1
        },
        "4": {
          "source": "var ajax = require(\"./ajax\");",
          "coverage": 1
        },
        "5": {
          "source": "var JSON = require(\"JSON\");",
          "coverage": 1
        },
        "6": {
          "source": "var handleError = require(\"./handleError\");",
          "coverage": 1
        },
        "7": {
          "source": "var device = require(\"./device\");",
          "coverage": 1
        },
        "8": {
          "source": "var constants = require(\"./constants\");",
          "coverage": 1
        },
        "9": {
          "source": "var checkAuth = require(\"./checkAuth\");",
          "coverage": 1
        },
        "10": {
          "source": "var appProps = require(\"./appProps\");",
          "coverage": 1
        },
        "11": {
          "source": "",
          "coverage": ""
        },
        "12": {
          "source": "module.exports = function(opts, success, fail){",
          "coverage": 1
        },
        "13": {
          "source": "  if(!fail){",
          "coverage": 2
        },
        "14": {
          "source": "    fail = function(msg, error){",
          "coverage": 0
        },
        "15": {
          "source": "      logger.debug(msg + \":\" + JSON.stringify(error));",
          "coverage": 0
        },
        "16": {
          "source": "    };",
          "coverage": ""
        },
        "17": {
          "source": "  }",
          "coverage": ""
        },
        "18": {
          "source": "  if (!opts.policyId) {",
          "coverage": 2
        },
        "19": {
          "source": "    return fail('auth_no_policyId', {});",
          "coverage": 1
        },
        "20": {
          "source": "  }",
          "coverage": ""
        },
        "21": {
          "source": "  if (!opts.clientToken) {",
          "coverage": 1
        },
        "22": {
          "source": "    return fail('auth_no_clientToken', {});",
          "coverage": 0
        },
        "23": {
          "source": "  }",
          "coverage": ""
        },
        "24": {
          "source": "",
          "coverage": ""
        },
        "25": {
          "source": "  cloud.ready(function(err, data){",
          "coverage": 1
        },
        "26": {
          "source": "    if(err){",
          "coverage": 1
        },
        "27": {
          "source": "      return fail(err.message, err);",
          "coverage": 0
        },
        "28": {
          "source": "    } else {",
          "coverage": ""
        },
        "29": {
          "source": "      var req = {};",
          "coverage": 1
        },
        "30": {
          "source": "      req.policyId = opts.policyId;",
          "coverage": 1
        },
        "31": {
          "source": "      req.clientToken = opts.clientToken;",
          "coverage": 1
        },
        "32": {
          "source": "      if (opts.endRedirectUrl) {",
          "coverage": 1
        },
        "33": {
          "source": "        req.endRedirectUrl = opts.endRedirectUrl;",
          "coverage": 0
        },
        "34": {
          "source": "        if (opts.authCallback) {",
          "coverage": 0
        },
        "35": {
          "source": "          req.endRedirectUrl += (/\\?/.test(req.endRedirectUrl) ? \"&amp;\" : \"?\") + \"_fhAuthCallback=\" + opts.authCallback;",
          "coverage": 0
        },
        "36": {
          "source": "        }",
          "coverage": ""
        },
        "37": {
          "source": "      }",
          "coverage": ""
        },
        "38": {
          "source": "      req.params = {};",
          "coverage": 1
        },
        "39": {
          "source": "      if (opts.params) {",
          "coverage": 1
        },
        "40": {
          "source": "        req.params = opts.params;",
          "coverage": 0
        },
        "41": {
          "source": "      }",
          "coverage": ""
        },
        "42": {
          "source": "      var endurl = opts.endRedirectUrl || \"status=complete\";",
          "coverage": 1
        },
        "43": {
          "source": "      req.device = device.getDeviceId();",
          "coverage": 1
        },
        "44": {
          "source": "      var app_props = appProps.getAppProps();",
          "coverage": 1
        },
        "45": {
          "source": "      var path = app_props.host + constants.boxprefix + \"admin/authpolicy/auth\";",
          "coverage": 1
        },
        "46": {
          "source": "      req = fhparams.addFHParams(req);",
          "coverage": 1
        },
        "47": {
          "source": "",
          "coverage": ""
        },
        "48": {
          "source": "      ajax({",
          "coverage": 1
        },
        "49": {
          "source": "        \"url\": path,",
          "coverage": ""
        },
        "50": {
          "source": "        \"type\": \"POST\",",
          "coverage": ""
        },
        "51": {
          "source": "        \"tryJSONP\": true,",
          "coverage": ""
        },
        "52": {
          "source": "        \"data\": JSON.stringify(req),",
          "coverage": ""
        },
        "53": {
          "source": "        \"dataType\": \"json\",",
          "coverage": ""
        },
        "54": {
          "source": "        \"contentType\": \"application/json\",",
          "coverage": ""
        },
        "55": {
          "source": "        \"timeout\" : opts.timeout || app_props.timeout,",
          "coverage": ""
        },
        "56": {
          "source": "        success: function(res) {",
          "coverage": ""
        },
        "57": {
          "source": "          checkAuth.handleAuthResponse(endurl, res, success, fail);",
          "coverage": 1
        },
        "58": {
          "source": "        },",
          "coverage": ""
        },
        "59": {
          "source": "        error: function(req, statusText, error) {",
          "coverage": ""
        },
        "60": {
          "source": "          handleError(fail, req, statusText, error);",
          "coverage": 0
        },
        "61": {
          "source": "        }",
          "coverage": ""
        },
        "62": {
          "source": "      });",
          "coverage": ""
        },
        "63": {
          "source": "    }",
          "coverage": ""
        },
        "64": {
          "source": "  });",
          "coverage": ""
        },
        "65": {
          "source": "}",
          "coverage": ""
        }
      }
    },
    {
      "filename": "modules/api_cloud.js",
      "coverage": 87.5,
      "hits": 21,
      "misses": 3,
      "sloc": 24,
      "source": {
        "1": {
          "source": "var logger =require(\"./logger\");",
          "coverage": 2
        },
        "2": {
          "source": "var cloud = require(\"./waitForCloud\");",
          "coverage": 2
        },
        "3": {
          "source": "var fhparams = require(\"./fhparams\");",
          "coverage": 2
        },
        "4": {
          "source": "var ajax = require(\"./ajax\");",
          "coverage": 2
        },
        "5": {
          "source": "var JSON = require(\"JSON\");",
          "coverage": 2
        },
        "6": {
          "source": "var handleError = require(\"./handleError\");",
          "coverage": 2
        },
        "7": {
          "source": "var appProps = require(\"./appProps\");",
          "coverage": 2
        },
        "8": {
          "source": "",
          "coverage": ""
        },
        "9": {
          "source": "function doCloudCall(opts, success, fail){",
          "coverage": 2
        },
        "10": {
          "source": "  var cloud_host = cloud.getCloudHost();",
          "coverage": 38
        },
        "11": {
          "source": "  var url = cloud_host.getCloudUrl(opts.path);",
          "coverage": 38
        },
        "12": {
          "source": "  var params = opts.data || {};",
          "coverage": 38
        },
        "13": {
          "source": "  params = fhparams.addFHParams(params);",
          "coverage": 38
        },
        "14": {
          "source": "  return ajax({",
          "coverage": 38
        },
        "15": {
          "source": "    \"url\": url,",
          "coverage": ""
        },
        "16": {
          "source": "    \"type\": opts.method || \"POST\",",
          "coverage": ""
        },
        "17": {
          "source": "    \"dataType\": opts.dataType || \"json\",",
          "coverage": ""
        },
        "18": {
          "source": "    \"data\": JSON.stringify(params),",
          "coverage": ""
        },
        "19": {
          "source": "    \"contentType\": opts.contentType || \"application/json\",",
          "coverage": ""
        },
        "20": {
          "source": "    \"timeout\": opts.timeout || appProps.timeout,",
          "coverage": ""
        },
        "21": {
          "source": "    \"success\": success,",
          "coverage": ""
        },
        "22": {
          "source": "    \"error\": function(req, statusText, error){",
          "coverage": ""
        },
        "23": {
          "source": "      return handleError(fail, req, statusText, error);",
          "coverage": 10
        },
        "24": {
          "source": "    }",
          "coverage": ""
        },
        "25": {
          "source": "  })",
          "coverage": ""
        },
        "26": {
          "source": "}",
          "coverage": ""
        },
        "27": {
          "source": "",
          "coverage": ""
        },
        "28": {
          "source": "module.exports = function(opts, success, fail){",
          "coverage": 2
        },
        "29": {
          "source": "  logger.debug(\"cloud is called\");",
          "coverage": 38
        },
        "30": {
          "source": "  if(!fail){",
          "coverage": 38
        },
        "31": {
          "source": "    fail = function(msg, error){",
          "coverage": 0
        },
        "32": {
          "source": "      logger.debug(msg + \":\" + JSON.stringify(error));",
          "coverage": 0
        },
        "33": {
          "source": "    };",
          "coverage": ""
        },
        "34": {
          "source": "  }",
          "coverage": ""
        },
        "35": {
          "source": "",
          "coverage": ""
        },
        "36": {
          "source": "  cloud.ready(function(err, cloudHost){",
          "coverage": 38
        },
        "37": {
          "source": "    logger.debug(\"Calling fhact now\");",
          "coverage": 38
        },
        "38": {
          "source": "    if(err){",
          "coverage": 38
        },
        "39": {
          "source": "      return fail(err.message, err);",
          "coverage": 0
        },
        "40": {
          "source": "    } else {",
          "coverage": ""
        },
        "41": {
          "source": "      doCloudCall(opts, success, fail);",
          "coverage": 38
        },
        "42": {
          "source": "    }",
          "coverage": ""
        },
        "43": {
          "source": "  })",
          "coverage": ""
        },
        "44": {
          "source": "}",
          "coverage": ""
        }
      }
    },
    {
      "filename": "modules/api_hash.js",
      "coverage": 87.5,
      "hits": 7,
      "misses": 1,
      "sloc": 8,
      "source": {
        "1": {
          "source": "var hashImpl = require(\"./security/hash\");",
          "coverage": 1
        },
        "2": {
          "source": "",
          "coverage": ""
        },
        "3": {
          "source": "module.exports = function(p, s, f){",
          "coverage": 1
        },
        "4": {
          "source": "  var params = {};",
          "coverage": 4
        },
        "5": {
          "source": "  if(typeof p.algorithm === \"undefined\"){",
          "coverage": 4
        },
        "6": {
          "source": "    p.algorithm = \"MD5\";",
          "coverage": 0
        },
        "7": {
          "source": "  }",
          "coverage": ""
        },
        "8": {
          "source": "  params.act = \"hash\";",
          "coverage": 4
        },
        "9": {
          "source": "  params.params = p;",
          "coverage": 4
        },
        "10": {
          "source": "  hashImpl(params, s, f);",
          "coverage": 4
        },
        "11": {
          "source": "};",
          "coverage": ""
        }
      }
    },
    {
      "filename": "modules/api_mbaas.js",
      "coverage": 83.33333333333334,
      "hits": 20,
      "misses": 4,
      "sloc": 24,
      "source": {
        "1": {
          "source": "var logger =require(\"./logger\");",
          "coverage": 1
        },
        "2": {
          "source": "var cloud = require(\"./waitForCloud\");",
          "coverage": 1
        },
        "3": {
          "source": "var fhparams = require(\"./fhparams\");",
          "coverage": 1
        },
        "4": {
          "source": "var ajax = require(\"./ajax\");",
          "coverage": 1
        },
        "5": {
          "source": "var JSON = require(\"JSON\");",
          "coverage": 1
        },
        "6": {
          "source": "var handleError = require(\"./handleError\");",
          "coverage": 1
        },
        "7": {
          "source": "var consts = require(\"./constants\");",
          "coverage": 1
        },
        "8": {
          "source": "var appProps = require(\"./appProps\");",
          "coverage": 1
        },
        "9": {
          "source": "",
          "coverage": ""
        },
        "10": {
          "source": "module.exports = function(opts, success, fail){",
          "coverage": 1
        },
        "11": {
          "source": "  logger.debug(\"mbaas is called.\");",
          "coverage": 1
        },
        "12": {
          "source": "  if(!fail){",
          "coverage": 1
        },
        "13": {
          "source": "    fail = function(msg, error){",
          "coverage": 0
        },
        "14": {
          "source": "      console.debug(msg + \":\" + JSON.stringify(error));",
          "coverage": 0
        },
        "15": {
          "source": "    };",
          "coverage": ""
        },
        "16": {
          "source": "  }",
          "coverage": ""
        },
        "17": {
          "source": "",
          "coverage": ""
        },
        "18": {
          "source": "  var mbaas = opts.service;",
          "coverage": 1
        },
        "19": {
          "source": "  var params = opts.params;",
          "coverage": 1
        },
        "20": {
          "source": "",
          "coverage": ""
        },
        "21": {
          "source": "  cloud.ready(function(err, cloudHost){",
          "coverage": 1
        },
        "22": {
          "source": "    logger.debug(\"Calling mbaas now\");",
          "coverage": 1
        },
        "23": {
          "source": "    if(err){",
          "coverage": 1
        },
        "24": {
          "source": "      return fail(err.message, err);",
          "coverage": 0
        },
        "25": {
          "source": "    } else {",
          "coverage": ""
        },
        "26": {
          "source": "      var cloud_host = cloud.getCloudHost();",
          "coverage": 1
        },
        "27": {
          "source": "      var url = cloud_host.getMBAASUrl(mbaas);",
          "coverage": 1
        },
        "28": {
          "source": "      params = fhparams.addFHParams(params);",
          "coverage": 1
        },
        "29": {
          "source": "      return ajax({",
          "coverage": 1
        },
        "30": {
          "source": "        \"url\": url,",
          "coverage": ""
        },
        "31": {
          "source": "        \"tryJSONP\": true,",
          "coverage": ""
        },
        "32": {
          "source": "        \"type\": \"POST\",",
          "coverage": ""
        },
        "33": {
          "source": "        \"dataType\": \"json\",",
          "coverage": ""
        },
        "34": {
          "source": "        \"data\": JSON.stringify(params),",
          "coverage": ""
        },
        "35": {
          "source": "        \"contentType\": \"application/json\",",
          "coverage": ""
        },
        "36": {
          "source": "        \"timeout\": opts.timeout || appProps.timeout,",
          "coverage": ""
        },
        "37": {
          "source": "        \"success\": success,",
          "coverage": ""
        },
        "38": {
          "source": "        \"error\": function(req, statusText, error){",
          "coverage": ""
        },
        "39": {
          "source": "          return handleError(fail, req, statusText, error);",
          "coverage": 0
        },
        "40": {
          "source": "        }",
          "coverage": ""
        },
        "41": {
          "source": "      });",
          "coverage": ""
        },
        "42": {
          "source": "    }",
          "coverage": ""
        },
        "43": {
          "source": "  });",
          "coverage": ""
        },
        "44": {
          "source": "} ",
          "coverage": ""
        }
      }
    },
    {
      "filename": "modules/api_sec.js",
      "coverage": 67.74193548387096,
      "hits": 21,
      "misses": 10,
      "sloc": 31,
      "source": {
        "1": {
          "source": "var keygen = require(\"./security/aes-keygen\");",
          "coverage": 1
        },
        "2": {
          "source": "var aes = require(\"./security/aes-node\");",
          "coverage": 1
        },
        "3": {
          "source": "var rsa = require(\"./security/rsa-node\");",
          "coverage": 1
        },
        "4": {
          "source": "var hash = require(\"./security/hash\");",
          "coverage": 1
        },
        "5": {
          "source": "",
          "coverage": ""
        },
        "6": {
          "source": "module.exports = function(p, s, f){",
          "coverage": 1
        },
        "7": {
          "source": "  if (!p.act) {",
          "coverage": 4
        },
        "8": {
          "source": "    f('bad_act', {}, p);",
          "coverage": 0
        },
        "9": {
          "source": "    return;",
          "coverage": 0
        },
        "10": {
          "source": "  }",
          "coverage": ""
        },
        "11": {
          "source": "  if (!p.params) {",
          "coverage": 4
        },
        "12": {
          "source": "    f('no_params', {}, p);",
          "coverage": 0
        },
        "13": {
          "source": "    return;",
          "coverage": 0
        },
        "14": {
          "source": "  }",
          "coverage": ""
        },
        "15": {
          "source": "  if (!p.params.algorithm) {",
          "coverage": 4
        },
        "16": {
          "source": "    f('no_params_algorithm', {}, p);",
          "coverage": 0
        },
        "17": {
          "source": "    return;",
          "coverage": 0
        },
        "18": {
          "source": "  }",
          "coverage": ""
        },
        "19": {
          "source": "  p.params.algorithm = p.params.algorithm.toLowerCase();",
          "coverage": 4
        },
        "20": {
          "source": "  if(p.act === \"hash\"){",
          "coverage": 4
        },
        "21": {
          "source": "    return hash(p, s, f);",
          "coverage": 0
        },
        "22": {
          "source": "  } else if(p.act === \"encrypt\"){",
          "coverage": 4
        },
        "23": {
          "source": "    if(p.params.algorithm === \"aes\"){",
          "coverage": 2
        },
        "24": {
          "source": "      return aes.encrypt(p, s, f);",
          "coverage": 1
        },
        "25": {
          "source": "    } else if(p.params.algorithm === \"rsa\"){",
          "coverage": 1
        },
        "26": {
          "source": "      return rsa.encrypt(p, s, f);",
          "coverage": 1
        },
        "27": {
          "source": "    } else {",
          "coverage": ""
        },
        "28": {
          "source": "      return f('encrypt_bad_algorithm:' + p.params.algorithm, {}, p);",
          "coverage": 0
        },
        "29": {
          "source": "    }",
          "coverage": ""
        },
        "30": {
          "source": "  } else if(p.act === \"decrypt\"){",
          "coverage": 2
        },
        "31": {
          "source": "    if(p.params.algorithm === \"aes\"){",
          "coverage": 1
        },
        "32": {
          "source": "      return aes.decrypt(p, s, f);",
          "coverage": 1
        },
        "33": {
          "source": "    } else {",
          "coverage": ""
        },
        "34": {
          "source": "      return f('decrypt_bad_algorithm:' + p.params.algorithm, {}, p);",
          "coverage": 0
        },
        "35": {
          "source": "    }",
          "coverage": ""
        },
        "36": {
          "source": "  } else if(p.act === \"keygen\"){",
          "coverage": 1
        },
        "37": {
          "source": "    if(p.params.algorithm === \"aes\"){",
          "coverage": 1
        },
        "38": {
          "source": "      return keygen(p, s, f);",
          "coverage": 1
        },
        "39": {
          "source": "    } else {",
          "coverage": ""
        },
        "40": {
          "source": "      return f('keygen_bad_algorithm:' + p.params.algorithm, {}, p);",
          "coverage": 0
        },
        "41": {
          "source": "    }",
          "coverage": ""
        },
        "42": {
          "source": "  }",
          "coverage": ""
        },
        "43": {
          "source": "}",
          "coverage": ""
        }
      }
    },
    {
      "filename": "modules/appProps.js",
      "coverage": 58.97435897435898,
      "hits": 23,
      "misses": 16,
      "sloc": 39,
      "source": {
        "1": {
          "source": "var consts = require(\"./constants\");",
          "coverage": 2
        },
        "2": {
          "source": "var ajax = require(\"./ajax\");",
          "coverage": 2
        },
        "3": {
          "source": "var logger = require(\"./logger\");",
          "coverage": 2
        },
        "4": {
          "source": "var qs = require(\"./queryMap\");",
          "coverage": 2
        },
        "5": {
          "source": "",
          "coverage": ""
        },
        "6": {
          "source": "var app_props = null;",
          "coverage": 2
        },
        "7": {
          "source": "",
          "coverage": ""
        },
        "8": {
          "source": "var load = function(cb) {",
          "coverage": 2
        },
        "9": {
          "source": "  var doc_url = document.location.href;",
          "coverage": 9
        },
        "10": {
          "source": "  var url_params = qs(doc_url);",
          "coverage": 9
        },
        "11": {
          "source": "  var local = (typeof url_params.url !== 'undefined');",
          "coverage": 9
        },
        "12": {
          "source": "",
          "coverage": ""
        },
        "13": {
          "source": "  // For local environments, no init needed",
          "coverage": ""
        },
        "14": {
          "source": "  if (local) {",
          "coverage": 9
        },
        "15": {
          "source": "    app_props = {};",
          "coverage": 9
        },
        "16": {
          "source": "    app_props.local = true;",
          "coverage": 9
        },
        "17": {
          "source": "    app_props.host = url_params.url;",
          "coverage": 9
        },
        "18": {
          "source": "    app_props.appid = \"000000000000000000000000\";",
          "coverage": 9
        },
        "19": {
          "source": "    app_props.appkey = \"0000000000000000000000000000000000000000\";",
          "coverage": 9
        },
        "20": {
          "source": "    app_props.projectid = \"000000000000000000000000\";",
          "coverage": 9
        },
        "21": {
          "source": "    app_props.connectiontag = \"0.0.1\";",
          "coverage": 9
        },
        "22": {
          "source": "    app_props.loglevel = url_params.loglevel;",
          "coverage": 9
        },
        "23": {
          "source": "    return cb(null, app_props);",
          "coverage": 9
        },
        "24": {
          "source": "  }",
          "coverage": ""
        },
        "25": {
          "source": "",
          "coverage": ""
        },
        "26": {
          "source": "  var config_url = url_params.fhconfig || consts.config_js;",
          "coverage": 0
        },
        "27": {
          "source": "  ajax({",
          "coverage": 0
        },
        "28": {
          "source": "    url: config_url,",
          "coverage": ""
        },
        "29": {
          "source": "    dataType: \"json\",",
          "coverage": ""
        },
        "30": {
          "source": "    success: function(data) {",
          "coverage": ""
        },
        "31": {
          "source": "      logger.debug(\"fhconfig = \" + JSON.stringify(data));",
          "coverage": 0
        },
        "32": {
          "source": "      //when load the config file on device, because file:// protocol is used, it will never call fail call back. The success callback will be called but the data value will be null.",
          "coverage": ""
        },
        "33": {
          "source": "      if (null == data) {",
          "coverage": 0
        },
        "34": {
          "source": "        //fh v2 only",
          "coverage": ""
        },
        "35": {
          "source": "        if(window.fh_app_props){",
          "coverage": 0
        },
        "36": {
          "source": "          app_props = window.fh_app_props;",
          "coverage": 0
        },
        "37": {
          "source": "          return cb(null, window.fh_app_props);",
          "coverage": 0
        },
        "38": {
          "source": "        }",
          "coverage": ""
        },
        "39": {
          "source": "        return cb(new Error(\"app_config_missing\"));",
          "coverage": 0
        },
        "40": {
          "source": "      } else {",
          "coverage": ""
        },
        "41": {
          "source": "        app_props = data;",
          "coverage": 0
        },
        "42": {
          "source": "",
          "coverage": ""
        },
        "43": {
          "source": "        cb(null, app_props);",
          "coverage": 0
        },
        "44": {
          "source": "      }",
          "coverage": ""
        },
        "45": {
          "source": "    },",
          "coverage": ""
        },
        "46": {
          "source": "    error: function(req, statusText, error) {",
          "coverage": ""
        },
        "47": {
          "source": "      //fh v2 only",
          "coverage": ""
        },
        "48": {
          "source": "      if(window.fh_app_props){",
          "coverage": 0
        },
        "49": {
          "source": "        app_props = window.fh_app_props;",
          "coverage": 0
        },
        "50": {
          "source": "        return cb(null, window.fh_app_props);",
          "coverage": 0
        },
        "51": {
          "source": "      }",
          "coverage": ""
        },
        "52": {
          "source": "      logger.error(consts.config_js + \" Not Found\");",
          "coverage": 0
        },
        "53": {
          "source": "      cb(new Error(\"app_config_missing\"));",
          "coverage": 0
        },
        "54": {
          "source": "    }",
          "coverage": ""
        },
        "55": {
          "source": "  });",
          "coverage": ""
        },
        "56": {
          "source": "};",
          "coverage": ""
        },
        "57": {
          "source": "",
          "coverage": ""
        },
        "58": {
          "source": "var setAppProps = function(props) {",
          "coverage": 2
        },
        "59": {
          "source": "  app_props = props;",
          "coverage": 0
        },
        "60": {
          "source": "};",
          "coverage": ""
        },
        "61": {
          "source": "",
          "coverage": ""
        },
        "62": {
          "source": "var getAppProps = function() {",
          "coverage": 2
        },
        "63": {
          "source": "  return app_props;",
          "coverage": 123
        },
        "64": {
          "source": "};",
          "coverage": ""
        },
        "65": {
          "source": "",
          "coverage": ""
        },
        "66": {
          "source": "module.exports = {",
          "coverage": 2
        },
        "67": {
          "source": "  load: load,",
          "coverage": ""
        },
        "68": {
          "source": "  getAppProps: getAppProps,",
          "coverage": ""
        },
        "69": {
          "source": "  setAppProps: setAppProps",
          "coverage": ""
        },
        "70": {
          "source": "};",
          "coverage": ""
        }
      }
    },
    {
      "filename": "modules/checkAuth.js",
      "coverage": 29.310344827586203,
      "hits": 17,
      "misses": 41,
      "sloc": 58,
      "source": {
        "1": {
          "source": "var logger = require(\"./logger\");",
          "coverage": 1
        },
        "2": {
          "source": "var queryMap = require(\"./queryMap\");",
          "coverage": 1
        },
        "3": {
          "source": "var JSON = require(\"JSON\");",
          "coverage": 1
        },
        "4": {
          "source": "var fhparams = require(\"./fhparams\");",
          "coverage": 1
        },
        "5": {
          "source": "",
          "coverage": ""
        },
        "6": {
          "source": "var checkAuth = function(url) {",
          "coverage": 1
        },
        "7": {
          "source": "  if (/\\_fhAuthCallback/.test(url)) {",
          "coverage": 1
        },
        "8": {
          "source": "    var qmap = queryMap(url);",
          "coverage": 0
        },
        "9": {
          "source": "    if (qmap) {",
          "coverage": 0
        },
        "10": {
          "source": "      var fhCallback = qmap[\"_fhAuthCallback\"];",
          "coverage": 0
        },
        "11": {
          "source": "      if (fhCallback) {",
          "coverage": 0
        },
        "12": {
          "source": "        if (qmap['result'] &amp;&amp; qmap['result'] === 'success') {",
          "coverage": 0
        },
        "13": {
          "source": "          var sucRes = {'sessionToken': qmap['fh_auth_session'], 'authResponse' : JSON.parse(decodeURIComponent(decodeURIComponent(qmap['authResponse'])))};",
          "coverage": 0
        },
        "14": {
          "source": "          fhparams.setAuthSessionToken(qmap['fh_auth_session']);",
          "coverage": 0
        },
        "15": {
          "source": "          window[fhCallback](null, sucRes);",
          "coverage": 0
        },
        "16": {
          "source": "        } else {",
          "coverage": ""
        },
        "17": {
          "source": "          window[fhCallback]({'message':qmap['message']});",
          "coverage": 0
        },
        "18": {
          "source": "        }",
          "coverage": ""
        },
        "19": {
          "source": "      }",
          "coverage": ""
        },
        "20": {
          "source": "    }",
          "coverage": ""
        },
        "21": {
          "source": "  }",
          "coverage": ""
        },
        "22": {
          "source": "};",
          "coverage": ""
        },
        "23": {
          "source": "",
          "coverage": ""
        },
        "24": {
          "source": "var handleAuthResponse = function(endurl, res, success, fail){",
          "coverage": 1
        },
        "25": {
          "source": "  if(res.status &amp;&amp; res.status === \"ok\"){",
          "coverage": 1
        },
        "26": {
          "source": "",
          "coverage": ""
        },
        "27": {
          "source": "    var onComplete = function(res){",
          "coverage": 1
        },
        "28": {
          "source": "      if(res.sessionToken){",
          "coverage": 1
        },
        "29": {
          "source": "        fhparams.setAuthSessionToken(res.sessionToken);",
          "coverage": 0
        },
        "30": {
          "source": "      }",
          "coverage": ""
        },
        "31": {
          "source": "      success(res);",
          "coverage": 1
        },
        "32": {
          "source": "    };",
          "coverage": ""
        },
        "33": {
          "source": "    //for OAuth, a url will be returned which means the user should be directed to that url to authenticate.",
          "coverage": ""
        },
        "34": {
          "source": "    //we try to use the ChildBrower plugin if it can be found. Otherwise send the url to the success function to allow developer to handle it.",
          "coverage": ""
        },
        "35": {
          "source": "    if(res.url){",
          "coverage": 1
        },
        "36": {
          "source": "      var inappBrowserWindow = null;",
          "coverage": 0
        },
        "37": {
          "source": "      var locationChange = function(new_url){",
          "coverage": 0
        },
        "38": {
          "source": "        if(new_url.indexOf(endurl) &gt; -1){",
          "coverage": 0
        },
        "39": {
          "source": "          if(inappBrowserWindow){",
          "coverage": 0
        },
        "40": {
          "source": "            inappBrowserWindow.close();",
          "coverage": 0
        },
        "41": {
          "source": "          }",
          "coverage": ""
        },
        "42": {
          "source": "          var qmap = queryMap(new_url);",
          "coverage": 0
        },
        "43": {
          "source": "          if(qmap) {",
          "coverage": 0
        },
        "44": {
          "source": "            if(qmap['result'] &amp;&amp; qmap['result'] === 'success'){",
          "coverage": 0
        },
        "45": {
          "source": "              var sucRes = {'sessionToken': qmap['fh_auth_session'], 'authResponse' : JSON.parse(decodeURIComponent(decodeURIComponent(qmap['authResponse'])))};",
          "coverage": 0
        },
        "46": {
          "source": "              onComplete(sucRes);",
          "coverage": 0
        },
        "47": {
          "source": "            } else {",
          "coverage": ""
        },
        "48": {
          "source": "              if(fail){",
          "coverage": 0
        },
        "49": {
          "source": "                fail(\"auth_failed\", {'message':qmap['message']});",
          "coverage": 0
        },
        "50": {
          "source": "              }",
          "coverage": ""
        },
        "51": {
          "source": "            }",
          "coverage": ""
        },
        "52": {
          "source": "          } else {",
          "coverage": ""
        },
        "53": {
          "source": "            if(fail){",
          "coverage": 0
        },
        "54": {
          "source": "                fail(\"auth_failed\", {'message':qmap['message']});",
          "coverage": 0
        },
        "55": {
          "source": "            }",
          "coverage": ""
        },
        "56": {
          "source": "          }",
          "coverage": ""
        },
        "57": {
          "source": "        }",
          "coverage": ""
        },
        "58": {
          "source": "      };",
          "coverage": ""
        },
        "59": {
          "source": "      if(window.PhoneGap || window.cordova){",
          "coverage": 0
        },
        "60": {
          "source": "        if(window.plugins &amp;&amp; window.plugins.childBrowser){",
          "coverage": 0
        },
        "61": {
          "source": "          //found childbrowser plugin,add the event listener and load it",
          "coverage": ""
        },
        "62": {
          "source": "          //we need to know when the OAuth process is finished by checking for the presence of endurl. If the endurl is found, it means the authentication finished and we should find if it's successful.",
          "coverage": ""
        },
        "63": {
          "source": "          if(typeof window.plugins.childBrowser.showWebPage === \"function\"){",
          "coverage": 0
        },
        "64": {
          "source": "            window.plugins.childBrowser.onLocationChange = locationChange;",
          "coverage": 0
        },
        "65": {
          "source": "            window.plugins.childBrowser.showWebPage(res.url);",
          "coverage": 0
        },
        "66": {
          "source": "            inappBrowserWindow = window.plugins.childBrowser;",
          "coverage": 0
        },
        "67": {
          "source": "          }",
          "coverage": ""
        },
        "68": {
          "source": "        } else {",
          "coverage": ""
        },
        "69": {
          "source": "          try {",
          "coverage": 0
        },
        "70": {
          "source": "            inappBrowserWindow = window.open(res.url, \"_blank\", 'location=yes');",
          "coverage": 0
        },
        "71": {
          "source": "            inappBrowserWindow.addEventListener(\"loadstart\", function(ev){",
          "coverage": 0
        },
        "72": {
          "source": "              locationChange(ev.url);",
          "coverage": 0
        },
        "73": {
          "source": "            });",
          "coverage": ""
        },
        "74": {
          "source": "          } catch(e){",
          "coverage": ""
        },
        "75": {
          "source": "            logger.info(\"InAppBrowser plugin is not intalled.\");",
          "coverage": 0
        },
        "76": {
          "source": "            onComplete(res);",
          "coverage": 0
        },
        "77": {
          "source": "          }",
          "coverage": ""
        },
        "78": {
          "source": "        }",
          "coverage": ""
        },
        "79": {
          "source": "      } else {",
          "coverage": ""
        },
        "80": {
          "source": "       document.location.href = res.url;",
          "coverage": 0
        },
        "81": {
          "source": "      }",
          "coverage": ""
        },
        "82": {
          "source": "    } else {",
          "coverage": ""
        },
        "83": {
          "source": "      onComplete(res);",
          "coverage": 1
        },
        "84": {
          "source": "    }",
          "coverage": ""
        },
        "85": {
          "source": "  } else {",
          "coverage": ""
        },
        "86": {
          "source": "    if(fail){",
          "coverage": 0
        },
        "87": {
          "source": "      fail(\"auth_failed\", res);",
          "coverage": 0
        },
        "88": {
          "source": "    }",
          "coverage": ""
        },
        "89": {
          "source": "  }",
          "coverage": ""
        },
        "90": {
          "source": "};",
          "coverage": ""
        },
        "91": {
          "source": "",
          "coverage": ""
        },
        "92": {
          "source": "//This is mainly for using $fh.auth inside browsers. If the authentication method is OAuth, at the end of the process, the user will be re-directed to",
          "coverage": ""
        },
        "93": {
          "source": "//a url that we specified for checking if the auth is successful. So we always check the url to see if we are on the re-directed page.",
          "coverage": ""
        },
        "94": {
          "source": "if (window.addEventListener) {",
          "coverage": 1
        },
        "95": {
          "source": "  window.addEventListener('load', function(){",
          "coverage": 1
        },
        "96": {
          "source": "    checkAuth(window.location.href);",
          "coverage": 1
        },
        "97": {
          "source": "  }, false); //W3C",
          "coverage": ""
        },
        "98": {
          "source": "} else {",
          "coverage": ""
        },
        "99": {
          "source": "  window.attachEvent('onload', function(){",
          "coverage": 0
        },
        "100": {
          "source": "    checkAuth(window.location.href);",
          "coverage": 0
        },
        "101": {
          "source": "  }); //IE",
          "coverage": ""
        },
        "102": {
          "source": "}",
          "coverage": ""
        },
        "103": {
          "source": "",
          "coverage": ""
        },
        "104": {
          "source": "module.exports = {",
          "coverage": 1
        },
        "105": {
          "source": "  \"handleAuthResponse\": handleAuthResponse",
          "coverage": ""
        },
        "106": {
          "source": "};",
          "coverage": ""
        }
      }
    },
    {
      "filename": "modules/constants.js",
      "coverage": 100,
      "hits": 1,
      "misses": 0,
      "sloc": 1,
      "source": {
        "1": {
          "source": "module.exports = {",
          "coverage": 2
        },
        "2": {
          "source": "  \"boxprefix\": \"/box/srv/1.1/\",",
          "coverage": ""
        },
        "3": {
          "source": "  \"sdk_version\": \"BUILD_VERSION\",",
          "coverage": ""
        },
        "4": {
          "source": "  \"config_js\": \"fhconfig.json\",",
          "coverage": ""
        },
        "5": {
          "source": "  \"INIT_EVENT\": \"fhinit\"",
          "coverage": ""
        },
        "6": {
          "source": "};",
          "coverage": ""
        }
      }
    },
    {
      "filename": "modules/cookies.js",
      "coverage": 92.85714285714286,
      "hits": 13,
      "misses": 1,
      "sloc": 14,
      "source": {
        "1": {
          "source": "module.exports = {",
          "coverage": 2
        },
        "2": {
          "source": "  readCookieValue  : function (cookie_name) {",
          "coverage": ""
        },
        "3": {
          "source": "    var name_str = cookie_name + \"=\";",
          "coverage": 3
        },
        "4": {
          "source": "    var cookies = document.cookie.split(\";\");",
          "coverage": 3
        },
        "5": {
          "source": "    for (var i = 0; i &lt; cookies.length; i++) {",
          "coverage": 3
        },
        "6": {
          "source": "      var c = cookies[i];",
          "coverage": 3
        },
        "7": {
          "source": "      while (c.charAt(0) === ' ') {",
          "coverage": 3
        },
        "8": {
          "source": "        c = c.substring(1, c.length);",
          "coverage": 0
        },
        "9": {
          "source": "      }",
          "coverage": ""
        },
        "10": {
          "source": "      if (c.indexOf(name_str) === 0) {",
          "coverage": 3
        },
        "11": {
          "source": "        return c.substring(name_str.length, c.length);",
          "coverage": 2
        },
        "12": {
          "source": "      }",
          "coverage": ""
        },
        "13": {
          "source": "    }",
          "coverage": ""
        },
        "14": {
          "source": "    return null;",
          "coverage": 1
        },
        "15": {
          "source": "  },",
          "coverage": ""
        },
        "16": {
          "source": "",
          "coverage": ""
        },
        "17": {
          "source": "  createCookie : function (cookie_name, cookie_value) {",
          "coverage": ""
        },
        "18": {
          "source": "    var date = new Date();",
          "coverage": 1
        },
        "19": {
          "source": "    date.setTime(date.getTime() + 36500 * 24 * 60 * 60 * 1000); //100 years",
          "coverage": 1
        },
        "20": {
          "source": "    var expires = \"; expires=\" + date.toGMTString();",
          "coverage": 1
        },
        "21": {
          "source": "    document.cookie = cookie_name + \"=\" + cookie_value + expires + \"; path = /\";",
          "coverage": 1
        },
        "22": {
          "source": "  }",
          "coverage": ""
        },
        "23": {
          "source": "};",
          "coverage": ""
        }
      }
    },
    {
      "filename": "modules/device.js",
      "coverage": 76.92307692307693,
      "hits": 30,
      "misses": 9,
      "sloc": 39,
      "source": {
        "1": {
          "source": "var cookies = require(\"./cookies\");",
          "coverage": 2
        },
        "2": {
          "source": "var uuidModule = require(\"./uuid\");",
          "coverage": 2
        },
        "3": {
          "source": "var logger = require(\"./logger\");",
          "coverage": 2
        },
        "4": {
          "source": "",
          "coverage": ""
        },
        "5": {
          "source": "module.exports = {",
          "coverage": 2
        },
        "6": {
          "source": "  //try to get the unique device identifier",
          "coverage": ""
        },
        "7": {
          "source": "  \"getDeviceId\": function(){",
          "coverage": ""
        },
        "8": {
          "source": "    //check for cordova/phonegap first",
          "coverage": ""
        },
        "9": {
          "source": "    if(typeof window.fhdevice !== \"undefined\" &amp;&amp; typeof window.fhdevice.uuid !== \"undefined\"){",
          "coverage": 3
        },
        "10": {
          "source": "      return window.fhdevice.uuid;",
          "coverage": 0
        },
        "11": {
          "source": "    } else if(typeof window.device !== \"undefined\" &amp;&amp; typeof window.device.uuid !== \"undefined\"){",
          "coverage": 3
        },
        "12": {
          "source": "      return window.device.uuid;",
          "coverage": 0
        },
        "13": {
          "source": "    }  else if(typeof navigator.device !== \"undefined\" &amp;&amp; typeof navigator.device.uuid !== \"undefined\"){",
          "coverage": 3
        },
        "14": {
          "source": "      return navigator.device.uuid;",
          "coverage": 0
        },
        "15": {
          "source": "    } else {",
          "coverage": ""
        },
        "16": {
          "source": "      var _mock_uuid_cookie_name = \"mock_uuid\";",
          "coverage": 3
        },
        "17": {
          "source": "      var uuid = cookies.readCookieValue(_mock_uuid_cookie_name);",
          "coverage": 3
        },
        "18": {
          "source": "      if(null == uuid){",
          "coverage": 3
        },
        "19": {
          "source": "          uuid = uuidModule.createUUID();",
          "coverage": 1
        },
        "20": {
          "source": "          cookies.createCookie(_mock_uuid_cookie_name, uuid);",
          "coverage": 1
        },
        "21": {
          "source": "      }",
          "coverage": ""
        },
        "22": {
          "source": "      return uuid;",
          "coverage": 3
        },
        "23": {
          "source": "    }",
          "coverage": ""
        },
        "24": {
          "source": "  },",
          "coverage": ""
        },
        "25": {
          "source": "",
          "coverage": ""
        },
        "26": {
          "source": "  //this is for fixing analytics issues when upgrading from io6 to ios7. Probably can be deprecated now",
          "coverage": ""
        },
        "27": {
          "source": "  \"getCuidMap\": function(){",
          "coverage": ""
        },
        "28": {
          "source": "    if(typeof window.fhdevice !== \"undefined\" &amp;&amp; typeof window.fhdevice.cuidMap !== \"undefined\"){",
          "coverage": 2
        },
        "29": {
          "source": "      return window.fhdevice.cuidMap;",
          "coverage": 0
        },
        "30": {
          "source": "    } else if(typeof window.device !== \"undefined\" &amp;&amp; typeof window.device.cuidMap !== \"undefined\"){",
          "coverage": 2
        },
        "31": {
          "source": "      return window.device.cuidMap;",
          "coverage": 0
        },
        "32": {
          "source": "    }  else if(typeof navigator.device !== \"undefined\" &amp;&amp; typeof navigator.device.cuidMap !== \"undefined\"){",
          "coverage": 2
        },
        "33": {
          "source": "      return navigator.device.cuidMap;",
          "coverage": 0
        },
        "34": {
          "source": "    }",
          "coverage": ""
        },
        "35": {
          "source": "",
          "coverage": ""
        },
        "36": {
          "source": "    return null;",
          "coverage": 2
        },
        "37": {
          "source": "  },",
          "coverage": ""
        },
        "38": {
          "source": "",
          "coverage": ""
        },
        "39": {
          "source": "  \"getDestination\": function(){",
          "coverage": ""
        },
        "40": {
          "source": "    var destination = null;",
          "coverage": 2
        },
        "41": {
          "source": "    var platformsToTest = require(\"./platformsMap\");",
          "coverage": 2
        },
        "42": {
          "source": "",
          "coverage": ""
        },
        "43": {
          "source": "",
          "coverage": ""
        },
        "44": {
          "source": "    var userAgent = navigator.userAgent;",
          "coverage": 2
        },
        "45": {
          "source": "",
          "coverage": ""
        },
        "46": {
          "source": "    var dest_override = document.location.search.split(\"fh_destination_code=\");",
          "coverage": 2
        },
        "47": {
          "source": "    if (dest_override.length &gt; 1) {",
          "coverage": 2
        },
        "48": {
          "source": "     destination = dest_override[1];",
          "coverage": 0
        },
        "49": {
          "source": "    } else if (typeof window.fh_destination_code !== 'undefined') {",
          "coverage": 2
        },
        "50": {
          "source": "      destination = window.fh_destination_code;",
          "coverage": 0
        },
        "51": {
          "source": "    } else {",
          "coverage": ""
        },
        "52": {
          "source": "      platformsToTest.forEach(function(testDestination){",
          "coverage": 2
        },
        "53": {
          "source": "        testDestination.test.forEach(function(destinationTest){",
          "coverage": 12
        },
        "54": {
          "source": "          if(userAgent.indexOf(destinationTest) &gt; -1){",
          "coverage": 16
        },
        "55": {
          "source": "            destination = testDestination.destination;",
          "coverage": 0
        },
        "56": {
          "source": "          }",
          "coverage": ""
        },
        "57": {
          "source": "        });",
          "coverage": ""
        },
        "58": {
          "source": "      });",
          "coverage": ""
        },
        "59": {
          "source": "    }",
          "coverage": ""
        },
        "60": {
          "source": "",
          "coverage": ""
        },
        "61": {
          "source": "    if(destination == null){ //No user agents were found, set to default web",
          "coverage": 2
        },
        "62": {
          "source": "      destination = \"web\";",
          "coverage": 2
        },
        "63": {
          "source": "    }",
          "coverage": ""
        },
        "64": {
          "source": "",
          "coverage": ""
        },
        "65": {
          "source": "    logger.debug(\"destination = \" + destination);",
          "coverage": 2
        },
        "66": {
          "source": "",
          "coverage": ""
        },
        "67": {
          "source": "    return destination;",
          "coverage": 2
        },
        "68": {
          "source": "  }",
          "coverage": ""
        },
        "69": {
          "source": "}",
          "coverage": ""
        }
      }
    },
    {
      "filename": "modules/events.js",
      "coverage": 100,
      "hits": 4,
      "misses": 0,
      "sloc": 4,
      "source": {
        "1": {
          "source": "var EventEmitter = require('events').EventEmitter;",
          "coverage": 2
        },
        "2": {
          "source": "",
          "coverage": ""
        },
        "3": {
          "source": "var emitter = new EventEmitter();",
          "coverage": 2
        },
        "4": {
          "source": "emitter.setMaxListeners(0);",
          "coverage": 2
        },
        "5": {
          "source": "",
          "coverage": ""
        },
        "6": {
          "source": "module.exports = emitter;",
          "coverage": 2
        }
      }
    },
    {
      "filename": "modules/fhparams.js",
      "coverage": 83.72093023255815,
      "hits": 36,
      "misses": 7,
      "sloc": 43,
      "source": {
        "1": {
          "source": "var device = require(\"./device\");",
          "coverage": 2
        },
        "2": {
          "source": "var sdkversion = require(\"./sdkversion\");",
          "coverage": 2
        },
        "3": {
          "source": "var appProps = require(\"./appProps\");",
          "coverage": 2
        },
        "4": {
          "source": "var logger = require(\"./logger\");",
          "coverage": 2
        },
        "5": {
          "source": "",
          "coverage": ""
        },
        "6": {
          "source": "var defaultParams = null;",
          "coverage": 2
        },
        "7": {
          "source": "var authSessionToken = null;",
          "coverage": 2
        },
        "8": {
          "source": "//TODO: review these options, we probably only needs all of them for init calls, but we shouldn't need all of them for act calls",
          "coverage": ""
        },
        "9": {
          "source": "var buildFHParams = function(){",
          "coverage": 2
        },
        "10": {
          "source": "  if(defaultParams){",
          "coverage": 48
        },
        "11": {
          "source": "    return defaultParams;",
          "coverage": 46
        },
        "12": {
          "source": "  }",
          "coverage": ""
        },
        "13": {
          "source": "  var fhparams = {};",
          "coverage": 2
        },
        "14": {
          "source": "  fhparams.cuid = device.getDeviceId();",
          "coverage": 2
        },
        "15": {
          "source": "  fhparams.cuidMap = device.getCuidMap();",
          "coverage": 2
        },
        "16": {
          "source": "  fhparams.destination = device.getDestination();",
          "coverage": 2
        },
        "17": {
          "source": "  ",
          "coverage": ""
        },
        "18": {
          "source": "  if(window.device || navigator.device){",
          "coverage": 2
        },
        "19": {
          "source": "    fhparams.device = window.device || navigator.device;",
          "coverage": 0
        },
        "20": {
          "source": "  }",
          "coverage": ""
        },
        "21": {
          "source": "",
          "coverage": ""
        },
        "22": {
          "source": "  //backward compatible",
          "coverage": ""
        },
        "23": {
          "source": "  if (typeof window.fh_app_version !== 'undefined'){",
          "coverage": 2
        },
        "24": {
          "source": "    fhparams.app_version = fh_app_version;",
          "coverage": 0
        },
        "25": {
          "source": "  }",
          "coverage": ""
        },
        "26": {
          "source": "  if (typeof window.fh_project_version !== 'undefined'){",
          "coverage": 2
        },
        "27": {
          "source": "    fhparams.project_version = fh_project_version;",
          "coverage": 0
        },
        "28": {
          "source": "  }",
          "coverage": ""
        },
        "29": {
          "source": "  if (typeof window.fh_project_app_version !== 'undefined'){",
          "coverage": 2
        },
        "30": {
          "source": "    fhparams.project_app_version = fh_project_app_version;",
          "coverage": 0
        },
        "31": {
          "source": "  }",
          "coverage": ""
        },
        "32": {
          "source": "  fhparams.sdk_version = sdkversion();",
          "coverage": 2
        },
        "33": {
          "source": "  if(authSessionToken){",
          "coverage": 2
        },
        "34": {
          "source": "    fhparams.sessionToken = authSessionToken;",
          "coverage": 0
        },
        "35": {
          "source": "  }",
          "coverage": ""
        },
        "36": {
          "source": "",
          "coverage": ""
        },
        "37": {
          "source": "  var app_props = appProps.getAppProps();",
          "coverage": 2
        },
        "38": {
          "source": "  if(app_props){",
          "coverage": 2
        },
        "39": {
          "source": "    fhparams.appid = app_props.appid;",
          "coverage": 2
        },
        "40": {
          "source": "    fhparams.appkey = app_props.appkey;",
          "coverage": 2
        },
        "41": {
          "source": "    fhparams.projectid = app_props.projectid;",
          "coverage": 2
        },
        "42": {
          "source": "    fhparams.analyticsTag =  app_props.analyticsTag;",
          "coverage": 2
        },
        "43": {
          "source": "    fhparams.connectiontag = app_props.connectiontag;",
          "coverage": 2
        },
        "44": {
          "source": "    if(app_props.init){",
          "coverage": 2
        },
        "45": {
          "source": "      fhparams.init = typeof(app_props.init) === \"string\" ? JSON.parse(app_props.init) : app_props.init;",
          "coverage": 0
        },
        "46": {
          "source": "    }",
          "coverage": ""
        },
        "47": {
          "source": "  }",
          "coverage": ""
        },
        "48": {
          "source": "  ",
          "coverage": ""
        },
        "49": {
          "source": "  defaultParams = fhparams;",
          "coverage": 2
        },
        "50": {
          "source": "  logger.debug(\"fhparams = \", defaultParams);",
          "coverage": 2
        },
        "51": {
          "source": "  return fhparams;",
          "coverage": 2
        },
        "52": {
          "source": "}",
          "coverage": ""
        },
        "53": {
          "source": "",
          "coverage": ""
        },
        "54": {
          "source": "var addFHParams = function(params){",
          "coverage": 2
        },
        "55": {
          "source": "  var params = params || {};",
          "coverage": 48
        },
        "56": {
          "source": "  params.__fh = buildFHParams();",
          "coverage": 48
        },
        "57": {
          "source": "  return params;",
          "coverage": 48
        },
        "58": {
          "source": "}",
          "coverage": ""
        },
        "59": {
          "source": "",
          "coverage": ""
        },
        "60": {
          "source": "var setAuthSessionToken = function(sessionToken){",
          "coverage": 2
        },
        "61": {
          "source": "  authSessionToken = sessionToken;",
          "coverage": 0
        },
        "62": {
          "source": "}",
          "coverage": ""
        },
        "63": {
          "source": "",
          "coverage": ""
        },
        "64": {
          "source": "module.exports = {",
          "coverage": 2
        },
        "65": {
          "source": "  \"buildFHParams\": buildFHParams,",
          "coverage": ""
        },
        "66": {
          "source": "  \"addFHParams\": addFHParams,",
          "coverage": ""
        },
        "67": {
          "source": "  \"setAuthSessionToken\":setAuthSessionToken",
          "coverage": ""
        },
        "68": {
          "source": "}",
          "coverage": ""
        }
      }
    },
    {
      "filename": "modules/handleError.js",
      "coverage": 78.57142857142857,
      "hits": 11,
      "misses": 3,
      "sloc": 14,
      "source": {
        "1": {
          "source": "var JSON = require(\"JSON\");",
          "coverage": 2
        },
        "2": {
          "source": "",
          "coverage": ""
        },
        "3": {
          "source": "module.exports = function(fail, req, resStatus, error){",
          "coverage": 2
        },
        "4": {
          "source": "  var errraw;",
          "coverage": 16
        },
        "5": {
          "source": "  var statusCode = 0;",
          "coverage": 16
        },
        "6": {
          "source": "  if(req){",
          "coverage": 16
        },
        "7": {
          "source": "    try{",
          "coverage": 12
        },
        "8": {
          "source": "      statusCode = req.status;",
          "coverage": 12
        },
        "9": {
          "source": "      var res = JSON.parse(req.responseText);",
          "coverage": 12
        },
        "10": {
          "source": "      errraw = res.error || res.msg;",
          "coverage": 0
        },
        "11": {
          "source": "      if (errraw instanceof Array) {",
          "coverage": 0
        },
        "12": {
          "source": "        errraw = errraw.join('\\n');",
          "coverage": 0
        },
        "13": {
          "source": "      }",
          "coverage": ""
        },
        "14": {
          "source": "    } catch(e){",
          "coverage": ""
        },
        "15": {
          "source": "      errraw = req.responseText;",
          "coverage": 12
        },
        "16": {
          "source": "    }",
          "coverage": ""
        },
        "17": {
          "source": "  }",
          "coverage": ""
        },
        "18": {
          "source": "  if(fail){",
          "coverage": 16
        },
        "19": {
          "source": "    fail(errraw, {",
          "coverage": 16
        },
        "20": {
          "source": "      status: statusCode,",
          "coverage": ""
        },
        "21": {
          "source": "      message: resStatus,",
          "coverage": ""
        },
        "22": {
          "source": "      error: error",
          "coverage": ""
        },
        "23": {
          "source": "    });",
          "coverage": ""
        },
        "24": {
          "source": "  }",
          "coverage": ""
        },
        "25": {
          "source": "};",
          "coverage": ""
        }
      }
    },
    {
      "filename": "modules/hosts.js",
      "coverage": 77.35849056603774,
      "hits": 41,
      "misses": 12,
      "sloc": 53,
      "source": {
        "1": {
          "source": "var constants = require(\"./constants\");",
          "coverage": 2
        },
        "2": {
          "source": "var appProps = require(\"./appProps\");",
          "coverage": 2
        },
        "3": {
          "source": "",
          "coverage": ""
        },
        "4": {
          "source": "function removeEndSlash(input){",
          "coverage": 2
        },
        "5": {
          "source": "  var ret = input;",
          "coverage": 9
        },
        "6": {
          "source": "  if(ret.charAt(ret.length - 1) === \"/\"){",
          "coverage": 9
        },
        "7": {
          "source": "    ret = ret.substring(0, ret.length-1);",
          "coverage": 0
        },
        "8": {
          "source": "  }",
          "coverage": ""
        },
        "9": {
          "source": "  return ret;",
          "coverage": 9
        },
        "10": {
          "source": "}",
          "coverage": ""
        },
        "11": {
          "source": "",
          "coverage": ""
        },
        "12": {
          "source": "function removeStartSlash(input){",
          "coverage": 2
        },
        "13": {
          "source": "  var ret = input;",
          "coverage": 38
        },
        "14": {
          "source": "  if(ret.length &gt; 1 &amp;&amp; ret.charAt(0) === \"/\"){",
          "coverage": 38
        },
        "15": {
          "source": "    ret = ret.substring(1, ret.length);",
          "coverage": 37
        },
        "16": {
          "source": "  }",
          "coverage": ""
        },
        "17": {
          "source": "  return ret;",
          "coverage": 38
        },
        "18": {
          "source": "}",
          "coverage": ""
        },
        "19": {
          "source": "",
          "coverage": ""
        },
        "20": {
          "source": "function CloudHost(cloud_props){",
          "coverage": 2
        },
        "21": {
          "source": "  this.cloud_props = cloud_props;",
          "coverage": 9
        },
        "22": {
          "source": "  this.cloud_host = undefined;",
          "coverage": 9
        },
        "23": {
          "source": "  this.isLegacy = false;",
          "coverage": 9
        },
        "24": {
          "source": "}",
          "coverage": ""
        },
        "25": {
          "source": "",
          "coverage": ""
        },
        "26": {
          "source": "CloudHost.prototype.getHost = function(appType){",
          "coverage": 2
        },
        "27": {
          "source": "  if(this.cloud_host){",
          "coverage": 65
        },
        "28": {
          "source": "    return this.cloud_host;",
          "coverage": 56
        },
        "29": {
          "source": "  } else {",
          "coverage": ""
        },
        "30": {
          "source": "    var url;",
          "coverage": 9
        },
        "31": {
          "source": "    var app_type;",
          "coverage": 9
        },
        "32": {
          "source": "    if(this.cloud_props &amp;&amp; this.cloud_props.hosts){",
          "coverage": 9
        },
        "33": {
          "source": "      url = this.cloud_props.hosts.url;",
          "coverage": 9
        },
        "34": {
          "source": "",
          "coverage": ""
        },
        "35": {
          "source": "      if (typeof url === 'undefined') {",
          "coverage": 9
        },
        "36": {
          "source": "        // resolve url the old way i.e. depending on",
          "coverage": ""
        },
        "37": {
          "source": "        // -burnt in app mode",
          "coverage": ""
        },
        "38": {
          "source": "        // -returned dev or live url",
          "coverage": ""
        },
        "39": {
          "source": "        // -returned dev or live type (node or fh(rhino or proxying))",
          "coverage": ""
        },
        "40": {
          "source": "        var cloud_host = this.cloud_props.hosts.releaseCloudUrl;",
          "coverage": 0
        },
        "41": {
          "source": "        app_type = this.cloud_props.hosts.releaseCloudType;",
          "coverage": 0
        },
        "42": {
          "source": "",
          "coverage": ""
        },
        "43": {
          "source": "        if(typeof appType !== \"undefined\" &amp;&amp; appType.indexOf(\"dev\") &gt; -1){",
          "coverage": 0
        },
        "44": {
          "source": "          cloud_host = this.cloud_props.hosts.debugCloudUrl;",
          "coverage": 0
        },
        "45": {
          "source": "          app_type = this.cloud_props.hosts.debugCloudType;",
          "coverage": 0
        },
        "46": {
          "source": "        }",
          "coverage": ""
        },
        "47": {
          "source": "        url = cloud_host;",
          "coverage": 0
        },
        "48": {
          "source": "      }",
          "coverage": ""
        },
        "49": {
          "source": "    }",
          "coverage": ""
        },
        "50": {
          "source": "    url = removeEndSlash(url);",
          "coverage": 9
        },
        "51": {
          "source": "    this.cloud_host = url;",
          "coverage": 9
        },
        "52": {
          "source": "    if(app_type === \"fh\"){",
          "coverage": 9
        },
        "53": {
          "source": "      this.isLegacy = true;",
          "coverage": 0
        },
        "54": {
          "source": "    }",
          "coverage": ""
        },
        "55": {
          "source": "    return url;",
          "coverage": 9
        },
        "56": {
          "source": "  }",
          "coverage": ""
        },
        "57": {
          "source": "}",
          "coverage": ""
        },
        "58": {
          "source": "",
          "coverage": ""
        },
        "59": {
          "source": "CloudHost.prototype.getActUrl = function(act){",
          "coverage": 2
        },
        "60": {
          "source": "  var app_props = appProps.getAppProps() || {};",
          "coverage": 8
        },
        "61": {
          "source": "  if(typeof this.cloud_host === \"undefined\"){",
          "coverage": 8
        },
        "62": {
          "source": "    this.getHost(app_props.mode);",
          "coverage": 0
        },
        "63": {
          "source": "  }",
          "coverage": ""
        },
        "64": {
          "source": "  if(this.isLegacy){",
          "coverage": 8
        },
        "65": {
          "source": "    return this.cloud_host + constants.boxprefix + \"act/\" + this.cloud_props.domain + \"/\" + app_props.appid + \"/\" + act + \"/\" + app_props.appid;",
          "coverage": 0
        },
        "66": {
          "source": "  } else {",
          "coverage": ""
        },
        "67": {
          "source": "    return this.cloud_host + \"/cloud/\" + act;",
          "coverage": 8
        },
        "68": {
          "source": "  }",
          "coverage": ""
        },
        "69": {
          "source": "}",
          "coverage": ""
        },
        "70": {
          "source": "",
          "coverage": ""
        },
        "71": {
          "source": "CloudHost.prototype.getMBAASUrl = function(service){",
          "coverage": 2
        },
        "72": {
          "source": "  var app_props = appProps.getAppProps() || {};",
          "coverage": 1
        },
        "73": {
          "source": "  if(typeof this.cloud_host === \"undefined\"){",
          "coverage": 1
        },
        "74": {
          "source": "    this.getHost(app_props.mode);",
          "coverage": 0
        },
        "75": {
          "source": "  }",
          "coverage": ""
        },
        "76": {
          "source": "  return this.cloud_host + \"/mbaas/\" + service;",
          "coverage": 1
        },
        "77": {
          "source": "}",
          "coverage": ""
        },
        "78": {
          "source": "",
          "coverage": ""
        },
        "79": {
          "source": "CloudHost.prototype.getCloudUrl = function(path){",
          "coverage": 2
        },
        "80": {
          "source": "  var app_props = appProps.getAppProps() || {};",
          "coverage": 38
        },
        "81": {
          "source": "  if(typeof this.cloud_host === \"undefined\"){",
          "coverage": 38
        },
        "82": {
          "source": "    this.getHost(app_props.mode);",
          "coverage": 0
        },
        "83": {
          "source": "  }",
          "coverage": ""
        },
        "84": {
          "source": "  return this.cloud_host + \"/\" + removeStartSlash(path);",
          "coverage": 38
        },
        "85": {
          "source": "}",
          "coverage": ""
        },
        "86": {
          "source": "",
          "coverage": ""
        },
        "87": {
          "source": "",
          "coverage": ""
        },
        "88": {
          "source": "",
          "coverage": ""
        },
        "89": {
          "source": "module.exports = CloudHost;",
          "coverage": 2
        }
      }
    },
    {
      "filename": "modules/initializer.js",
      "coverage": 34.42622950819672,
      "hits": 21,
      "misses": 40,
      "sloc": 61,
      "source": {
        "1": {
          "source": "var loadScript = require(\"./loadScript\");",
          "coverage": 2
        },
        "2": {
          "source": "var Lawnchair = require('../../libs/generated/lawnchair');",
          "coverage": 2
        },
        "3": {
          "source": "var lawnchairext = require('./lawnchair-ext');",
          "coverage": 2
        },
        "4": {
          "source": "var consts = require(\"./constants\");",
          "coverage": 2
        },
        "5": {
          "source": "var fhparams = require(\"./fhparams\");",
          "coverage": 2
        },
        "6": {
          "source": "var ajax = require(\"./ajax\");",
          "coverage": 2
        },
        "7": {
          "source": "var handleError = require(\"./handleError\");",
          "coverage": 2
        },
        "8": {
          "source": "var logger = require(\"./logger\");",
          "coverage": 2
        },
        "9": {
          "source": "var JSON = require(\"JSON\");",
          "coverage": 2
        },
        "10": {
          "source": "var hashFunc = require(\"./security/hash\");",
          "coverage": 2
        },
        "11": {
          "source": "var appProps = require(\"./appProps\");",
          "coverage": 2
        },
        "12": {
          "source": "",
          "coverage": ""
        },
        "13": {
          "source": "var init = function(cb) {",
          "coverage": 2
        },
        "14": {
          "source": "  appProps.load(function(err, data) {",
          "coverage": 9
        },
        "15": {
          "source": "    if (err) return cb(err);",
          "coverage": 9
        },
        "16": {
          "source": "    return loadCloudProps(data, cb);",
          "coverage": 9
        },
        "17": {
          "source": "  });",
          "coverage": ""
        },
        "18": {
          "source": "}",
          "coverage": ""
        },
        "19": {
          "source": "",
          "coverage": ""
        },
        "20": {
          "source": "var loadCloudProps = function(app_props, callback) {",
          "coverage": 2
        },
        "21": {
          "source": "  if(app_props.loglevel){",
          "coverage": 9
        },
        "22": {
          "source": "    logger.setLevel(app_props.loglevel);",
          "coverage": 0
        },
        "23": {
          "source": "  }",
          "coverage": ""
        },
        "24": {
          "source": "  // If local - shortcircuit the init - just return the host",
          "coverage": ""
        },
        "25": {
          "source": "  if (app_props.local) {",
          "coverage": 9
        },
        "26": {
          "source": "    var res = {",
          "coverage": 9
        },
        "27": {
          "source": "      \"domain\": \"local\",",
          "coverage": ""
        },
        "28": {
          "source": "      \"firstTime\": false,",
          "coverage": ""
        },
        "29": {
          "source": "      \"hosts\": {",
          "coverage": ""
        },
        "30": {
          "source": "        \"debugCloudType\": \"node\",",
          "coverage": ""
        },
        "31": {
          "source": "        \"debugCloudUrl\": app_props.host,",
          "coverage": ""
        },
        "32": {
          "source": "        \"releaseCloudType\": \"node\",",
          "coverage": ""
        },
        "33": {
          "source": "        \"releaseCloudUrl\": app_props.host,",
          "coverage": ""
        },
        "34": {
          "source": "        \"type\": \"cloud_nodejs\",",
          "coverage": ""
        },
        "35": {
          "source": "        \"url\": app_props.host",
          "coverage": ""
        },
        "36": {
          "source": "      },",
          "coverage": ""
        },
        "37": {
          "source": "      \"init\": {",
          "coverage": ""
        },
        "38": {
          "source": "        \"trackId\": \"000000000000000000000000\"",
          "coverage": ""
        },
        "39": {
          "source": "      },",
          "coverage": ""
        },
        "40": {
          "source": "      \"status\": \"ok\"",
          "coverage": ""
        },
        "41": {
          "source": "    };",
          "coverage": ""
        },
        "42": {
          "source": "",
          "coverage": ""
        },
        "43": {
          "source": "    return callback(null, {",
          "coverage": 9
        },
        "44": {
          "source": "      cloud: res",
          "coverage": ""
        },
        "45": {
          "source": "    });",
          "coverage": ""
        },
        "46": {
          "source": "  }",
          "coverage": ""
        },
        "47": {
          "source": "",
          "coverage": ""
        },
        "48": {
          "source": "",
          "coverage": ""
        },
        "49": {
          "source": "  //now we have app props, add the fileStorageAdapter",
          "coverage": ""
        },
        "50": {
          "source": "  lawnchairext.addAdapter(app_props, hashFunc);",
          "coverage": 0
        },
        "51": {
          "source": "  //dom adapter doens't work on windows phone, so don't specify the adapter if the dom one failed",
          "coverage": ""
        },
        "52": {
          "source": "  //we specify the order of lawnchair adapters to use, lawnchair will find the right one to use, to keep backward compatibility, keep the order",
          "coverage": ""
        },
        "53": {
          "source": "  //as dom, webkit-sqlite, localFileStorage, window-name",
          "coverage": ""
        },
        "54": {
          "source": "  var lcConf = {",
          "coverage": 0
        },
        "55": {
          "source": "    name: \"fh_init_storage\",",
          "coverage": ""
        },
        "56": {
          "source": "    adapter: [\"dom\", \"webkit-sqlite\", \"window-name\"],",
          "coverage": ""
        },
        "57": {
          "source": "    fail: function(msg, err) {",
          "coverage": ""
        },
        "58": {
          "source": "      var error_message = 'read/save from/to local storage failed  msg:' + msg + ' err:' + err;",
          "coverage": 0
        },
        "59": {
          "source": "      return fail(error_message, {});",
          "coverage": 0
        },
        "60": {
          "source": "    }",
          "coverage": ""
        },
        "61": {
          "source": "  };",
          "coverage": ""
        },
        "62": {
          "source": "",
          "coverage": ""
        },
        "63": {
          "source": "  var doInit = function(path, appProps, savedHost, storage){",
          "coverage": 0
        },
        "64": {
          "source": "    var data = fhparams.buildFHParams();",
          "coverage": 0
        },
        "65": {
          "source": "",
          "coverage": ""
        },
        "66": {
          "source": "    ajax({",
          "coverage": 0
        },
        "67": {
          "source": "      \"url\": path,",
          "coverage": ""
        },
        "68": {
          "source": "      \"type\": \"POST\",",
          "coverage": ""
        },
        "69": {
          "source": "      \"tryJSONP\": true,",
          "coverage": ""
        },
        "70": {
          "source": "      \"dataType\": \"json\",",
          "coverage": ""
        },
        "71": {
          "source": "      \"contentType\": \"application/json\",",
          "coverage": ""
        },
        "72": {
          "source": "      \"data\": JSON.stringify(data),",
          "coverage": ""
        },
        "73": {
          "source": "      \"timeout\": appProps.timeout,",
          "coverage": ""
        },
        "74": {
          "source": "      \"success\": function(initRes){",
          "coverage": ""
        },
        "75": {
          "source": "        if(storage){",
          "coverage": 0
        },
        "76": {
          "source": "          storage.save({",
          "coverage": 0
        },
        "77": {
          "source": "            key: \"fh_init\",",
          "coverage": ""
        },
        "78": {
          "source": "            value: initRes",
          "coverage": ""
        },
        "79": {
          "source": "          }, function() {});",
          "coverage": ""
        },
        "80": {
          "source": "        }",
          "coverage": ""
        },
        "81": {
          "source": "        if (callback) {",
          "coverage": 0
        },
        "82": {
          "source": "          callback(null, {",
          "coverage": 0
        },
        "83": {
          "source": "            cloud: initRes",
          "coverage": ""
        },
        "84": {
          "source": "          });",
          "coverage": ""
        },
        "85": {
          "source": "        }",
          "coverage": ""
        },
        "86": {
          "source": "      },",
          "coverage": ""
        },
        "87": {
          "source": "      \"error\": function(req, statusText, error) {",
          "coverage": ""
        },
        "88": {
          "source": "        var errormsg = \"unknown\";",
          "coverage": 0
        },
        "89": {
          "source": "        if(req){",
          "coverage": 0
        },
        "90": {
          "source": "          errormsg = req.status + \" - \" + req.responseText;",
          "coverage": 0
        },
        "91": {
          "source": "        }",
          "coverage": ""
        },
        "92": {
          "source": "        logger.error(\"App init returned error : \" + errormsg);",
          "coverage": 0
        },
        "93": {
          "source": "        //use the cached host if we have a copy",
          "coverage": ""
        },
        "94": {
          "source": "        if (savedHost) {",
          "coverage": 0
        },
        "95": {
          "source": "          logger.info(\"Using cached host: \" + JSON.stringify(savedHost));",
          "coverage": 0
        },
        "96": {
          "source": "          if (callback) {",
          "coverage": 0
        },
        "97": {
          "source": "            callback(null, {",
          "coverage": 0
        },
        "98": {
          "source": "              cloud: savedHost",
          "coverage": ""
        },
        "99": {
          "source": "            });",
          "coverage": ""
        },
        "100": {
          "source": "          }",
          "coverage": ""
        },
        "101": {
          "source": "        } else {",
          "coverage": ""
        },
        "102": {
          "source": "          logger.error(\"No cached host found. Init failed.\");",
          "coverage": 0
        },
        "103": {
          "source": "          handleError(function(msg, err) {",
          "coverage": 0
        },
        "104": {
          "source": "            if (callback) {",
          "coverage": 0
        },
        "105": {
          "source": "              callback({",
          "coverage": 0
        },
        "106": {
          "source": "                error: err,",
          "coverage": ""
        },
        "107": {
          "source": "                message: msg",
          "coverage": ""
        },
        "108": {
          "source": "              });",
          "coverage": ""
        },
        "109": {
          "source": "            }",
          "coverage": ""
        },
        "110": {
          "source": "          }, req, statusText, error);",
          "coverage": ""
        },
        "111": {
          "source": "        }",
          "coverage": ""
        },
        "112": {
          "source": "      }",
          "coverage": ""
        },
        "113": {
          "source": "    });",
          "coverage": ""
        },
        "114": {
          "source": "  }",
          "coverage": ""
        },
        "115": {
          "source": "",
          "coverage": ""
        },
        "116": {
          "source": "  var storage = null;",
          "coverage": 0
        },
        "117": {
          "source": "  var path = app_props.host + consts.boxprefix + \"app/init\";",
          "coverage": 0
        },
        "118": {
          "source": "  try {",
          "coverage": 0
        },
        "119": {
          "source": "    storage = new Lawnchair(lcConf, function() {});",
          "coverage": 0
        },
        "120": {
          "source": "    storage.get('fh_init', function(storage_res) {",
          "coverage": 0
        },
        "121": {
          "source": "      var savedHost = null;",
          "coverage": 0
        },
        "122": {
          "source": "      if (storage_res &amp;&amp; storage_res.value !== null &amp;&amp; typeof(storage_res.value) !== \"undefined\" &amp;&amp; storage_res !== \"\") {",
          "coverage": 0
        },
        "123": {
          "source": "        storage_res = typeof(storage_res) === \"string\" ? JSON.parse(storage_res) : storage_res;",
          "coverage": 0
        },
        "124": {
          "source": "        storage_res.value = typeof(storage_res.value) === \"string\" ? JSON.parse(storage_res.value) : storage_res.value;",
          "coverage": 0
        },
        "125": {
          "source": "        if (storage_res.value.init) {",
          "coverage": 0
        },
        "126": {
          "source": "          app_props.init = storage_res.value.init;",
          "coverage": 0
        },
        "127": {
          "source": "        } else {",
          "coverage": ""
        },
        "128": {
          "source": "          //keep it backward compatible.",
          "coverage": ""
        },
        "129": {
          "source": "          app_props.init = typeof(storage_res.value) === \"string\" ? JSON.parse(storage_res.value) : storage_res.value;",
          "coverage": 0
        },
        "130": {
          "source": "        }",
          "coverage": ""
        },
        "131": {
          "source": "        if (storage_res.value.hosts) {",
          "coverage": 0
        },
        "132": {
          "source": "          savedHost = storage_res.value;",
          "coverage": 0
        },
        "133": {
          "source": "        }",
          "coverage": ""
        },
        "134": {
          "source": "      }",
          "coverage": ""
        },
        "135": {
          "source": "",
          "coverage": ""
        },
        "136": {
          "source": "      doInit(path, app_props, savedHost, storage);",
          "coverage": 0
        },
        "137": {
          "source": "    });",
          "coverage": ""
        },
        "138": {
          "source": "  } catch (e) {",
          "coverage": ""
        },
        "139": {
          "source": "    //for whatever reason (e.g. localStorage is disabled) Lawnchair is failed to init, just do the init",
          "coverage": ""
        },
        "140": {
          "source": "    doInit(path, app_props, null, null);",
          "coverage": 0
        },
        "141": {
          "source": "  }  ",
          "coverage": ""
        },
        "142": {
          "source": "};",
          "coverage": ""
        },
        "143": {
          "source": "",
          "coverage": ""
        },
        "144": {
          "source": "module.exports = {",
          "coverage": 2
        },
        "145": {
          "source": "  \"init\": init,",
          "coverage": ""
        },
        "146": {
          "source": "  \"loadCloudProps\": loadCloudProps",
          "coverage": ""
        },
        "147": {
          "source": "}",
          "coverage": ""
        }
      }
    },
    {
      "filename": "modules/lawnchair-ext.js",
      "coverage": 5.333333333333334,
      "hits": 4,
      "misses": 71,
      "sloc": 75,
      "source": {
        "1": {
          "source": "var Lawnchair = require('../../libs/generated/lawnchair');",
          "coverage": 2
        },
        "2": {
          "source": "",
          "coverage": ""
        },
        "3": {
          "source": "var fileStorageAdapter = function (app_props, hashFunc) {",
          "coverage": 2
        },
        "4": {
          "source": "  // private methods",
          "coverage": ""
        },
        "5": {
          "source": "",
          "coverage": ""
        },
        "6": {
          "source": "  function doLog(mess){",
          "coverage": 0
        },
        "7": {
          "source": "    if(console){",
          "coverage": 0
        },
        "8": {
          "source": "      console.log(mess);",
          "coverage": 0
        },
        "9": {
          "source": "    }",
          "coverage": ""
        },
        "10": {
          "source": "  }",
          "coverage": ""
        },
        "11": {
          "source": "",
          "coverage": ""
        },
        "12": {
          "source": "  var fail = function (e, i) {",
          "coverage": 0
        },
        "13": {
          "source": "    if(console) console.log('error in file system adapter !', e, i);",
          "coverage": 0
        },
        "14": {
          "source": "    else throw e;",
          "coverage": 0
        },
        "15": {
          "source": "  };",
          "coverage": ""
        },
        "16": {
          "source": "",
          "coverage": ""
        },
        "17": {
          "source": "",
          "coverage": ""
        },
        "18": {
          "source": "  function filenameForKey(key, cb) {",
          "coverage": 0
        },
        "19": {
          "source": "    key = app_props.appid + key;",
          "coverage": 0
        },
        "20": {
          "source": "",
          "coverage": ""
        },
        "21": {
          "source": "    hashFunc({",
          "coverage": 0
        },
        "22": {
          "source": "      algorithm: \"MD5\",",
          "coverage": ""
        },
        "23": {
          "source": "      text: key",
          "coverage": ""
        },
        "24": {
          "source": "    }, function(result) {",
          "coverage": ""
        },
        "25": {
          "source": "      var filename = result.hashvalue + '.txt';",
          "coverage": 0
        },
        "26": {
          "source": "      if (typeof navigator.externalstorage !== \"undefined\") {",
          "coverage": 0
        },
        "27": {
          "source": "        navigator.externalstorage.enable(function handleSuccess(res){",
          "coverage": 0
        },
        "28": {
          "source": "          var path = filename;",
          "coverage": 0
        },
        "29": {
          "source": "          if(res.path ) {",
          "coverage": 0
        },
        "30": {
          "source": "            path = res.path;",
          "coverage": 0
        },
        "31": {
          "source": "            if(!path.match(/\\/$/)) {",
          "coverage": 0
        },
        "32": {
          "source": "              path += '/';",
          "coverage": 0
        },
        "33": {
          "source": "            }",
          "coverage": ""
        },
        "34": {
          "source": "            path += filename;",
          "coverage": 0
        },
        "35": {
          "source": "          }",
          "coverage": ""
        },
        "36": {
          "source": "          filename = path;",
          "coverage": 0
        },
        "37": {
          "source": "          return cb(filename);",
          "coverage": 0
        },
        "38": {
          "source": "        },function handleError(err){",
          "coverage": ""
        },
        "39": {
          "source": "          return cb(filename);",
          "coverage": 0
        },
        "40": {
          "source": "        })",
          "coverage": ""
        },
        "41": {
          "source": "      } else {",
          "coverage": ""
        },
        "42": {
          "source": "        doLog('filenameForKey key=' + key+ ' , Filename: ' + filename);",
          "coverage": 0
        },
        "43": {
          "source": "        return cb(filename);",
          "coverage": 0
        },
        "44": {
          "source": "      }",
          "coverage": ""
        },
        "45": {
          "source": "    });",
          "coverage": ""
        },
        "46": {
          "source": "  }",
          "coverage": ""
        },
        "47": {
          "source": "",
          "coverage": ""
        },
        "48": {
          "source": "  return {",
          "coverage": 0
        },
        "49": {
          "source": "",
          "coverage": ""
        },
        "50": {
          "source": "    valid: function () { return !!(window.requestFileSystem) },",
          "coverage": 0
        },
        "51": {
          "source": "",
          "coverage": ""
        },
        "52": {
          "source": "    init : function (options, callback){",
          "coverage": ""
        },
        "53": {
          "source": "      //calls the parent function fn and applies this scope",
          "coverage": ""
        },
        "54": {
          "source": "      if(options &amp;&amp; 'function' === typeof options.fail ) fail = options.fail;",
          "coverage": 0
        },
        "55": {
          "source": "      if (callback) this.fn(this.name, callback).call(this, this);",
          "coverage": 0
        },
        "56": {
          "source": "    },",
          "coverage": ""
        },
        "57": {
          "source": "",
          "coverage": ""
        },
        "58": {
          "source": "    keys: function (callback){",
          "coverage": ""
        },
        "59": {
          "source": "      throw \"Currently not supported\";",
          "coverage": 0
        },
        "60": {
          "source": "    },",
          "coverage": ""
        },
        "61": {
          "source": "",
          "coverage": ""
        },
        "62": {
          "source": "    save : function (obj, callback){",
          "coverage": ""
        },
        "63": {
          "source": "      var key = obj.key;",
          "coverage": 0
        },
        "64": {
          "source": "      var value = obj.val||obj.value;",
          "coverage": 0
        },
        "65": {
          "source": "      filenameForKey(key, function(hash) {",
          "coverage": 0
        },
        "66": {
          "source": "        window.requestFileSystem(LocalFileSystem.PERSISTENT, 0, function gotFS(fileSystem) {",
          "coverage": 0
        },
        "67": {
          "source": "",
          "coverage": ""
        },
        "68": {
          "source": "          fileSystem.root.getFile(hash, {",
          "coverage": 0
        },
        "69": {
          "source": "            create: true",
          "coverage": ""
        },
        "70": {
          "source": "          }, function gotFileEntry(fileEntry) {",
          "coverage": ""
        },
        "71": {
          "source": "            fileEntry.createWriter(function gotFileWriter(writer) {",
          "coverage": 0
        },
        "72": {
          "source": "              writer.onwrite = function() {",
          "coverage": 0
        },
        "73": {
          "source": "                return callback({",
          "coverage": 0
        },
        "74": {
          "source": "                  key: key,",
          "coverage": ""
        },
        "75": {
          "source": "                  val: value",
          "coverage": ""
        },
        "76": {
          "source": "                });",
          "coverage": ""
        },
        "77": {
          "source": "              };",
          "coverage": ""
        },
        "78": {
          "source": "              writer.write(value);",
          "coverage": 0
        },
        "79": {
          "source": "            }, function() {",
          "coverage": ""
        },
        "80": {
          "source": "              fail('[save] Failed to create file writer');",
          "coverage": 0
        },
        "81": {
          "source": "            });",
          "coverage": ""
        },
        "82": {
          "source": "          }, function() {",
          "coverage": ""
        },
        "83": {
          "source": "            fail('[save] Failed to getFile');",
          "coverage": 0
        },
        "84": {
          "source": "          });",
          "coverage": ""
        },
        "85": {
          "source": "        }, function() {",
          "coverage": ""
        },
        "86": {
          "source": "          fail('[save] Failed to requestFileSystem');",
          "coverage": 0
        },
        "87": {
          "source": "        });",
          "coverage": ""
        },
        "88": {
          "source": "      });",
          "coverage": ""
        },
        "89": {
          "source": "    },",
          "coverage": ""
        },
        "90": {
          "source": "",
          "coverage": ""
        },
        "91": {
          "source": "    batch : function (records, callback){",
          "coverage": ""
        },
        "92": {
          "source": "      throw \"Currently not supported\";",
          "coverage": 0
        },
        "93": {
          "source": "    },",
          "coverage": ""
        },
        "94": {
          "source": "",
          "coverage": ""
        },
        "95": {
          "source": "    get : function (key, callback){",
          "coverage": ""
        },
        "96": {
          "source": "      filenameForKey(key, function(hash) {",
          "coverage": 0
        },
        "97": {
          "source": "        window.requestFileSystem(LocalFileSystem.PERSISTENT, 0, function gotFS(fileSystem) {",
          "coverage": 0
        },
        "98": {
          "source": "          fileSystem.root.getFile(hash, {}, function gotFileEntry(fileEntry) {",
          "coverage": 0
        },
        "99": {
          "source": "            fileEntry.file(function gotFile(file) {",
          "coverage": 0
        },
        "100": {
          "source": "              var reader = new FileReader();",
          "coverage": 0
        },
        "101": {
          "source": "              reader.onloadend = function (evt) {",
          "coverage": 0
        },
        "102": {
          "source": "                var text = evt.target.result;",
          "coverage": 0
        },
        "103": {
          "source": "                // Check for URLencoded",
          "coverage": ""
        },
        "104": {
          "source": "                // PG 2.2 bug in readAsText()",
          "coverage": ""
        },
        "105": {
          "source": "                try {",
          "coverage": 0
        },
        "106": {
          "source": "                  text = decodeURIComponent(text);",
          "coverage": 0
        },
        "107": {
          "source": "                } catch (e) {",
          "coverage": ""
        },
        "108": {
          "source": "                  // Swallow exception if not URLencoded",
          "coverage": ""
        },
        "109": {
          "source": "                  // Just use the result",
          "coverage": ""
        },
        "110": {
          "source": "                }",
          "coverage": ""
        },
        "111": {
          "source": "                return callback({",
          "coverage": 0
        },
        "112": {
          "source": "                  key: key,",
          "coverage": ""
        },
        "113": {
          "source": "                  val: text",
          "coverage": ""
        },
        "114": {
          "source": "                });",
          "coverage": ""
        },
        "115": {
          "source": "              };",
          "coverage": ""
        },
        "116": {
          "source": "              reader.readAsText(file);",
          "coverage": 0
        },
        "117": {
          "source": "            }, function() {",
          "coverage": ""
        },
        "118": {
          "source": "              fail('[load] Failed to getFile');",
          "coverage": 0
        },
        "119": {
          "source": "            });",
          "coverage": ""
        },
        "120": {
          "source": "          }, function() {",
          "coverage": ""
        },
        "121": {
          "source": "            // Success callback on key load failure",
          "coverage": ""
        },
        "122": {
          "source": "            callback({",
          "coverage": 0
        },
        "123": {
          "source": "              key: key,",
          "coverage": ""
        },
        "124": {
          "source": "              val: null",
          "coverage": ""
        },
        "125": {
          "source": "            });",
          "coverage": ""
        },
        "126": {
          "source": "          });",
          "coverage": ""
        },
        "127": {
          "source": "        }, function() {",
          "coverage": ""
        },
        "128": {
          "source": "          fail('[load] Failed to get fileSystem');",
          "coverage": 0
        },
        "129": {
          "source": "        });",
          "coverage": ""
        },
        "130": {
          "source": "      });",
          "coverage": ""
        },
        "131": {
          "source": "    },",
          "coverage": ""
        },
        "132": {
          "source": "",
          "coverage": ""
        },
        "133": {
          "source": "    exists : function (key, callback){",
          "coverage": ""
        },
        "134": {
          "source": "      filenameForKey(key,function (hash){",
          "coverage": 0
        },
        "135": {
          "source": "        window.requestFileSystem(LocalFileSystem.PERSISTENT, 0, function gotFS(fileSystem) {",
          "coverage": 0
        },
        "136": {
          "source": "          fileSystem.root.getFile(hash, {},",
          "coverage": 0
        },
        "137": {
          "source": "            function gotFileEntry(fileEntry) {",
          "coverage": ""
        },
        "138": {
          "source": "              return callback(true);",
          "coverage": 0
        },
        "139": {
          "source": "            }, function (err){",
          "coverage": ""
        },
        "140": {
          "source": "              return callback(false);",
          "coverage": 0
        },
        "141": {
          "source": "            });",
          "coverage": ""
        },
        "142": {
          "source": "        });",
          "coverage": ""
        },
        "143": {
          "source": "      });",
          "coverage": ""
        },
        "144": {
          "source": "    },",
          "coverage": ""
        },
        "145": {
          "source": "",
          "coverage": ""
        },
        "146": {
          "source": "    all : function (callback){",
          "coverage": ""
        },
        "147": {
          "source": "      throw \"Currently not supported\";",
          "coverage": 0
        },
        "148": {
          "source": "    },",
          "coverage": ""
        },
        "149": {
          "source": "",
          "coverage": ""
        },
        "150": {
          "source": "    remove : function (key, callback){",
          "coverage": ""
        },
        "151": {
          "source": "      filenameForKey(key, function(hash) {",
          "coverage": 0
        },
        "152": {
          "source": "",
          "coverage": ""
        },
        "153": {
          "source": "        window.requestFileSystem(LocalFileSystem.PERSISTENT, 0, function gotFS(fileSystem) {",
          "coverage": 0
        },
        "154": {
          "source": "          fileSystem.root.getFile(hash, {}, function gotFileEntry(fileEntry) {",
          "coverage": 0
        },
        "155": {
          "source": "",
          "coverage": ""
        },
        "156": {
          "source": "            fileEntry.remove(function() {",
          "coverage": 0
        },
        "157": {
          "source": "              return callback({",
          "coverage": 0
        },
        "158": {
          "source": "                key: key,",
          "coverage": ""
        },
        "159": {
          "source": "                val: null",
          "coverage": ""
        },
        "160": {
          "source": "              });",
          "coverage": ""
        },
        "161": {
          "source": "            }, function() {",
          "coverage": ""
        },
        "162": {
          "source": "              fail('[remove] Failed to remove file');",
          "coverage": 0
        },
        "163": {
          "source": "            });",
          "coverage": ""
        },
        "164": {
          "source": "          }, function() {",
          "coverage": ""
        },
        "165": {
          "source": "            fail('[remove] Failed to getFile');",
          "coverage": 0
        },
        "166": {
          "source": "          });",
          "coverage": ""
        },
        "167": {
          "source": "        }, function() {",
          "coverage": ""
        },
        "168": {
          "source": "          fail('[remove] Failed to get fileSystem');",
          "coverage": 0
        },
        "169": {
          "source": "        });",
          "coverage": ""
        },
        "170": {
          "source": "      });",
          "coverage": ""
        },
        "171": {
          "source": "    },",
          "coverage": ""
        },
        "172": {
          "source": "",
          "coverage": ""
        },
        "173": {
          "source": "    nuke : function (callback){",
          "coverage": ""
        },
        "174": {
          "source": "      throw \"Currently not supported\";",
          "coverage": 0
        },
        "175": {
          "source": "    }",
          "coverage": ""
        },
        "176": {
          "source": "",
          "coverage": ""
        },
        "177": {
          "source": "",
          "coverage": ""
        },
        "178": {
          "source": "  };",
          "coverage": ""
        },
        "179": {
          "source": "}",
          "coverage": ""
        },
        "180": {
          "source": "",
          "coverage": ""
        },
        "181": {
          "source": "var addAdapter = function(app_props, hashFunc){",
          "coverage": 2
        },
        "182": {
          "source": "  Lawnchair.adapter('localFileStorage', fileStorageAdapter(app_props, hashFunc));",
          "coverage": 0
        },
        "183": {
          "source": "}",
          "coverage": ""
        },
        "184": {
          "source": "",
          "coverage": ""
        },
        "185": {
          "source": "module.exports = {",
          "coverage": 2
        },
        "186": {
          "source": "  addAdapter: addAdapter",
          "coverage": ""
        },
        "187": {
          "source": "}",
          "coverage": ""
        }
      }
    },
    {
      "filename": "modules/loadScript.js",
      "coverage": 6.25,
      "hits": 1,
      "misses": 15,
      "sloc": 16,
      "source": {
        "1": {
          "source": "module.exports = function (url, callback) {",
          "coverage": 2
        },
        "2": {
          "source": "  var script;",
          "coverage": 0
        },
        "3": {
          "source": "  var head = document.head || document.getElementsByTagName(\"head\")[0] || document.documentElement;",
          "coverage": 0
        },
        "4": {
          "source": "  script = document.createElement(\"script\");",
          "coverage": 0
        },
        "5": {
          "source": "  script.async = \"async\";",
          "coverage": 0
        },
        "6": {
          "source": "  script.src = url;",
          "coverage": 0
        },
        "7": {
          "source": "  script.type = \"text/javascript\";",
          "coverage": 0
        },
        "8": {
          "source": "  script.onload = script.onreadystatechange = function () {",
          "coverage": 0
        },
        "9": {
          "source": "    if (!script.readyState || /loaded|complete/.test(script.readyState)) {",
          "coverage": 0
        },
        "10": {
          "source": "      script.onload = script.onreadystatechange = null;",
          "coverage": 0
        },
        "11": {
          "source": "      if (head &amp;&amp; script.parentNode) {",
          "coverage": 0
        },
        "12": {
          "source": "        head.removeChild(script);",
          "coverage": 0
        },
        "13": {
          "source": "      }",
          "coverage": ""
        },
        "14": {
          "source": "      script = undefined;",
          "coverage": 0
        },
        "15": {
          "source": "      if (callback &amp;&amp; typeof callback === \"function\") {",
          "coverage": 0
        },
        "16": {
          "source": "        callback();",
          "coverage": 0
        },
        "17": {
          "source": "      }",
          "coverage": ""
        },
        "18": {
          "source": "    }",
          "coverage": ""
        },
        "19": {
          "source": "  };",
          "coverage": ""
        },
        "20": {
          "source": "  head.insertBefore(script, head.firstChild);",
          "coverage": 0
        },
        "21": {
          "source": "};",
          "coverage": ""
        }
      }
    },
    {
      "filename": "modules/logger.js",
      "coverage": 100,
      "hits": 4,
      "misses": 0,
      "sloc": 4,
      "source": {
        "1": {
          "source": "var console = require('console');",
          "coverage": 2
        },
        "2": {
          "source": "var log = require('loglevel');",
          "coverage": 2
        },
        "3": {
          "source": "",
          "coverage": ""
        },
        "4": {
          "source": "log.setLevel('info');",
          "coverage": 2
        },
        "5": {
          "source": "",
          "coverage": ""
        },
        "6": {
          "source": "/**",
          "coverage": ""
        },
        "7": {
          "source": " * APIs:",
          "coverage": ""
        },
        "8": {
          "source": " * see https://github.com/pimterry/loglevel.",
          "coverage": ""
        },
        "9": {
          "source": " * In short, you can use:",
          "coverage": ""
        },
        "10": {
          "source": " * log.setLevel(loglevel) - default to info",
          "coverage": ""
        },
        "11": {
          "source": " * log.enableAll() - enable all log messages",
          "coverage": ""
        },
        "12": {
          "source": " * log.disableAll() - disable all log messages",
          "coverage": ""
        },
        "13": {
          "source": " *",
          "coverage": ""
        },
        "14": {
          "source": " * log.trace(msg)",
          "coverage": ""
        },
        "15": {
          "source": " * log.debug(msg)",
          "coverage": ""
        },
        "16": {
          "source": " * log.info(msg)",
          "coverage": ""
        },
        "17": {
          "source": " * log.warn(msg)",
          "coverage": ""
        },
        "18": {
          "source": " * log.error(msg)",
          "coverage": ""
        },
        "19": {
          "source": " *",
          "coverage": ""
        },
        "20": {
          "source": " * Available levels: { \"TRACE\": 0, \"DEBUG\": 1, \"INFO\": 2, \"WARN\": 3, \"ERROR\": 4, \"SILENT\": 5}",
          "coverage": ""
        },
        "21": {
          "source": " * Use either string or integer value",
          "coverage": ""
        },
        "22": {
          "source": " */",
          "coverage": ""
        },
        "23": {
          "source": "module.exports = log;",
          "coverage": 2
        }
      }
    },
    {
      "filename": "modules/platformsMap.js",
      "coverage": 100,
      "hits": 1,
      "misses": 0,
      "sloc": 1,
      "source": {
        "1": {
          "source": "module.exports = [",
          "coverage": 2
        },
        "2": {
          "source": "  {",
          "coverage": ""
        },
        "3": {
          "source": "    \"destination\" :\"ipad\",",
          "coverage": ""
        },
        "4": {
          "source": "    \"test\": [\"iPad\"]",
          "coverage": ""
        },
        "5": {
          "source": "  },",
          "coverage": ""
        },
        "6": {
          "source": "  {",
          "coverage": ""
        },
        "7": {
          "source": "    \"destination\" :\"iphone\",",
          "coverage": ""
        },
        "8": {
          "source": "    \"test\": [\"iPhone\"]",
          "coverage": ""
        },
        "9": {
          "source": "  },",
          "coverage": ""
        },
        "10": {
          "source": "  {",
          "coverage": ""
        },
        "11": {
          "source": "    \"destination\" :\"android\",",
          "coverage": ""
        },
        "12": {
          "source": "    \"test\": [\"Android\"]",
          "coverage": ""
        },
        "13": {
          "source": "  },",
          "coverage": ""
        },
        "14": {
          "source": "  {",
          "coverage": ""
        },
        "15": {
          "source": "    \"destination\" :\"blackberry\",",
          "coverage": ""
        },
        "16": {
          "source": "    \"test\": [\"BlackBerry\", \"BB10\", \"RIM Tablet OS\"]//Blackberry 10 does not contain \"Blackberry\"",
          "coverage": ""
        },
        "17": {
          "source": "  },",
          "coverage": ""
        },
        "18": {
          "source": "  {",
          "coverage": ""
        },
        "19": {
          "source": "    \"destination\" :\"windowsphone\",",
          "coverage": ""
        },
        "20": {
          "source": "    \"test\": [\"Windows Phone 8\"]",
          "coverage": ""
        },
        "21": {
          "source": "  },",
          "coverage": ""
        },
        "22": {
          "source": "  {",
          "coverage": ""
        },
        "23": {
          "source": "    \"destination\" :\"windowsphone7\",",
          "coverage": ""
        },
        "24": {
          "source": "    \"test\": [\"Windows Phone OS 7\"]",
          "coverage": ""
        },
        "25": {
          "source": "  }",
          "coverage": ""
        },
        "26": {
          "source": "];",
          "coverage": ""
        }
      }
    },
    {
      "filename": "modules/queryMap.js",
      "coverage": 100,
      "hits": 12,
      "misses": 0,
      "sloc": 12,
      "source": {
        "1": {
          "source": "module.exports = function(url) {",
          "coverage": 2
        },
        "2": {
          "source": "  var qmap = {};",
          "coverage": 11
        },
        "3": {
          "source": "  var i = url.split(\"?\");",
          "coverage": 11
        },
        "4": {
          "source": "  if (i.length === 2) {",
          "coverage": 11
        },
        "5": {
          "source": "    var queryString = i[1];",
          "coverage": 11
        },
        "6": {
          "source": "    var pairs = queryString.split(\"&amp;\");",
          "coverage": 11
        },
        "7": {
          "source": "    qmap = {};",
          "coverage": 11
        },
        "8": {
          "source": "    for (var p = 0; p &lt; pairs.length; p++) {",
          "coverage": 11
        },
        "9": {
          "source": "      var q = pairs[p];",
          "coverage": 22
        },
        "10": {
          "source": "      var qp = q.split(\"=\");",
          "coverage": 22
        },
        "11": {
          "source": "      qmap[qp[0]] = qp[1];",
          "coverage": 22
        },
        "12": {
          "source": "    }",
          "coverage": ""
        },
        "13": {
          "source": "  }",
          "coverage": ""
        },
        "14": {
          "source": "  return qmap;",
          "coverage": 11
        },
        "15": {
          "source": "};",
          "coverage": ""
        }
      }
    },
    {
      "filename": "modules/sdkversion.js",
      "coverage": 75,
      "hits": 6,
      "misses": 2,
      "sloc": 8,
      "source": {
        "1": {
          "source": "var constants = require(\"./constants\");",
          "coverage": 2
        },
        "2": {
          "source": "",
          "coverage": ""
        },
        "3": {
          "source": "module.exports = function() {",
          "coverage": 2
        },
        "4": {
          "source": "  var type = \"FH_JS_SDK\";",
          "coverage": 2
        },
        "5": {
          "source": "  if (typeof window.fh_destination_code !== 'undefined') {",
          "coverage": 2
        },
        "6": {
          "source": "    type = \"FH_HYBRID_SDK\";",
          "coverage": 0
        },
        "7": {
          "source": "  } else if(window.PhoneGap || window.cordova) {",
          "coverage": 2
        },
        "8": {
          "source": "    type = \"FH_PHONEGAP_SDK\";",
          "coverage": 0
        },
        "9": {
          "source": "  }",
          "coverage": ""
        },
        "10": {
          "source": "  return type + \"/\" + constants.sdk_version;",
          "coverage": 2
        },
        "11": {
          "source": "};",
          "coverage": ""
        }
      }
    },
    {
      "filename": "modules/security/aes-keygen.js",
      "coverage": 80,
      "hits": 20,
      "misses": 5,
      "sloc": 25,
      "source": {
        "1": {
          "source": "var rsa = require(\"../../../libs/rsa\");",
          "coverage": 1
        },
        "2": {
          "source": "var SecureRandom = rsa.SecureRandom;",
          "coverage": 1
        },
        "3": {
          "source": "var byte2Hex = rsa.byte2Hex;",
          "coverage": 1
        },
        "4": {
          "source": "",
          "coverage": ""
        },
        "5": {
          "source": "var generateRandomKey = function(keysize){",
          "coverage": 1
        },
        "6": {
          "source": "  var r = new SecureRandom();",
          "coverage": 2
        },
        "7": {
          "source": "  var key = new Array(keysize);",
          "coverage": 2
        },
        "8": {
          "source": "  r.nextBytes(key);",
          "coverage": 2
        },
        "9": {
          "source": "  var result = \"\";",
          "coverage": 2
        },
        "10": {
          "source": "  for(var i=0;i&lt;key.length;i++){",
          "coverage": 2
        },
        "11": {
          "source": "    result += byte2Hex(key[i]);",
          "coverage": 32
        },
        "12": {
          "source": "  }",
          "coverage": ""
        },
        "13": {
          "source": "  return result;",
          "coverage": 2
        },
        "14": {
          "source": "};",
          "coverage": ""
        },
        "15": {
          "source": "",
          "coverage": ""
        },
        "16": {
          "source": "var aes_keygen = function(p, s, f){",
          "coverage": 1
        },
        "17": {
          "source": "  if (!p.params.keysize) {",
          "coverage": 1
        },
        "18": {
          "source": "    f('no_params_keysize', {}, p);",
          "coverage": 0
        },
        "19": {
          "source": "    return;",
          "coverage": 0
        },
        "20": {
          "source": "  }",
          "coverage": ""
        },
        "21": {
          "source": "  if (p.params.algorithm.toLowerCase() !== \"aes\") {",
          "coverage": 1
        },
        "22": {
          "source": "    f('keygen_bad_algorithm', {}, p);",
          "coverage": 0
        },
        "23": {
          "source": "    return;",
          "coverage": 0
        },
        "24": {
          "source": "  }",
          "coverage": ""
        },
        "25": {
          "source": "  var keysize = parseInt(p.params.keysize, 10);",
          "coverage": 1
        },
        "26": {
          "source": "  //keysize is in bit, need to convert to bytes to generate random key",
          "coverage": ""
        },
        "27": {
          "source": "  //but the legacy code has a bug, it doesn't do the convert, so if the keysize is less than 100, don't convert",
          "coverage": ""
        },
        "28": {
          "source": "  if(keysize &gt; 100){",
          "coverage": 1
        },
        "29": {
          "source": "    keysize = keysize/8;",
          "coverage": 1
        },
        "30": {
          "source": "  }",
          "coverage": ""
        },
        "31": {
          "source": "  if(typeof SecureRandom === \"undefined\"){",
          "coverage": 1
        },
        "32": {
          "source": "    return f(\"security library is not loaded.\");",
          "coverage": 0
        },
        "33": {
          "source": "  }",
          "coverage": ""
        },
        "34": {
          "source": "  return s({",
          "coverage": 1
        },
        "35": {
          "source": "    'algorithm': 'AES',",
          "coverage": ""
        },
        "36": {
          "source": "    'secretkey': generateRandomKey(keysize),",
          "coverage": ""
        },
        "37": {
          "source": "    'iv': generateRandomKey(keysize)",
          "coverage": ""
        },
        "38": {
          "source": "  });",
          "coverage": ""
        },
        "39": {
          "source": "}",
          "coverage": ""
        },
        "40": {
          "source": "",
          "coverage": ""
        },
        "41": {
          "source": "module.exports = aes_keygen;",
          "coverage": 1
        }
      }
    },
    {
      "filename": "modules/security/aes-node.js",
      "coverage": 69.23076923076923,
      "hits": 18,
      "misses": 8,
      "sloc": 26,
      "source": {
        "1": {
          "source": "var CryptoJS = require(\"../../../libs/generated/crypto\");",
          "coverage": 1
        },
        "2": {
          "source": "",
          "coverage": ""
        },
        "3": {
          "source": "var encrypt = function(p, s, f){",
          "coverage": 1
        },
        "4": {
          "source": "  var fields = ['key', 'plaintext', 'iv'];",
          "coverage": 1
        },
        "5": {
          "source": "  if(p.params.algorithm.toLowerCase() !== \"aes\"){",
          "coverage": 1
        },
        "6": {
          "source": "    return f('encrypt_bad_algorithm', {}, p);",
          "coverage": 0
        },
        "7": {
          "source": "  }",
          "coverage": ""
        },
        "8": {
          "source": "  for (var i = 0; i &lt; fields; i++) {",
          "coverage": 1
        },
        "9": {
          "source": "    var field = fields[i];",
          "coverage": 0
        },
        "10": {
          "source": "    if (!p.params[field]) {",
          "coverage": 0
        },
        "11": {
          "source": "      return f('no_params_' + field, {}, p);",
          "coverage": 0
        },
        "12": {
          "source": "    }",
          "coverage": ""
        },
        "13": {
          "source": "  }",
          "coverage": ""
        },
        "14": {
          "source": "  var encrypted = CryptoJS.AES.encrypt(p.params.plaintext, CryptoJS.enc.Hex.parse(p.params.key), {iv: CryptoJS.enc.Hex.parse(p.params.iv)});",
          "coverage": 1
        },
        "15": {
          "source": "  cipher_text = CryptoJS.enc.Hex.stringify(encrypted.ciphertext);",
          "coverage": 1
        },
        "16": {
          "source": "  return s({ciphertext: cipher_text});",
          "coverage": 1
        },
        "17": {
          "source": "}",
          "coverage": ""
        },
        "18": {
          "source": "",
          "coverage": ""
        },
        "19": {
          "source": "var decrypt = function(p, s, f){",
          "coverage": 1
        },
        "20": {
          "source": "  var fields = ['key', 'ciphertext', 'iv'];",
          "coverage": 1
        },
        "21": {
          "source": "  if(p.params.algorithm.toLowerCase() !== \"aes\"){",
          "coverage": 1
        },
        "22": {
          "source": "    return f('decrypt_bad_algorithm', {}, p);",
          "coverage": 0
        },
        "23": {
          "source": "  }",
          "coverage": ""
        },
        "24": {
          "source": "  for (var i = 0; i &lt; fields; i++) {",
          "coverage": 1
        },
        "25": {
          "source": "    var field = fields[i];",
          "coverage": 0
        },
        "26": {
          "source": "    if (!p.params[field]) {",
          "coverage": 0
        },
        "27": {
          "source": "      return f('no_params_' + field, {}, p);",
          "coverage": 0
        },
        "28": {
          "source": "    }",
          "coverage": ""
        },
        "29": {
          "source": "  }",
          "coverage": ""
        },
        "30": {
          "source": "  var data = CryptoJS.enc.Hex.parse(p.params.ciphertext);",
          "coverage": 1
        },
        "31": {
          "source": "  var encodeData = CryptoJS.enc.Base64.stringify(data);",
          "coverage": 1
        },
        "32": {
          "source": "  var decrypted = CryptoJS.AES.decrypt(encodeData, CryptoJS.enc.Hex.parse(p.params.key), {iv: CryptoJS.enc.Hex.parse(p.params.iv)});",
          "coverage": 1
        },
        "33": {
          "source": "  plain_text = decrypted.toString(CryptoJS.enc.Utf8);",
          "coverage": 1
        },
        "34": {
          "source": "  return s({plaintext:plain_text});",
          "coverage": 1
        },
        "35": {
          "source": "}",
          "coverage": ""
        },
        "36": {
          "source": "",
          "coverage": ""
        },
        "37": {
          "source": "module.exports = {",
          "coverage": 1
        },
        "38": {
          "source": "  encrypt: encrypt,",
          "coverage": ""
        },
        "39": {
          "source": "  decrypt: decrypt",
          "coverage": ""
        },
        "40": {
          "source": "}",
          "coverage": ""
        }
      }
    },
    {
      "filename": "modules/security/hash.js",
      "coverage": 82.35294117647058,
      "hits": 14,
      "misses": 3,
      "sloc": 17,
      "source": {
        "1": {
          "source": "var CryptoJS = require(\"../../../libs/generated/crypto\");",
          "coverage": 2
        },
        "2": {
          "source": "",
          "coverage": ""
        },
        "3": {
          "source": "",
          "coverage": ""
        },
        "4": {
          "source": "var hash = function(p, s, f){",
          "coverage": 2
        },
        "5": {
          "source": "  if (!p.params.text) {",
          "coverage": 4
        },
        "6": {
          "source": "    f('hash_no_text', {}, p);",
          "coverage": 0
        },
        "7": {
          "source": "    return;",
          "coverage": 0
        },
        "8": {
          "source": "  }",
          "coverage": ""
        },
        "9": {
          "source": "  var hashValue;",
          "coverage": 4
        },
        "10": {
          "source": "  if (p.params.algorithm.toLowerCase() === \"md5\") {",
          "coverage": 4
        },
        "11": {
          "source": "    hashValue = CryptoJS.MD5(p.params.text).toString(CryptoJS.enc.Hex);",
          "coverage": 1
        },
        "12": {
          "source": "  } else if(p.params.algorithm.toLowerCase() === \"sha1\"){",
          "coverage": 3
        },
        "13": {
          "source": "    hashValue = CryptoJS.SHA1(p.params.text).toString(CryptoJS.enc.Hex);",
          "coverage": 1
        },
        "14": {
          "source": "  } else if(p.params.algorithm.toLowerCase() === \"sha256\"){",
          "coverage": 2
        },
        "15": {
          "source": "    hashValue = CryptoJS.SHA256(p.params.text).toString(CryptoJS.enc.Hex);",
          "coverage": 1
        },
        "16": {
          "source": "  } else if(p.params.algorithm.toLowerCase() === \"sha512\"){",
          "coverage": 1
        },
        "17": {
          "source": "    hashValue = CryptoJS.SHA512(p.params.text).toString(CryptoJS.enc.Hex);",
          "coverage": 1
        },
        "18": {
          "source": "  } else {",
          "coverage": ""
        },
        "19": {
          "source": "    return f(\"hash_unsupported_algorithm: \" + p.params.algorithm);",
          "coverage": 0
        },
        "20": {
          "source": "  }",
          "coverage": ""
        },
        "21": {
          "source": "  return s({\"hashvalue\": hashValue});",
          "coverage": 4
        },
        "22": {
          "source": "}",
          "coverage": ""
        },
        "23": {
          "source": "",
          "coverage": ""
        },
        "24": {
          "source": "module.exports = hash;",
          "coverage": 2
        }
      }
    },
    {
      "filename": "modules/security/rsa-node.js",
      "coverage": 75,
      "hits": 12,
      "misses": 4,
      "sloc": 16,
      "source": {
        "1": {
          "source": "var rsa = require(\"../../../libs/rsa\");",
          "coverage": 1
        },
        "2": {
          "source": "var RSAKey = rsa.RSAKey;",
          "coverage": 1
        },
        "3": {
          "source": "",
          "coverage": ""
        },
        "4": {
          "source": "var encrypt = function(p, s, f){",
          "coverage": 1
        },
        "5": {
          "source": "  var fields = ['modulu', 'plaintext'];",
          "coverage": 1
        },
        "6": {
          "source": "  if(p.params.algorithm.toLowerCase() !== \"rsa\"){",
          "coverage": 1
        },
        "7": {
          "source": "    return f('encrypt_bad_algorithm', {}, p);",
          "coverage": 0
        },
        "8": {
          "source": "  }",
          "coverage": ""
        },
        "9": {
          "source": "  for (var i = 0; i &lt; fields; i++) {",
          "coverage": 1
        },
        "10": {
          "source": "    var field = fields[i];",
          "coverage": 0
        },
        "11": {
          "source": "    if (!p.params[field]) {",
          "coverage": 0
        },
        "12": {
          "source": "      return f('no_params_' + field, {}, p);",
          "coverage": 0
        },
        "13": {
          "source": "    }",
          "coverage": ""
        },
        "14": {
          "source": "  }",
          "coverage": ""
        },
        "15": {
          "source": "  var key = new RSAKey();",
          "coverage": 1
        },
        "16": {
          "source": "  key.setPublic(p.params.modulu, \"10001\");",
          "coverage": 1
        },
        "17": {
          "source": "  var ori_text = p.params.plaintext;",
          "coverage": 1
        },
        "18": {
          "source": "  cipher_text = key.encrypt(ori_text);",
          "coverage": 1
        },
        "19": {
          "source": "  return s({ciphertext:cipher_text});",
          "coverage": 1
        },
        "20": {
          "source": "}",
          "coverage": ""
        },
        "21": {
          "source": "",
          "coverage": ""
        },
        "22": {
          "source": "module.exports = {",
          "coverage": 1
        },
        "23": {
          "source": "  encrypt: encrypt",
          "coverage": ""
        },
        "24": {
          "source": "}",
          "coverage": ""
        }
      }
    },
    {
      "filename": "modules/sync-cli.js",
      "coverage": 95.77922077922078,
      "hits": 590,
      "misses": 26,
      "sloc": 616,
      "source": {
        "1": {
          "source": "var JSON = require(\"JSON\");",
          "coverage": 2
        },
        "2": {
          "source": "var actAPI = require(\"./api_act\");",
          "coverage": 2
        },
        "3": {
          "source": "var cloudAPI = require(\"./api_cloud\");",
          "coverage": 2
        },
        "4": {
          "source": "var CryptoJS = require(\"../../libs/generated/crypto\");",
          "coverage": 2
        },
        "5": {
          "source": "var Lawnchair = require('../../libs/generated/lawnchair');",
          "coverage": 2
        },
        "6": {
          "source": "",
          "coverage": ""
        },
        "7": {
          "source": "var self = {",
          "coverage": 2
        },
        "8": {
          "source": "",
          "coverage": ""
        },
        "9": {
          "source": "  // CONFIG",
          "coverage": ""
        },
        "10": {
          "source": "  defaults: {",
          "coverage": ""
        },
        "11": {
          "source": "    \"sync_frequency\": 10,",
          "coverage": ""
        },
        "12": {
          "source": "    // How often to synchronise data with the cloud in seconds.",
          "coverage": ""
        },
        "13": {
          "source": "    \"auto_sync_local_updates\": true,",
          "coverage": ""
        },
        "14": {
          "source": "    // Should local chages be syned to the cloud immediately, or should they wait for the next sync interval",
          "coverage": ""
        },
        "15": {
          "source": "    \"notify_client_storage_failed\": true,",
          "coverage": ""
        },
        "16": {
          "source": "    // Should a notification event be triggered when loading/saving to client storage fails",
          "coverage": ""
        },
        "17": {
          "source": "    \"notify_sync_started\": true,",
          "coverage": ""
        },
        "18": {
          "source": "    // Should a notification event be triggered when a sync cycle with the server has been started",
          "coverage": ""
        },
        "19": {
          "source": "    \"notify_sync_complete\": true,",
          "coverage": ""
        },
        "20": {
          "source": "    // Should a notification event be triggered when a sync cycle with the server has been completed",
          "coverage": ""
        },
        "21": {
          "source": "    \"notify_offline_update\": true,",
          "coverage": ""
        },
        "22": {
          "source": "    // Should a notification event be triggered when an attempt was made to update a record while offline",
          "coverage": ""
        },
        "23": {
          "source": "    \"notify_collision_detected\": true,",
          "coverage": ""
        },
        "24": {
          "source": "    // Should a notification event be triggered when an update failed due to data collision",
          "coverage": ""
        },
        "25": {
          "source": "    \"notify_remote_update_failed\": true,",
          "coverage": ""
        },
        "26": {
          "source": "    // Should a notification event be triggered when an update failed for a reason other than data collision",
          "coverage": ""
        },
        "27": {
          "source": "    \"notify_local_update_applied\": true,",
          "coverage": ""
        },
        "28": {
          "source": "    // Should a notification event be triggered when an update was applied to the local data store",
          "coverage": ""
        },
        "29": {
          "source": "    \"notify_remote_update_applied\": true,",
          "coverage": ""
        },
        "30": {
          "source": "    // Should a notification event be triggered when an update was applied to the remote data store",
          "coverage": ""
        },
        "31": {
          "source": "    \"notify_delta_received\": true,",
          "coverage": ""
        },
        "32": {
          "source": "    // Should a notification event be triggered when a delta was received from the remote data store for the dataset ",
          "coverage": ""
        },
        "33": {
          "source": "    \"notify_record_delta_received\": true,",
          "coverage": ""
        },
        "34": {
          "source": "    // Should a notification event be triggered when a delta was received from the remote data store for a record",
          "coverage": ""
        },
        "35": {
          "source": "    \"notify_sync_failed\": true,",
          "coverage": ""
        },
        "36": {
          "source": "    // Should a notification event be triggered when the sync loop failed to complete",
          "coverage": ""
        },
        "37": {
          "source": "    \"do_console_log\": false,",
          "coverage": ""
        },
        "38": {
          "source": "    // Should log statements be written to console.log",
          "coverage": ""
        },
        "39": {
          "source": "    \"crashed_count_wait\" : 10,",
          "coverage": ""
        },
        "40": {
          "source": "    // How many syncs should we check for updates on crashed in flight updates before we give up searching",
          "coverage": ""
        },
        "41": {
          "source": "    \"resend_crashed_updates\" : true,",
          "coverage": ""
        },
        "42": {
          "source": "    // If we have reached the crashed_count_wait limit, should we re-try sending the crashed in flight pending record",
          "coverage": ""
        },
        "43": {
          "source": "    \"sync_active\" : true,",
          "coverage": ""
        },
        "44": {
          "source": "    // Is the background sync with the cloud currently active",
          "coverage": ""
        },
        "45": {
          "source": "    \"storage_strategy\" : \"html5-filesystem\",",
          "coverage": ""
        },
        "46": {
          "source": "    // Storage strategy to use for Lawnchair - supported strategies are 'html5-filesystem' and 'dom'",
          "coverage": ""
        },
        "47": {
          "source": "    \"file_system_quota\" : 50 * 1024 * 1204,",
          "coverage": ""
        },
        "48": {
          "source": "    // Amount of space to request from the HTML5 filesystem API when running in browser",
          "coverage": ""
        },
        "49": {
          "source": "    \"has_custom_sync\" : null",
          "coverage": ""
        },
        "50": {
          "source": "    //If the app has custom cloud sync function, it should be set to true. If set to false, the default mbaas sync implementation will be used. When set to null or undefined, ",
          "coverage": ""
        },
        "51": {
          "source": "    //a check will be performed to determine which implementation to use",
          "coverage": ""
        },
        "52": {
          "source": "  },",
          "coverage": ""
        },
        "53": {
          "source": "",
          "coverage": ""
        },
        "54": {
          "source": "  notifications: {",
          "coverage": ""
        },
        "55": {
          "source": "    \"CLIENT_STORAGE_FAILED\": \"client_storage_failed\",",
          "coverage": ""
        },
        "56": {
          "source": "    // loading/saving to client storage failed",
          "coverage": ""
        },
        "57": {
          "source": "    \"SYNC_STARTED\": \"sync_started\",",
          "coverage": ""
        },
        "58": {
          "source": "    // A sync cycle with the server has been started",
          "coverage": ""
        },
        "59": {
          "source": "    \"SYNC_COMPLETE\": \"sync_complete\",",
          "coverage": ""
        },
        "60": {
          "source": "    // A sync cycle with the server has been completed",
          "coverage": ""
        },
        "61": {
          "source": "    \"OFFLINE_UPDATE\": \"offline_update\",",
          "coverage": ""
        },
        "62": {
          "source": "    // An attempt was made to update a record while offline",
          "coverage": ""
        },
        "63": {
          "source": "    \"COLLISION_DETECTED\": \"collision_detected\",",
          "coverage": ""
        },
        "64": {
          "source": "    //Update Failed due to data collision",
          "coverage": ""
        },
        "65": {
          "source": "    \"REMOTE_UPDATE_FAILED\": \"remote_update_failed\",",
          "coverage": ""
        },
        "66": {
          "source": "    // Update Failed for a reason other than data collision",
          "coverage": ""
        },
        "67": {
          "source": "    \"REMOTE_UPDATE_APPLIED\": \"remote_update_applied\",",
          "coverage": ""
        },
        "68": {
          "source": "    // An update was applied to the remote data store",
          "coverage": ""
        },
        "69": {
          "source": "    \"LOCAL_UPDATE_APPLIED\": \"local_update_applied\",",
          "coverage": ""
        },
        "70": {
          "source": "    // An update was applied to the local data store",
          "coverage": ""
        },
        "71": {
          "source": "    \"DELTA_RECEIVED\": \"delta_received\",",
          "coverage": ""
        },
        "72": {
          "source": "    // A delta was received from the remote data store for the dataset ",
          "coverage": ""
        },
        "73": {
          "source": "    \"RECORD_DELTA_RECEIVED\": \"record_delta_received\",",
          "coverage": ""
        },
        "74": {
          "source": "    // A delta was received from the remote data store for the record ",
          "coverage": ""
        },
        "75": {
          "source": "    \"SYNC_FAILED\": \"sync_failed\"",
          "coverage": ""
        },
        "76": {
          "source": "    // Sync loop failed to complete",
          "coverage": ""
        },
        "77": {
          "source": "  },",
          "coverage": ""
        },
        "78": {
          "source": "",
          "coverage": ""
        },
        "79": {
          "source": "  datasets: {},",
          "coverage": ""
        },
        "80": {
          "source": "",
          "coverage": ""
        },
        "81": {
          "source": "  // Initialise config to default values;",
          "coverage": ""
        },
        "82": {
          "source": "  config: undefined,",
          "coverage": ""
        },
        "83": {
          "source": "",
          "coverage": ""
        },
        "84": {
          "source": "  notify_callback: undefined,",
          "coverage": ""
        },
        "85": {
          "source": "",
          "coverage": ""
        },
        "86": {
          "source": "  init_is_called: false,",
          "coverage": ""
        },
        "87": {
          "source": "",
          "coverage": ""
        },
        "88": {
          "source": "  // PUBLIC FUNCTION IMPLEMENTATIONS",
          "coverage": ""
        },
        "89": {
          "source": "  init: function(options) {",
          "coverage": ""
        },
        "90": {
          "source": "    self.consoleLog('sync - init called');",
          "coverage": 2
        },
        "91": {
          "source": "",
          "coverage": ""
        },
        "92": {
          "source": "    self.config = JSON.parse(JSON.stringify(self.defaults));",
          "coverage": 2
        },
        "93": {
          "source": "    for (var i in options) {",
          "coverage": 2
        },
        "94": {
          "source": "      self.config[i] = options[i];",
          "coverage": 10
        },
        "95": {
          "source": "    }",
          "coverage": ""
        },
        "96": {
          "source": "",
          "coverage": ""
        },
        "97": {
          "source": "    //prevent multiple monitors from created if init is called multiple times",
          "coverage": ""
        },
        "98": {
          "source": "    if(!self.init_is_called){",
          "coverage": 2
        },
        "99": {
          "source": "      self.init_is_called = true;",
          "coverage": 1
        },
        "100": {
          "source": "      self.datasetMonitor();",
          "coverage": 1
        },
        "101": {
          "source": "    }",
          "coverage": ""
        },
        "102": {
          "source": "  },",
          "coverage": ""
        },
        "103": {
          "source": "",
          "coverage": ""
        },
        "104": {
          "source": "  notify: function(callback) {",
          "coverage": ""
        },
        "105": {
          "source": "    self.notify_callback = callback;",
          "coverage": 40
        },
        "106": {
          "source": "  },",
          "coverage": ""
        },
        "107": {
          "source": "",
          "coverage": ""
        },
        "108": {
          "source": "  manage: function(dataset_id, options, query_params, meta_data, cb) {",
          "coverage": ""
        },
        "109": {
          "source": "    self.consoleLog('manage - START');",
          "coverage": 22
        },
        "110": {
          "source": "",
          "coverage": ""
        },
        "111": {
          "source": "    var options = options || {};",
          "coverage": 22
        },
        "112": {
          "source": "",
          "coverage": ""
        },
        "113": {
          "source": "    var doManage = function(dataset) {",
          "coverage": 22
        },
        "114": {
          "source": "      self.consoleLog('doManage dataset :: initialised = ' + dataset.initialised + \" :: \" + dataset_id + ' :: ' + JSON.stringify(options));",
          "coverage": 22
        },
        "115": {
          "source": "",
          "coverage": ""
        },
        "116": {
          "source": "      var datasetConfig = self.setOptions(options);",
          "coverage": 22
        },
        "117": {
          "source": "",
          "coverage": ""
        },
        "118": {
          "source": "      dataset.query_params = query_params || dataset.query_params || {};",
          "coverage": 22
        },
        "119": {
          "source": "      dataset.meta_data = meta_data || dataset.meta_data || {};",
          "coverage": 22
        },
        "120": {
          "source": "      dataset.config = datasetConfig;",
          "coverage": 22
        },
        "121": {
          "source": "      dataset.syncRunning = false;",
          "coverage": 22
        },
        "122": {
          "source": "      dataset.syncPending = true;",
          "coverage": 22
        },
        "123": {
          "source": "      dataset.initialised = true;",
          "coverage": 22
        },
        "124": {
          "source": "      if(typeof dataset.meta === \"undefined\"){",
          "coverage": 22
        },
        "125": {
          "source": "        dataset.meta = {};",
          "coverage": 0
        },
        "126": {
          "source": "      }",
          "coverage": ""
        },
        "127": {
          "source": "",
          "coverage": ""
        },
        "128": {
          "source": "      self.saveDataSet(dataset_id, function() {",
          "coverage": 22
        },
        "129": {
          "source": "",
          "coverage": ""
        },
        "130": {
          "source": "        if( cb ) {",
          "coverage": 22
        },
        "131": {
          "source": "          cb();",
          "coverage": 22
        },
        "132": {
          "source": "        }",
          "coverage": ""
        },
        "133": {
          "source": "      });",
          "coverage": ""
        },
        "134": {
          "source": "    };",
          "coverage": ""
        },
        "135": {
          "source": "",
          "coverage": ""
        },
        "136": {
          "source": "    // Check if the dataset is already loaded",
          "coverage": ""
        },
        "137": {
          "source": "    self.getDataSet(dataset_id, function(dataset) {",
          "coverage": 22
        },
        "138": {
          "source": "      self.consoleLog('manage - dataset already loaded');",
          "coverage": 20
        },
        "139": {
          "source": "      doManage(dataset);",
          "coverage": 20
        },
        "140": {
          "source": "    }, function(err) {",
          "coverage": ""
        },
        "141": {
          "source": "      self.consoleLog('manage - dataset not loaded... trying to load');",
          "coverage": 2
        },
        "142": {
          "source": "",
          "coverage": ""
        },
        "143": {
          "source": "      // Not already loaded, try to load from local storage",
          "coverage": ""
        },
        "144": {
          "source": "      self.loadDataSet(dataset_id, function(dataset) {",
          "coverage": 2
        },
        "145": {
          "source": "          self.consoleLog('manage - dataset loaded from local storage');",
          "coverage": 0
        },
        "146": {
          "source": "",
          "coverage": ""
        },
        "147": {
          "source": "          // Loading from local storage worked",
          "coverage": ""
        },
        "148": {
          "source": "",
          "coverage": ""
        },
        "149": {
          "source": "          // Fire the local update event to indicate that dataset was loaded from local storage",
          "coverage": ""
        },
        "150": {
          "source": "          self.doNotify(dataset_id, null, self.notifications.LOCAL_UPDATE_APPLIED, \"load\");",
          "coverage": 0
        },
        "151": {
          "source": "",
          "coverage": ""
        },
        "152": {
          "source": "          // Put the dataet under the management of the sync service",
          "coverage": ""
        },
        "153": {
          "source": "          doManage(dataset);",
          "coverage": 0
        },
        "154": {
          "source": "        },",
          "coverage": ""
        },
        "155": {
          "source": "        function(err) {",
          "coverage": ""
        },
        "156": {
          "source": "          // No dataset in memory or local storage - create a new one and put it in memory",
          "coverage": ""
        },
        "157": {
          "source": "          self.consoleLog('manage - Creating new dataset for id ' + dataset_id);",
          "coverage": 2
        },
        "158": {
          "source": "          var dataset = {};",
          "coverage": 2
        },
        "159": {
          "source": "          dataset.data = {};",
          "coverage": 2
        },
        "160": {
          "source": "          dataset.pending = {};",
          "coverage": 2
        },
        "161": {
          "source": "          dataset.meta = {};",
          "coverage": 2
        },
        "162": {
          "source": "          self.datasets[dataset_id] = dataset;",
          "coverage": 2
        },
        "163": {
          "source": "          doManage(dataset);",
          "coverage": 2
        },
        "164": {
          "source": "        });",
          "coverage": ""
        },
        "165": {
          "source": "    });",
          "coverage": ""
        },
        "166": {
          "source": "  },",
          "coverage": ""
        },
        "167": {
          "source": "",
          "coverage": ""
        },
        "168": {
          "source": "  setOptions: function(options) {",
          "coverage": ""
        },
        "169": {
          "source": "    // Make sure config is initialised",
          "coverage": ""
        },
        "170": {
          "source": "    if( ! self.config ) {",
          "coverage": 63
        },
        "171": {
          "source": "      self.config = JSON.parse(JSON.stringify(self.defaults));",
          "coverage": 0
        },
        "172": {
          "source": "    }",
          "coverage": ""
        },
        "173": {
          "source": "",
          "coverage": ""
        },
        "174": {
          "source": "    var datasetConfig = JSON.parse(JSON.stringify(self.config));",
          "coverage": 63
        },
        "175": {
          "source": "    var optionsIn = JSON.parse(JSON.stringify(options));",
          "coverage": 63
        },
        "176": {
          "source": "    for (var k in optionsIn) {",
          "coverage": 63
        },
        "177": {
          "source": "      datasetConfig[k] = optionsIn[k];",
          "coverage": 68
        },
        "178": {
          "source": "    }",
          "coverage": ""
        },
        "179": {
          "source": "",
          "coverage": ""
        },
        "180": {
          "source": "    return datasetConfig;",
          "coverage": 63
        },
        "181": {
          "source": "  },",
          "coverage": ""
        },
        "182": {
          "source": "",
          "coverage": ""
        },
        "183": {
          "source": "  list: function(dataset_id, success, failure) {",
          "coverage": ""
        },
        "184": {
          "source": "    self.getDataSet(dataset_id, function(dataset) {",
          "coverage": 4
        },
        "185": {
          "source": "      if (dataset &amp;&amp; dataset.data) {",
          "coverage": 1
        },
        "186": {
          "source": "        // Return a copy of the dataset so updates will not automatically make it back into the dataset",
          "coverage": ""
        },
        "187": {
          "source": "        var res = JSON.parse(JSON.stringify(dataset.data));",
          "coverage": 1
        },
        "188": {
          "source": "        success(res);",
          "coverage": 1
        },
        "189": {
          "source": "      } else {",
          "coverage": ""
        },
        "190": {
          "source": "        if(failure) failure('no_data');",
          "coverage": 0
        },
        "191": {
          "source": "      }",
          "coverage": ""
        },
        "192": {
          "source": "    }, function(code, msg) {",
          "coverage": ""
        },
        "193": {
          "source": "      if(failure) failure(code, msg);",
          "coverage": 5
        },
        "194": {
          "source": "    });",
          "coverage": ""
        },
        "195": {
          "source": "  },",
          "coverage": ""
        },
        "196": {
          "source": "",
          "coverage": ""
        },
        "197": {
          "source": "  create: function(dataset_id, data, success, failure) {",
          "coverage": ""
        },
        "198": {
          "source": "    if(data == null){",
          "coverage": 12
        },
        "199": {
          "source": "      if(failure){",
          "coverage": 2
        },
        "200": {
          "source": "        return failure(\"null_data\");",
          "coverage": 1
        },
        "201": {
          "source": "      }",
          "coverage": ""
        },
        "202": {
          "source": "    }",
          "coverage": ""
        },
        "203": {
          "source": "    self.addPendingObj(dataset_id, null, data, \"create\", success, failure);",
          "coverage": 11
        },
        "204": {
          "source": "  },",
          "coverage": ""
        },
        "205": {
          "source": "",
          "coverage": ""
        },
        "206": {
          "source": "  read: function(dataset_id, uid, success, failure) {",
          "coverage": ""
        },
        "207": {
          "source": "    self.getDataSet(dataset_id, function(dataset) {",
          "coverage": 20
        },
        "208": {
          "source": "      var rec = dataset.data[uid];",
          "coverage": 14
        },
        "209": {
          "source": "      if (!rec) {",
          "coverage": 14
        },
        "210": {
          "source": "        failure(\"unknown_uid\");",
          "coverage": 1
        },
        "211": {
          "source": "      } else {",
          "coverage": ""
        },
        "212": {
          "source": "        // Return a copy of the record so updates will not automatically make it back into the dataset",
          "coverage": ""
        },
        "213": {
          "source": "        var res = JSON.parse(JSON.stringify(rec));",
          "coverage": 13
        },
        "214": {
          "source": "        success(res);",
          "coverage": 13
        },
        "215": {
          "source": "      }",
          "coverage": ""
        },
        "216": {
          "source": "    }, function(code, msg) {",
          "coverage": ""
        },
        "217": {
          "source": "      if(failure) failure(code, msg);",
          "coverage": 11
        },
        "218": {
          "source": "    });",
          "coverage": ""
        },
        "219": {
          "source": "  },",
          "coverage": ""
        },
        "220": {
          "source": "",
          "coverage": ""
        },
        "221": {
          "source": "  update: function(dataset_id, uid, data, success, failure) {",
          "coverage": ""
        },
        "222": {
          "source": "    self.addPendingObj(dataset_id, uid, data, \"update\", success, failure);",
          "coverage": 9
        },
        "223": {
          "source": "  },",
          "coverage": ""
        },
        "224": {
          "source": "",
          "coverage": ""
        },
        "225": {
          "source": "  'delete': function(dataset_id, uid, success, failure) {",
          "coverage": ""
        },
        "226": {
          "source": "    self.addPendingObj(dataset_id, uid, null, \"delete\", success, failure);",
          "coverage": 7
        },
        "227": {
          "source": "  },",
          "coverage": ""
        },
        "228": {
          "source": "",
          "coverage": ""
        },
        "229": {
          "source": "  getPending: function(dataset_id, cb) {",
          "coverage": ""
        },
        "230": {
          "source": "    self.getDataSet(dataset_id, function(dataset) {",
          "coverage": 1
        },
        "231": {
          "source": "      var res;",
          "coverage": 1
        },
        "232": {
          "source": "      if( dataset ) {",
          "coverage": 1
        },
        "233": {
          "source": "        res = dataset.pending;",
          "coverage": 1
        },
        "234": {
          "source": "      }",
          "coverage": ""
        },
        "235": {
          "source": "      cb(res);",
          "coverage": 1
        },
        "236": {
          "source": "    }, function(err, datatset_id) {",
          "coverage": ""
        },
        "237": {
          "source": "        self.consoleLog(err);",
          "coverage": 0
        },
        "238": {
          "source": "    });",
          "coverage": ""
        },
        "239": {
          "source": "  },",
          "coverage": ""
        },
        "240": {
          "source": "",
          "coverage": ""
        },
        "241": {
          "source": "  clearPending: function(dataset_id, cb) {",
          "coverage": ""
        },
        "242": {
          "source": "    self.getDataSet(dataset_id, function(dataset) {",
          "coverage": 19
        },
        "243": {
          "source": "      dataset.pending = {};",
          "coverage": 19
        },
        "244": {
          "source": "      self.saveDataSet(dataset_id, cb);",
          "coverage": 19
        },
        "245": {
          "source": "    });",
          "coverage": ""
        },
        "246": {
          "source": "  },",
          "coverage": ""
        },
        "247": {
          "source": "",
          "coverage": ""
        },
        "248": {
          "source": "  listCollisions : function(dataset_id, success, failure){",
          "coverage": ""
        },
        "249": {
          "source": "    self.getDataSet(dataset_id, function(dataset) {",
          "coverage": 2
        },
        "250": {
          "source": "      self.doCloudCall({",
          "coverage": 2
        },
        "251": {
          "source": "        \"dataset_id\": dataset_id,",
          "coverage": ""
        },
        "252": {
          "source": "        \"req\": {",
          "coverage": ""
        },
        "253": {
          "source": "          \"fn\": \"listCollisions\",",
          "coverage": ""
        },
        "254": {
          "source": "          \"meta_data\" : dataset.meta_data",
          "coverage": ""
        },
        "255": {
          "source": "        }",
          "coverage": ""
        },
        "256": {
          "source": "      }, success, failure);",
          "coverage": ""
        },
        "257": {
          "source": "    }, failure);",
          "coverage": ""
        },
        "258": {
          "source": "  },",
          "coverage": ""
        },
        "259": {
          "source": "",
          "coverage": ""
        },
        "260": {
          "source": "  removeCollision: function(dataset_id, colissionHash, success, failure) {",
          "coverage": ""
        },
        "261": {
          "source": "    self.getDataSet(dataset_id, function(dataset) {",
          "coverage": 2
        },
        "262": {
          "source": "      self.doCloudCall({",
          "coverage": 2
        },
        "263": {
          "source": "        \"dataset_id\" : dataset_id,",
          "coverage": ""
        },
        "264": {
          "source": "        \"req\": {",
          "coverage": ""
        },
        "265": {
          "source": "          \"fn\": \"removeCollision\",",
          "coverage": ""
        },
        "266": {
          "source": "          \"hash\": colissionHash,",
          "coverage": ""
        },
        "267": {
          "source": "          meta_data: dataset.meta_data",
          "coverage": ""
        },
        "268": {
          "source": "        }",
          "coverage": ""
        },
        "269": {
          "source": "      }, success, failure);",
          "coverage": ""
        },
        "270": {
          "source": "    });",
          "coverage": ""
        },
        "271": {
          "source": "  },",
          "coverage": ""
        },
        "272": {
          "source": "",
          "coverage": ""
        },
        "273": {
          "source": "",
          "coverage": ""
        },
        "274": {
          "source": "  // PRIVATE FUNCTIONS",
          "coverage": ""
        },
        "275": {
          "source": "  isOnline: function(callback) {",
          "coverage": ""
        },
        "276": {
          "source": "    var online = true;",
          "coverage": 56
        },
        "277": {
          "source": "",
          "coverage": ""
        },
        "278": {
          "source": "    // first, check if navigator.online is available",
          "coverage": ""
        },
        "279": {
          "source": "    if(typeof navigator.onLine !== \"undefined\"){",
          "coverage": 56
        },
        "280": {
          "source": "      online = navigator.onLine;",
          "coverage": 56
        },
        "281": {
          "source": "    }",
          "coverage": ""
        },
        "282": {
          "source": "",
          "coverage": ""
        },
        "283": {
          "source": "    // second, check if Phonegap is available and has online info",
          "coverage": ""
        },
        "284": {
          "source": "    if(online){",
          "coverage": 56
        },
        "285": {
          "source": "      //use phonegap to determin if the network is available",
          "coverage": ""
        },
        "286": {
          "source": "      if(typeof navigator.network !== \"undefined\" &amp;&amp; typeof navigator.network.connection !== \"undefined\"){",
          "coverage": 56
        },
        "287": {
          "source": "        var networkType = navigator.network.connection.type;",
          "coverage": 56
        },
        "288": {
          "source": "        if(networkType === \"none\" || networkType === null) {",
          "coverage": 56
        },
        "289": {
          "source": "          online = false;",
          "coverage": 0
        },
        "290": {
          "source": "        }",
          "coverage": ""
        },
        "291": {
          "source": "      }",
          "coverage": ""
        },
        "292": {
          "source": "    }",
          "coverage": ""
        },
        "293": {
          "source": "",
          "coverage": ""
        },
        "294": {
          "source": "    return callback(online);",
          "coverage": 56
        },
        "295": {
          "source": "  },",
          "coverage": ""
        },
        "296": {
          "source": "",
          "coverage": ""
        },
        "297": {
          "source": "  doNotify: function(dataset_id, uid, code, message) {",
          "coverage": ""
        },
        "298": {
          "source": "",
          "coverage": ""
        },
        "299": {
          "source": "    if( self.notify_callback ) {",
          "coverage": 104
        },
        "300": {
          "source": "      if ( self.config['notify_' + code] ) {",
          "coverage": 10
        },
        "301": {
          "source": "        var notification = {",
          "coverage": 10
        },
        "302": {
          "source": "          \"dataset_id\" : dataset_id,",
          "coverage": ""
        },
        "303": {
          "source": "          \"uid\" : uid,",
          "coverage": ""
        },
        "304": {
          "source": "          \"code\" : code,",
          "coverage": ""
        },
        "305": {
          "source": "          \"message\" : message",
          "coverage": ""
        },
        "306": {
          "source": "        };",
          "coverage": ""
        },
        "307": {
          "source": "        // make sure user doesn't block",
          "coverage": ""
        },
        "308": {
          "source": "        setTimeout(function () {",
          "coverage": 10
        },
        "309": {
          "source": "          self.notify_callback(notification);",
          "coverage": 10
        },
        "310": {
          "source": "        }, 0);",
          "coverage": ""
        },
        "311": {
          "source": "      }",
          "coverage": ""
        },
        "312": {
          "source": "    }",
          "coverage": ""
        },
        "313": {
          "source": "  },",
          "coverage": ""
        },
        "314": {
          "source": "",
          "coverage": ""
        },
        "315": {
          "source": "  getDataSet: function(dataset_id, success, failure) {",
          "coverage": ""
        },
        "316": {
          "source": "    var dataset = self.datasets[dataset_id];",
          "coverage": 337
        },
        "317": {
          "source": "",
          "coverage": ""
        },
        "318": {
          "source": "    if (dataset) {",
          "coverage": 337
        },
        "319": {
          "source": "      success(dataset);",
          "coverage": 325
        },
        "320": {
          "source": "    } else {",
          "coverage": ""
        },
        "321": {
          "source": "      if(failure){",
          "coverage": 12
        },
        "322": {
          "source": "        failure('unknown_dataset ' + dataset_id, dataset_id);",
          "coverage": 12
        },
        "323": {
          "source": "      }",
          "coverage": ""
        },
        "324": {
          "source": "    }",
          "coverage": ""
        },
        "325": {
          "source": "  },",
          "coverage": ""
        },
        "326": {
          "source": "",
          "coverage": ""
        },
        "327": {
          "source": "  getQueryParams: function(dataset_id, success, failure) {",
          "coverage": ""
        },
        "328": {
          "source": "    var dataset = self.datasets[dataset_id];",
          "coverage": 3
        },
        "329": {
          "source": "",
          "coverage": ""
        },
        "330": {
          "source": "    if (dataset) {",
          "coverage": 3
        },
        "331": {
          "source": "      success(dataset.query_params);",
          "coverage": 1
        },
        "332": {
          "source": "    } else {",
          "coverage": ""
        },
        "333": {
          "source": "      if(failure){",
          "coverage": 2
        },
        "334": {
          "source": "        failure('unknown_dataset ' + dataset_id, dataset_id);",
          "coverage": 1
        },
        "335": {
          "source": "      }",
          "coverage": ""
        },
        "336": {
          "source": "    }",
          "coverage": ""
        },
        "337": {
          "source": "  },",
          "coverage": ""
        },
        "338": {
          "source": "",
          "coverage": ""
        },
        "339": {
          "source": "  setQueryParams: function(dataset_id, queryParams, success, failure) {",
          "coverage": ""
        },
        "340": {
          "source": "    var dataset = self.datasets[dataset_id];",
          "coverage": 3
        },
        "341": {
          "source": "",
          "coverage": ""
        },
        "342": {
          "source": "    if (dataset) {",
          "coverage": 3
        },
        "343": {
          "source": "      dataset.query_params = queryParams;",
          "coverage": 1
        },
        "344": {
          "source": "      self.saveDataSet(dataset_id);",
          "coverage": 1
        },
        "345": {
          "source": "      if( success ) {",
          "coverage": 1
        },
        "346": {
          "source": "        success(dataset.query_params);",
          "coverage": 1
        },
        "347": {
          "source": "      }",
          "coverage": ""
        },
        "348": {
          "source": "    } else {",
          "coverage": ""
        },
        "349": {
          "source": "      if ( failure ) {",
          "coverage": 2
        },
        "350": {
          "source": "        failure('unknown_dataset ' + dataset_id, dataset_id);",
          "coverage": 1
        },
        "351": {
          "source": "      }",
          "coverage": ""
        },
        "352": {
          "source": "    }",
          "coverage": ""
        },
        "353": {
          "source": "  },",
          "coverage": ""
        },
        "354": {
          "source": "",
          "coverage": ""
        },
        "355": {
          "source": "  getMetaData: function(dataset_id, success, failure) {",
          "coverage": ""
        },
        "356": {
          "source": "    var dataset = self.datasets[dataset_id];",
          "coverage": 3
        },
        "357": {
          "source": "",
          "coverage": ""
        },
        "358": {
          "source": "    if (dataset) {",
          "coverage": 3
        },
        "359": {
          "source": "      success(dataset.meta_data);",
          "coverage": 1
        },
        "360": {
          "source": "    } else {",
          "coverage": ""
        },
        "361": {
          "source": "      if(failure){",
          "coverage": 2
        },
        "362": {
          "source": "        failure('unknown_dataset ' + dataset_id, dataset_id);",
          "coverage": 1
        },
        "363": {
          "source": "      }",
          "coverage": ""
        },
        "364": {
          "source": "    }",
          "coverage": ""
        },
        "365": {
          "source": "  },",
          "coverage": ""
        },
        "366": {
          "source": "",
          "coverage": ""
        },
        "367": {
          "source": "  setMetaData: function(dataset_id, metaData, success, failure) {",
          "coverage": ""
        },
        "368": {
          "source": "    var dataset = self.datasets[dataset_id];",
          "coverage": 3
        },
        "369": {
          "source": "",
          "coverage": ""
        },
        "370": {
          "source": "    if (dataset) {",
          "coverage": 3
        },
        "371": {
          "source": "      dataset.meta_data = metaData;",
          "coverage": 1
        },
        "372": {
          "source": "      self.saveDataSet(dataset_id);",
          "coverage": 1
        },
        "373": {
          "source": "      if( success ) {",
          "coverage": 1
        },
        "374": {
          "source": "        success(dataset.meta_data);",
          "coverage": 1
        },
        "375": {
          "source": "      }",
          "coverage": ""
        },
        "376": {
          "source": "    } else {",
          "coverage": ""
        },
        "377": {
          "source": "      if( failure ) {",
          "coverage": 2
        },
        "378": {
          "source": "        failure('unknown_dataset ' + dataset_id, dataset_id);",
          "coverage": 1
        },
        "379": {
          "source": "      }",
          "coverage": ""
        },
        "380": {
          "source": "    }",
          "coverage": ""
        },
        "381": {
          "source": "  },",
          "coverage": ""
        },
        "382": {
          "source": "",
          "coverage": ""
        },
        "383": {
          "source": "  getConfig: function(dataset_id, success, failure) {",
          "coverage": ""
        },
        "384": {
          "source": "    var dataset = self.datasets[dataset_id];",
          "coverage": 3
        },
        "385": {
          "source": "",
          "coverage": ""
        },
        "386": {
          "source": "    if (dataset) {",
          "coverage": 3
        },
        "387": {
          "source": "      success(dataset.config);",
          "coverage": 1
        },
        "388": {
          "source": "    } else {",
          "coverage": ""
        },
        "389": {
          "source": "      if(failure){",
          "coverage": 2
        },
        "390": {
          "source": "        failure('unknown_dataset ' + dataset_id, dataset_id);",
          "coverage": 1
        },
        "391": {
          "source": "      }",
          "coverage": ""
        },
        "392": {
          "source": "    }",
          "coverage": ""
        },
        "393": {
          "source": "  },",
          "coverage": ""
        },
        "394": {
          "source": "",
          "coverage": ""
        },
        "395": {
          "source": "  setConfig: function(dataset_id, config, success, failure) {",
          "coverage": ""
        },
        "396": {
          "source": "    var dataset = self.datasets[dataset_id];",
          "coverage": 43
        },
        "397": {
          "source": "",
          "coverage": ""
        },
        "398": {
          "source": "    if (dataset) {",
          "coverage": 43
        },
        "399": {
          "source": "      var fullConfig = self.setOptions(config);",
          "coverage": 41
        },
        "400": {
          "source": "      dataset.config = fullConfig;",
          "coverage": 41
        },
        "401": {
          "source": "      self.saveDataSet(dataset_id);",
          "coverage": 41
        },
        "402": {
          "source": "      if( success ) {",
          "coverage": 41
        },
        "403": {
          "source": "        success(dataset.config);",
          "coverage": 41
        },
        "404": {
          "source": "      }",
          "coverage": ""
        },
        "405": {
          "source": "    } else {",
          "coverage": ""
        },
        "406": {
          "source": "      if( failure ) {",
          "coverage": 2
        },
        "407": {
          "source": "        failure('unknown_dataset ' + dataset_id, dataset_id);",
          "coverage": 1
        },
        "408": {
          "source": "      }",
          "coverage": ""
        },
        "409": {
          "source": "    }",
          "coverage": ""
        },
        "410": {
          "source": "  },",
          "coverage": ""
        },
        "411": {
          "source": "",
          "coverage": ""
        },
        "412": {
          "source": "  stopSync: function(dataset_id, success, failure) {",
          "coverage": ""
        },
        "413": {
          "source": "    self.setConfig(dataset_id, {\"sync_active\" : false}, function() {",
          "coverage": 35
        },
        "414": {
          "source": "      if( success ) {",
          "coverage": 35
        },
        "415": {
          "source": "        success();",
          "coverage": 34
        },
        "416": {
          "source": "      }",
          "coverage": ""
        },
        "417": {
          "source": "    }, failure);",
          "coverage": ""
        },
        "418": {
          "source": "  },",
          "coverage": ""
        },
        "419": {
          "source": "",
          "coverage": ""
        },
        "420": {
          "source": "  startSync: function(dataset_id, success, failure) {",
          "coverage": ""
        },
        "421": {
          "source": "    self.setConfig(dataset_id, {\"sync_active\" : true}, function() {",
          "coverage": 3
        },
        "422": {
          "source": "      if( success ) {",
          "coverage": 3
        },
        "423": {
          "source": "        success();",
          "coverage": 3
        },
        "424": {
          "source": "      }",
          "coverage": ""
        },
        "425": {
          "source": "    }, failure);",
          "coverage": ""
        },
        "426": {
          "source": "  },",
          "coverage": ""
        },
        "427": {
          "source": "",
          "coverage": ""
        },
        "428": {
          "source": "  doSync: function(dataset_id, success, failure) {",
          "coverage": ""
        },
        "429": {
          "source": "    var dataset = self.datasets[dataset_id];",
          "coverage": 3
        },
        "430": {
          "source": "",
          "coverage": ""
        },
        "431": {
          "source": "    if (dataset) {",
          "coverage": 3
        },
        "432": {
          "source": "      dataset.syncPending = true;",
          "coverage": 1
        },
        "433": {
          "source": "      self.saveDataSet(dataset_id);",
          "coverage": 1
        },
        "434": {
          "source": "      if( success ) {",
          "coverage": 1
        },
        "435": {
          "source": "        success();",
          "coverage": 1
        },
        "436": {
          "source": "      }",
          "coverage": ""
        },
        "437": {
          "source": "    } else {",
          "coverage": ""
        },
        "438": {
          "source": "      if( failure ) {",
          "coverage": 2
        },
        "439": {
          "source": "        failure('unknown_dataset ' + dataset_id, dataset_id);",
          "coverage": 1
        },
        "440": {
          "source": "      }",
          "coverage": ""
        },
        "441": {
          "source": "    }",
          "coverage": ""
        },
        "442": {
          "source": "  },",
          "coverage": ""
        },
        "443": {
          "source": "",
          "coverage": ""
        },
        "444": {
          "source": "  forceSync: function(dataset_id, success, failure) {",
          "coverage": ""
        },
        "445": {
          "source": "    var dataset = self.datasets[dataset_id];",
          "coverage": 28
        },
        "446": {
          "source": "",
          "coverage": ""
        },
        "447": {
          "source": "    if (dataset) {",
          "coverage": 28
        },
        "448": {
          "source": "      dataset.syncForced = true;",
          "coverage": 26
        },
        "449": {
          "source": "      self.saveDataSet(dataset_id);",
          "coverage": 26
        },
        "450": {
          "source": "      if( success ) {",
          "coverage": 26
        },
        "451": {
          "source": "        success();",
          "coverage": 26
        },
        "452": {
          "source": "      }",
          "coverage": ""
        },
        "453": {
          "source": "    } else {",
          "coverage": ""
        },
        "454": {
          "source": "      if( failure ) {",
          "coverage": 2
        },
        "455": {
          "source": "        failure('unknown_dataset ' + dataset_id, dataset_id);",
          "coverage": 1
        },
        "456": {
          "source": "      }",
          "coverage": ""
        },
        "457": {
          "source": "    }",
          "coverage": ""
        },
        "458": {
          "source": "  },",
          "coverage": ""
        },
        "459": {
          "source": "",
          "coverage": ""
        },
        "460": {
          "source": "  sortObject : function(object) {",
          "coverage": ""
        },
        "461": {
          "source": "    if (typeof object !== \"object\" || object === null) {",
          "coverage": 300
        },
        "462": {
          "source": "      return object;",
          "coverage": 217
        },
        "463": {
          "source": "    }",
          "coverage": ""
        },
        "464": {
          "source": "",
          "coverage": ""
        },
        "465": {
          "source": "    var result = [];",
          "coverage": 83
        },
        "466": {
          "source": "",
          "coverage": ""
        },
        "467": {
          "source": "    Object.keys(object).sort().forEach(function(key) {",
          "coverage": 83
        },
        "468": {
          "source": "      result.push({",
          "coverage": 236
        },
        "469": {
          "source": "        key: key,",
          "coverage": ""
        },
        "470": {
          "source": "        value: self.sortObject(object[key])",
          "coverage": ""
        },
        "471": {
          "source": "      });",
          "coverage": ""
        },
        "472": {
          "source": "    });",
          "coverage": ""
        },
        "473": {
          "source": "",
          "coverage": ""
        },
        "474": {
          "source": "    return result;",
          "coverage": 83
        },
        "475": {
          "source": "  },",
          "coverage": ""
        },
        "476": {
          "source": "",
          "coverage": ""
        },
        "477": {
          "source": "  sortedStringify : function(obj) {",
          "coverage": ""
        },
        "478": {
          "source": "",
          "coverage": ""
        },
        "479": {
          "source": "    var str = '';",
          "coverage": 64
        },
        "480": {
          "source": "",
          "coverage": ""
        },
        "481": {
          "source": "    try {",
          "coverage": 64
        },
        "482": {
          "source": "      str = JSON.stringify(self.sortObject(obj));",
          "coverage": 64
        },
        "483": {
          "source": "    } catch (e) {",
          "coverage": ""
        },
        "484": {
          "source": "      console.error('Error stringifying sorted object:' + e);",
          "coverage": 0
        },
        "485": {
          "source": "    }",
          "coverage": ""
        },
        "486": {
          "source": "",
          "coverage": ""
        },
        "487": {
          "source": "    return str;",
          "coverage": 64
        },
        "488": {
          "source": "  },",
          "coverage": ""
        },
        "489": {
          "source": "",
          "coverage": ""
        },
        "490": {
          "source": "  generateHash: function(object) {",
          "coverage": ""
        },
        "491": {
          "source": "    var hash = CryptoJS.SHA1(self.sortedStringify(object));",
          "coverage": 64
        },
        "492": {
          "source": "    return hash.toString();",
          "coverage": 64
        },
        "493": {
          "source": "  },",
          "coverage": ""
        },
        "494": {
          "source": "",
          "coverage": ""
        },
        "495": {
          "source": "  addPendingObj: function(dataset_id, uid, data, action, success, failure) {",
          "coverage": ""
        },
        "496": {
          "source": "    self.isOnline(function (online) {",
          "coverage": 27
        },
        "497": {
          "source": "      if (!online) {",
          "coverage": 27
        },
        "498": {
          "source": "        self.doNotify(dataset_id, uid, self.notifications.OFFLINE_UPDATE, action);",
          "coverage": 0
        },
        "499": {
          "source": "      }",
          "coverage": ""
        },
        "500": {
          "source": "    });",
          "coverage": ""
        },
        "501": {
          "source": "",
          "coverage": ""
        },
        "502": {
          "source": "    function storePendingObject(obj) {",
          "coverage": 27
        },
        "503": {
          "source": "      obj.hash = self.generateHash(obj);",
          "coverage": 23
        },
        "504": {
          "source": "",
          "coverage": ""
        },
        "505": {
          "source": "      self.getDataSet(dataset_id, function(dataset) {",
          "coverage": 23
        },
        "506": {
          "source": "",
          "coverage": ""
        },
        "507": {
          "source": "        dataset.pending[obj.hash] = obj;",
          "coverage": 22
        },
        "508": {
          "source": "",
          "coverage": ""
        },
        "509": {
          "source": "        self.updateDatasetFromLocal(dataset, obj);",
          "coverage": 22
        },
        "510": {
          "source": "",
          "coverage": ""
        },
        "511": {
          "source": "        if(self.config.auto_sync_local_updates) {",
          "coverage": 22
        },
        "512": {
          "source": "          dataset.syncPending = true;",
          "coverage": 22
        },
        "513": {
          "source": "        }",
          "coverage": ""
        },
        "514": {
          "source": "        self.saveDataSet(dataset_id);",
          "coverage": 22
        },
        "515": {
          "source": "        self.doNotify(dataset_id, uid, self.notifications.LOCAL_UPDATE_APPLIED, action);",
          "coverage": 22
        },
        "516": {
          "source": "",
          "coverage": ""
        },
        "517": {
          "source": "        success(obj);",
          "coverage": 22
        },
        "518": {
          "source": "      }, function(code, msg) {",
          "coverage": ""
        },
        "519": {
          "source": "        if(failure) failure(code, msg);",
          "coverage": 1
        },
        "520": {
          "source": "      });",
          "coverage": ""
        },
        "521": {
          "source": "    }",
          "coverage": ""
        },
        "522": {
          "source": "",
          "coverage": ""
        },
        "523": {
          "source": "    var pendingObj = {};",
          "coverage": 27
        },
        "524": {
          "source": "    pendingObj.inFlight = false;",
          "coverage": 27
        },
        "525": {
          "source": "    pendingObj.action = action;",
          "coverage": 27
        },
        "526": {
          "source": "    pendingObj.post = JSON.parse(JSON.stringify(data));",
          "coverage": 27
        },
        "527": {
          "source": "    pendingObj.postHash = self.generateHash(pendingObj.post);",
          "coverage": 27
        },
        "528": {
          "source": "    pendingObj.timestamp = new Date().getTime();",
          "coverage": 27
        },
        "529": {
          "source": "    if( \"create\" === action ) {",
          "coverage": 27
        },
        "530": {
          "source": "      pendingObj.uid = pendingObj.postHash;",
          "coverage": 11
        },
        "531": {
          "source": "      storePendingObject(pendingObj);",
          "coverage": 11
        },
        "532": {
          "source": "    } else {",
          "coverage": ""
        },
        "533": {
          "source": "      self.read(dataset_id, uid, function(rec) {",
          "coverage": 16
        },
        "534": {
          "source": "        pendingObj.uid = uid;",
          "coverage": 12
        },
        "535": {
          "source": "        pendingObj.pre = rec.data;",
          "coverage": 12
        },
        "536": {
          "source": "        pendingObj.preHash = self.generateHash(rec.data);",
          "coverage": 12
        },
        "537": {
          "source": "        storePendingObject(pendingObj);",
          "coverage": 12
        },
        "538": {
          "source": "      }, function(code, msg) {",
          "coverage": ""
        },
        "539": {
          "source": "        if(failure){",
          "coverage": 4
        },
        "540": {
          "source": "          failure(code, msg);",
          "coverage": 2
        },
        "541": {
          "source": "        }",
          "coverage": ""
        },
        "542": {
          "source": "      });",
          "coverage": ""
        },
        "543": {
          "source": "    }",
          "coverage": ""
        },
        "544": {
          "source": "  },",
          "coverage": ""
        },
        "545": {
          "source": "",
          "coverage": ""
        },
        "546": {
          "source": "  syncLoop: function(dataset_id) {",
          "coverage": ""
        },
        "547": {
          "source": "    self.getDataSet(dataset_id, function(dataSet) {",
          "coverage": 29
        },
        "548": {
          "source": "    ",
          "coverage": ""
        },
        "549": {
          "source": "      // The sync loop is currently active",
          "coverage": ""
        },
        "550": {
          "source": "      dataSet.syncPending = false;",
          "coverage": 29
        },
        "551": {
          "source": "      dataSet.syncRunning = true;",
          "coverage": 29
        },
        "552": {
          "source": "      dataSet.syncLoopStart = new Date().getTime();",
          "coverage": 29
        },
        "553": {
          "source": "      self.doNotify(dataset_id, null, self.notifications.SYNC_STARTED, null);",
          "coverage": 29
        },
        "554": {
          "source": "",
          "coverage": ""
        },
        "555": {
          "source": "      self.isOnline(function(online) {",
          "coverage": 29
        },
        "556": {
          "source": "        if (!online) {",
          "coverage": 29
        },
        "557": {
          "source": "          self.syncComplete(dataset_id, \"offline\", self.notifications.SYNC_FAILED);",
          "coverage": 0
        },
        "558": {
          "source": "        } else {",
          "coverage": ""
        },
        "559": {
          "source": "          self.checkHasCustomSync(dataset_id, function() {",
          "coverage": 29
        },
        "560": {
          "source": "",
          "coverage": ""
        },
        "561": {
          "source": "            var syncLoopParams = {};",
          "coverage": 29
        },
        "562": {
          "source": "            syncLoopParams.fn = 'sync';",
          "coverage": 29
        },
        "563": {
          "source": "            syncLoopParams.dataset_id = dataset_id;",
          "coverage": 29
        },
        "564": {
          "source": "            syncLoopParams.query_params = dataSet.query_params;",
          "coverage": 29
        },
        "565": {
          "source": "            syncLoopParams.config = dataSet.config;",
          "coverage": 29
        },
        "566": {
          "source": "            syncLoopParams.meta_data = dataSet.meta_data;",
          "coverage": 29
        },
        "567": {
          "source": "            //var datasetHash = self.generateLocalDatasetHash(dataSet);",
          "coverage": ""
        },
        "568": {
          "source": "            syncLoopParams.dataset_hash = dataSet.hash;",
          "coverage": 29
        },
        "569": {
          "source": "            syncLoopParams.acknowledgements = dataSet.acknowledgements || [];",
          "coverage": 29
        },
        "570": {
          "source": "",
          "coverage": ""
        },
        "571": {
          "source": "            var pending = dataSet.pending;",
          "coverage": 29
        },
        "572": {
          "source": "            var pendingArray = [];",
          "coverage": 29
        },
        "573": {
          "source": "            for(var i in pending ) {",
          "coverage": 29
        },
        "574": {
          "source": "              // Mark the pending records we are about to submit as inflight and add them to the array for submission",
          "coverage": ""
        },
        "575": {
          "source": "              // Don't re-add previous inFlight pending records who whave crashed - i.e. who's current state is unknown",
          "coverage": ""
        },
        "576": {
          "source": "              // Don't add delayed records",
          "coverage": ""
        },
        "577": {
          "source": "              if( !pending[i].inFlight &amp;&amp; !pending[i].crashed &amp;&amp; !pending[i].delayed) {",
          "coverage": 26
        },
        "578": {
          "source": "                pending[i].inFlight = true;",
          "coverage": 13
        },
        "579": {
          "source": "                pending[i].inFlightDate = new Date().getTime();",
          "coverage": 13
        },
        "580": {
          "source": "                pendingArray.push(pending[i]);",
          "coverage": 13
        },
        "581": {
          "source": "              }",
          "coverage": ""
        },
        "582": {
          "source": "            }",
          "coverage": ""
        },
        "583": {
          "source": "            syncLoopParams.pending = pendingArray;",
          "coverage": 29
        },
        "584": {
          "source": "",
          "coverage": ""
        },
        "585": {
          "source": "            if( pendingArray.length &gt; 0 ) {",
          "coverage": 29
        },
        "586": {
          "source": "              self.consoleLog('Starting sync loop - global hash = ' + dataSet.hash + ' :: params = ' + JSON.stringify(syncLoopParams, null, 2));",
          "coverage": 13
        },
        "587": {
          "source": "            }",
          "coverage": ""
        },
        "588": {
          "source": "            try {",
          "coverage": 29
        },
        "589": {
          "source": "              self.doCloudCall({",
          "coverage": 29
        },
        "590": {
          "source": "                'dataset_id': dataset_id,",
          "coverage": ""
        },
        "591": {
          "source": "                'req': syncLoopParams",
          "coverage": ""
        },
        "592": {
          "source": "              }, function(res) {",
          "coverage": ""
        },
        "593": {
          "source": "                var rec;",
          "coverage": 21
        },
        "594": {
          "source": "",
          "coverage": ""
        },
        "595": {
          "source": "                function processUpdates(updates, notification, acknowledgements) {",
          "coverage": 21
        },
        "596": {
          "source": "                  if( updates ) {",
          "coverage": 39
        },
        "597": {
          "source": "                    for (var up in updates) {",
          "coverage": 8
        },
        "598": {
          "source": "                      rec = updates[up];",
          "coverage": 6
        },
        "599": {
          "source": "                      acknowledgements.push(rec);",
          "coverage": 6
        },
        "600": {
          "source": "                      if( dataSet.pending[up] &amp;&amp; dataSet.pending[up].inFlight &amp;&amp; !dataSet.pending[up].crashed ) {",
          "coverage": 6
        },
        "601": {
          "source": "                        delete dataSet.pending[up];",
          "coverage": 5
        },
        "602": {
          "source": "                        self.doNotify(dataset_id, rec.uid, notification, rec);",
          "coverage": 5
        },
        "603": {
          "source": "                      }",
          "coverage": ""
        },
        "604": {
          "source": "                    }",
          "coverage": ""
        },
        "605": {
          "source": "                  }",
          "coverage": ""
        },
        "606": {
          "source": "                }",
          "coverage": ""
        },
        "607": {
          "source": "",
          "coverage": ""
        },
        "608": {
          "source": "                // Check to see if any new pending records need to be updated to reflect the current state of play.",
          "coverage": ""
        },
        "609": {
          "source": "                self.updatePendingFromNewData(dataset_id, dataSet, res);",
          "coverage": 21
        },
        "610": {
          "source": "",
          "coverage": ""
        },
        "611": {
          "source": "                // Check to see if any previously crashed inflight records can now be resolved",
          "coverage": ""
        },
        "612": {
          "source": "                self.updateCrashedInFlightFromNewData(dataset_id, dataSet, res);",
          "coverage": 21
        },
        "613": {
          "source": "",
          "coverage": ""
        },
        "614": {
          "source": "                //Check to see if any delayed pending records can now be set to ready",
          "coverage": ""
        },
        "615": {
          "source": "                self.updateDelayedFromNewData(dataset_id, dataSet, res);",
          "coverage": 21
        },
        "616": {
          "source": "",
          "coverage": ""
        },
        "617": {
          "source": "                //Check meta data as well to make sure it contains the correct info",
          "coverage": ""
        },
        "618": {
          "source": "                self.updateMetaFromNewData(dataset_id, dataSet, res);",
          "coverage": 21
        },
        "619": {
          "source": "",
          "coverage": ""
        },
        "620": {
          "source": "                // Update the new dataset with details of any inflight updates which we have not received a response on",
          "coverage": ""
        },
        "621": {
          "source": "                self.updateNewDataFromInFlight(dataset_id, dataSet, res);",
          "coverage": 21
        },
        "622": {
          "source": "",
          "coverage": ""
        },
        "623": {
          "source": "                // Update the new dataset with details of any pending updates",
          "coverage": ""
        },
        "624": {
          "source": "                self.updateNewDataFromPending(dataset_id, dataSet, res);",
          "coverage": 21
        },
        "625": {
          "source": "",
          "coverage": ""
        },
        "626": {
          "source": "",
          "coverage": ""
        },
        "627": {
          "source": "",
          "coverage": ""
        },
        "628": {
          "source": "                if (res.records) {",
          "coverage": 21
        },
        "629": {
          "source": "                  // Full Dataset returned",
          "coverage": ""
        },
        "630": {
          "source": "                  dataSet.data = res.records;",
          "coverage": 9
        },
        "631": {
          "source": "                  dataSet.hash = res.hash;",
          "coverage": 9
        },
        "632": {
          "source": "",
          "coverage": ""
        },
        "633": {
          "source": "                  self.doNotify(dataset_id, res.hash, self.notifications.DELTA_RECEIVED, 'full dataset');",
          "coverage": 9
        },
        "634": {
          "source": "                }",
          "coverage": ""
        },
        "635": {
          "source": "",
          "coverage": ""
        },
        "636": {
          "source": "                if (res.updates) {",
          "coverage": 21
        },
        "637": {
          "source": "                  var acknowledgements = [];",
          "coverage": 13
        },
        "638": {
          "source": "                  processUpdates(res.updates.applied, self.notifications.REMOTE_UPDATE_APPLIED, acknowledgements);",
          "coverage": 13
        },
        "639": {
          "source": "                  processUpdates(res.updates.failed, self.notifications.REMOTE_UPDATE_FAILED, acknowledgements);",
          "coverage": 13
        },
        "640": {
          "source": "                  processUpdates(res.updates.collisions, self.notifications.COLLISION_DETECTED, acknowledgements);",
          "coverage": 13
        },
        "641": {
          "source": "                  dataSet.acknowledgements = acknowledgements;",
          "coverage": 13
        },
        "642": {
          "source": "                }",
          "coverage": ""
        },
        "643": {
          "source": "",
          "coverage": ""
        },
        "644": {
          "source": "                if (!res.records &amp;&amp; res.hash &amp;&amp; res.hash !== dataSet.hash) {",
          "coverage": 21
        },
        "645": {
          "source": "                  self.consoleLog(\"Local dataset stale - syncing records :: local hash= \" + dataSet.hash + \" - remoteHash=\" + res.hash);",
          "coverage": 4
        },
        "646": {
          "source": "                  // Different hash value returned - Sync individual records",
          "coverage": ""
        },
        "647": {
          "source": "                  self.syncRecords(dataset_id);",
          "coverage": 4
        },
        "648": {
          "source": "                } else {",
          "coverage": ""
        },
        "649": {
          "source": "                  self.consoleLog(\"Local dataset up to date\");",
          "coverage": 17
        },
        "650": {
          "source": "                  self.syncComplete(dataset_id,  \"online\", self.notifications.SYNC_COMPLETE);",
          "coverage": 17
        },
        "651": {
          "source": "                }",
          "coverage": ""
        },
        "652": {
          "source": "              }, function(msg, err) {",
          "coverage": ""
        },
        "653": {
          "source": "                // The AJAX call failed to complete succesfully, so the state of the current pending updates is unknown",
          "coverage": ""
        },
        "654": {
          "source": "                // Mark them as \"crashed\". The next time a syncLoop completets successfully, we will review the crashed",
          "coverage": ""
        },
        "655": {
          "source": "                // records to see if we can determine their current state.",
          "coverage": ""
        },
        "656": {
          "source": "                self.markInFlightAsCrashed(dataSet);",
          "coverage": 8
        },
        "657": {
          "source": "                self.consoleLog(\"syncLoop failed : msg=\" + msg + \" :: err = \" + err);",
          "coverage": 8
        },
        "658": {
          "source": "                self.syncComplete(dataset_id, msg, self.notifications.SYNC_FAILED);",
          "coverage": 8
        },
        "659": {
          "source": "              });",
          "coverage": ""
        },
        "660": {
          "source": "            }",
          "coverage": ""
        },
        "661": {
          "source": "            catch (e) {",
          "coverage": ""
        },
        "662": {
          "source": "              self.consoleLog('Error performing sync - ' + e);",
          "coverage": 0
        },
        "663": {
          "source": "              self.syncComplete(dataset_id, e, self.notifications.SYNC_FAILED);",
          "coverage": 0
        },
        "664": {
          "source": "            }",
          "coverage": ""
        },
        "665": {
          "source": "          });",
          "coverage": ""
        },
        "666": {
          "source": "        }",
          "coverage": ""
        },
        "667": {
          "source": "      });",
          "coverage": ""
        },
        "668": {
          "source": "    });",
          "coverage": ""
        },
        "669": {
          "source": "  },",
          "coverage": ""
        },
        "670": {
          "source": "",
          "coverage": ""
        },
        "671": {
          "source": "  syncRecords: function(dataset_id) {",
          "coverage": ""
        },
        "672": {
          "source": "",
          "coverage": ""
        },
        "673": {
          "source": "    self.getDataSet(dataset_id, function(dataSet) {",
          "coverage": 4
        },
        "674": {
          "source": "",
          "coverage": ""
        },
        "675": {
          "source": "      var localDataSet = dataSet.data || {};",
          "coverage": 4
        },
        "676": {
          "source": "",
          "coverage": ""
        },
        "677": {
          "source": "      var clientRecs = {};",
          "coverage": 4
        },
        "678": {
          "source": "      for (var i in localDataSet) {",
          "coverage": 4
        },
        "679": {
          "source": "        var uid = i;",
          "coverage": 4
        },
        "680": {
          "source": "        var hash = localDataSet[i].hash;",
          "coverage": 4
        },
        "681": {
          "source": "        clientRecs[uid] = hash;",
          "coverage": 4
        },
        "682": {
          "source": "      }",
          "coverage": ""
        },
        "683": {
          "source": "",
          "coverage": ""
        },
        "684": {
          "source": "      var syncRecParams = {};",
          "coverage": 4
        },
        "685": {
          "source": "",
          "coverage": ""
        },
        "686": {
          "source": "      syncRecParams.fn = 'syncRecords';",
          "coverage": 4
        },
        "687": {
          "source": "      syncRecParams.dataset_id = dataset_id;",
          "coverage": 4
        },
        "688": {
          "source": "      syncRecParams.query_params = dataSet.query_params;",
          "coverage": 4
        },
        "689": {
          "source": "      syncRecParams.clientRecs = clientRecs;",
          "coverage": 4
        },
        "690": {
          "source": "",
          "coverage": ""
        },
        "691": {
          "source": "      self.consoleLog(\"syncRecParams :: \" + JSON.stringify(syncRecParams));",
          "coverage": 4
        },
        "692": {
          "source": "",
          "coverage": ""
        },
        "693": {
          "source": "      self.doCloudCall({",
          "coverage": 4
        },
        "694": {
          "source": "        'dataset_id': dataset_id,",
          "coverage": ""
        },
        "695": {
          "source": "        'req': syncRecParams",
          "coverage": ""
        },
        "696": {
          "source": "      }, function(res) {",
          "coverage": ""
        },
        "697": {
          "source": "        var i;",
          "coverage": 4
        },
        "698": {
          "source": "",
          "coverage": ""
        },
        "699": {
          "source": "        if (res.create) {",
          "coverage": 4
        },
        "700": {
          "source": "          for (i in res.create) {",
          "coverage": 4
        },
        "701": {
          "source": "            localDataSet[i] = {\"hash\" : res.create[i].hash, \"data\" : res.create[i].data};",
          "coverage": 2
        },
        "702": {
          "source": "            self.doNotify(dataset_id, i, self.notifications.RECORD_DELTA_RECEIVED, \"create\");",
          "coverage": 2
        },
        "703": {
          "source": "          }",
          "coverage": ""
        },
        "704": {
          "source": "        }",
          "coverage": ""
        },
        "705": {
          "source": "        if (res.update) {",
          "coverage": 4
        },
        "706": {
          "source": "          for (i in res.update) {",
          "coverage": 3
        },
        "707": {
          "source": "            localDataSet[i].hash = res.update[i].hash;",
          "coverage": 1
        },
        "708": {
          "source": "            localDataSet[i].data = res.update[i].data;",
          "coverage": 1
        },
        "709": {
          "source": "            self.doNotify(dataset_id, i, self.notifications.RECORD_DELTA_RECEIVED, \"update\");",
          "coverage": 1
        },
        "710": {
          "source": "          }",
          "coverage": ""
        },
        "711": {
          "source": "        }",
          "coverage": ""
        },
        "712": {
          "source": "        if (res['delete']) {",
          "coverage": 4
        },
        "713": {
          "source": "          for (i in res['delete']) {",
          "coverage": 3
        },
        "714": {
          "source": "            delete localDataSet[i];",
          "coverage": 1
        },
        "715": {
          "source": "            self.doNotify(dataset_id, i, self.notifications.RECORD_DELTA_RECEIVED, \"delete\");",
          "coverage": 1
        },
        "716": {
          "source": "          }",
          "coverage": ""
        },
        "717": {
          "source": "        }",
          "coverage": ""
        },
        "718": {
          "source": "",
          "coverage": ""
        },
        "719": {
          "source": "        self.doNotify(dataset_id, res.hash, self.notifications.DELTA_RECEIVED, 'partial dataset');",
          "coverage": 4
        },
        "720": {
          "source": "",
          "coverage": ""
        },
        "721": {
          "source": "        dataSet.data = localDataSet;",
          "coverage": 4
        },
        "722": {
          "source": "        if(res.hash) {",
          "coverage": 4
        },
        "723": {
          "source": "          dataSet.hash = res.hash;",
          "coverage": 4
        },
        "724": {
          "source": "        }",
          "coverage": ""
        },
        "725": {
          "source": "        self.syncComplete(dataset_id, \"online\", self.notifications.SYNC_COMPLETE);",
          "coverage": 4
        },
        "726": {
          "source": "      }, function(msg, err) {",
          "coverage": ""
        },
        "727": {
          "source": "        self.consoleLog(\"syncRecords failed : msg=\" + msg + \" :: err=\" + err);",
          "coverage": 0
        },
        "728": {
          "source": "        self.syncComplete(dataset_id, msg, self.notifications.SYNC_FAILED);",
          "coverage": 0
        },
        "729": {
          "source": "      });",
          "coverage": ""
        },
        "730": {
          "source": "    });",
          "coverage": ""
        },
        "731": {
          "source": "  },",
          "coverage": ""
        },
        "732": {
          "source": "",
          "coverage": ""
        },
        "733": {
          "source": "  syncComplete: function(dataset_id, status, notification) {",
          "coverage": ""
        },
        "734": {
          "source": "",
          "coverage": ""
        },
        "735": {
          "source": "    self.getDataSet(dataset_id, function(dataset) {",
          "coverage": 29
        },
        "736": {
          "source": "      dataset.syncRunning = false;",
          "coverage": 29
        },
        "737": {
          "source": "      dataset.syncLoopEnd = new Date().getTime();",
          "coverage": 29
        },
        "738": {
          "source": "      self.saveDataSet(dataset_id);",
          "coverage": 29
        },
        "739": {
          "source": "      self.doNotify(dataset_id, dataset.hash, notification, status);",
          "coverage": 29
        },
        "740": {
          "source": "    });",
          "coverage": ""
        },
        "741": {
          "source": "  },",
          "coverage": ""
        },
        "742": {
          "source": "",
          "coverage": ""
        },
        "743": {
          "source": "  checkDatasets: function() {",
          "coverage": ""
        },
        "744": {
          "source": "    for( var dataset_id in self.datasets ) {",
          "coverage": 34
        },
        "745": {
          "source": "      if( self.datasets.hasOwnProperty(dataset_id) ) {",
          "coverage": 59
        },
        "746": {
          "source": "        var dataset = self.datasets[dataset_id];",
          "coverage": 59
        },
        "747": {
          "source": "",
          "coverage": ""
        },
        "748": {
          "source": "        if( !dataset.syncRunning &amp;&amp; (dataset.config.sync_active || dataset.syncForced)) {",
          "coverage": 59
        },
        "749": {
          "source": "          // Check to see if it is time for the sync loop to run again",
          "coverage": ""
        },
        "750": {
          "source": "          var lastSyncStart = dataset.syncLoopStart;",
          "coverage": 30
        },
        "751": {
          "source": "          var lastSyncCmp = dataset.syncLoopEnd;",
          "coverage": 30
        },
        "752": {
          "source": "          if(dataset.syncForced){",
          "coverage": 30
        },
        "753": {
          "source": "            dataset.syncPending = true;",
          "coverage": 26
        },
        "754": {
          "source": "          } else if( lastSyncStart == null ) {",
          "coverage": 4
        },
        "755": {
          "source": "            self.consoleLog(dataset_id +' - Performing initial sync');",
          "coverage": 1
        },
        "756": {
          "source": "            // Dataset has never been synced before - do initial sync",
          "coverage": ""
        },
        "757": {
          "source": "            dataset.syncPending = true;",
          "coverage": 1
        },
        "758": {
          "source": "          } else if (lastSyncCmp != null) {",
          "coverage": 3
        },
        "759": {
          "source": "            var timeSinceLastSync = new Date().getTime() - lastSyncCmp;",
          "coverage": 3
        },
        "760": {
          "source": "            var syncFrequency = dataset.config.sync_frequency * 1000;",
          "coverage": 3
        },
        "761": {
          "source": "            if( timeSinceLastSync &gt; syncFrequency ) {",
          "coverage": 3
        },
        "762": {
          "source": "              // Time between sync loops has passed - do another sync",
          "coverage": ""
        },
        "763": {
          "source": "              dataset.syncPending = true;",
          "coverage": 1
        },
        "764": {
          "source": "            }",
          "coverage": ""
        },
        "765": {
          "source": "          }",
          "coverage": ""
        },
        "766": {
          "source": "",
          "coverage": ""
        },
        "767": {
          "source": "          if( dataset.syncPending ) {",
          "coverage": 30
        },
        "768": {
          "source": "            // Reset syncForced in case it was what caused the sync cycle to run.",
          "coverage": ""
        },
        "769": {
          "source": "            dataset.syncForced = false;",
          "coverage": 29
        },
        "770": {
          "source": "",
          "coverage": ""
        },
        "771": {
          "source": "            // If the dataset requres syncing, run the sync loop. This may be because the sync interval has passed",
          "coverage": ""
        },
        "772": {
          "source": "            // or because the sync_frequency has been changed or because a change was made to the dataset and the",
          "coverage": ""
        },
        "773": {
          "source": "            // immediate_sync flag set to true",
          "coverage": ""
        },
        "774": {
          "source": "            self.syncLoop(dataset_id);",
          "coverage": 29
        },
        "775": {
          "source": "          }",
          "coverage": ""
        },
        "776": {
          "source": "        }",
          "coverage": ""
        },
        "777": {
          "source": "      }",
          "coverage": ""
        },
        "778": {
          "source": "    }",
          "coverage": ""
        },
        "779": {
          "source": "  },",
          "coverage": ""
        },
        "780": {
          "source": "",
          "coverage": ""
        },
        "781": {
          "source": "  checkHasCustomSync : function(dataset_id, cb) {",
          "coverage": ""
        },
        "782": {
          "source": "    var dataset = self.datasets[dataset_id];",
          "coverage": 32
        },
        "783": {
          "source": "    if(dataset &amp;&amp; dataset.config){",
          "coverage": 32
        },
        "784": {
          "source": "      self.consoleLog(\"dataset.config.has_custom_sync = \" + dataset.config.has_custom_sync);",
          "coverage": 32
        },
        "785": {
          "source": "      if(dataset.config.has_custom_sync != null) {",
          "coverage": 32
        },
        "786": {
          "source": "        return cb();",
          "coverage": 25
        },
        "787": {
          "source": "      }",
          "coverage": ""
        },
        "788": {
          "source": "      self.consoleLog('starting check has custom sync');",
          "coverage": 7
        },
        "789": {
          "source": "",
          "coverage": ""
        },
        "790": {
          "source": "      actAPI({",
          "coverage": 7
        },
        "791": {
          "source": "        'act' : dataset_id,",
          "coverage": ""
        },
        "792": {
          "source": "        'req': {",
          "coverage": ""
        },
        "793": {
          "source": "          'fn': 'sync'",
          "coverage": ""
        },
        "794": {
          "source": "        }",
          "coverage": ""
        },
        "795": {
          "source": "      }, function(res) {",
          "coverage": ""
        },
        "796": {
          "source": "        //if the custom sync is defined in the cloud, this call should success.",
          "coverage": ""
        },
        "797": {
          "source": "        //if failed, we think this the custom sync is not defined",
          "coverage": ""
        },
        "798": {
          "source": "        self.consoleLog('check has_custom_sync - success - ', res);",
          "coverage": 1
        },
        "799": {
          "source": "        dataset.config.has_custom_sync = true;",
          "coverage": 1
        },
        "800": {
          "source": "        return cb();",
          "coverage": 1
        },
        "801": {
          "source": "      }, function(msg,err) {",
          "coverage": ""
        },
        "802": {
          "source": "        self.consoleLog('check has_custom_sync - failure - ', err);",
          "coverage": 6
        },
        "803": {
          "source": "        if(err.status &amp;&amp; err.status === 500){",
          "coverage": 6
        },
        "804": {
          "source": "          //if we receive 500, it could be that there is an error occured due to missing parameters or similar,",
          "coverage": ""
        },
        "805": {
          "source": "          //but the endpoint is defined.",
          "coverage": ""
        },
        "806": {
          "source": "          self.consoleLog('check has_custom_sync - failed with 500, endpoint does exists');",
          "coverage": 1
        },
        "807": {
          "source": "          dataset.config.has_custom_sync = true;",
          "coverage": 1
        },
        "808": {
          "source": "        } else {",
          "coverage": ""
        },
        "809": {
          "source": "          dataset.config.has_custom_sync = false;",
          "coverage": 5
        },
        "810": {
          "source": "        }",
          "coverage": ""
        },
        "811": {
          "source": "        return cb();",
          "coverage": 6
        },
        "812": {
          "source": "      });",
          "coverage": ""
        },
        "813": {
          "source": "    } else {",
          "coverage": ""
        },
        "814": {
          "source": "      return cb();",
          "coverage": 0
        },
        "815": {
          "source": "    }",
          "coverage": ""
        },
        "816": {
          "source": "  },",
          "coverage": ""
        },
        "817": {
          "source": "",
          "coverage": ""
        },
        "818": {
          "source": "  doCloudCall: function(params, success, failure) {",
          "coverage": ""
        },
        "819": {
          "source": "    var hasCustomSync = false;",
          "coverage": 37
        },
        "820": {
          "source": "    var dataset = self.datasets[params.dataset_id];",
          "coverage": 37
        },
        "821": {
          "source": "    if(dataset &amp;&amp; dataset.config){",
          "coverage": 37
        },
        "822": {
          "source": "      hasCustomSync = dataset.config.has_custom_sync;",
          "coverage": 37
        },
        "823": {
          "source": "    }",
          "coverage": ""
        },
        "824": {
          "source": "    if( hasCustomSync == true ) {",
          "coverage": 37
        },
        "825": {
          "source": "      actAPI({",
          "coverage": 0
        },
        "826": {
          "source": "        'act' : params.dataset_id,",
          "coverage": ""
        },
        "827": {
          "source": "        'req' : params.req",
          "coverage": ""
        },
        "828": {
          "source": "      }, function(res) {",
          "coverage": ""
        },
        "829": {
          "source": "        success(res);",
          "coverage": 0
        },
        "830": {
          "source": "      }, function(msg, err) {",
          "coverage": ""
        },
        "831": {
          "source": "        failure(msg, err);",
          "coverage": 0
        },
        "832": {
          "source": "      });      ",
          "coverage": ""
        },
        "833": {
          "source": "    } else {",
          "coverage": ""
        },
        "834": {
          "source": "      cloudAPI({",
          "coverage": 37
        },
        "835": {
          "source": "        'path' : '/mbaas/sync/' + params.dataset_id,",
          "coverage": ""
        },
        "836": {
          "source": "        'method' : 'post',",
          "coverage": ""
        },
        "837": {
          "source": "        'data' : params.req",
          "coverage": ""
        },
        "838": {
          "source": "      }, function(res) {",
          "coverage": ""
        },
        "839": {
          "source": "        success(res);",
          "coverage": 27
        },
        "840": {
          "source": "      }, function(msg, err) {",
          "coverage": ""
        },
        "841": {
          "source": "        failure(msg, err);",
          "coverage": 10
        },
        "842": {
          "source": "      })",
          "coverage": ""
        },
        "843": {
          "source": "    }",
          "coverage": ""
        },
        "844": {
          "source": "  },",
          "coverage": ""
        },
        "845": {
          "source": "",
          "coverage": ""
        },
        "846": {
          "source": "  datasetMonitor: function() {",
          "coverage": ""
        },
        "847": {
          "source": "    self.checkDatasets();",
          "coverage": 34
        },
        "848": {
          "source": "",
          "coverage": ""
        },
        "849": {
          "source": "    // Re-execute datasetMonitor every 500ms so we keep invoking checkDatasets();",
          "coverage": ""
        },
        "850": {
          "source": "    setTimeout(function() {",
          "coverage": 34
        },
        "851": {
          "source": "      self.datasetMonitor();",
          "coverage": 33
        },
        "852": {
          "source": "    }, 500);",
          "coverage": ""
        },
        "853": {
          "source": "  },",
          "coverage": ""
        },
        "854": {
          "source": "",
          "coverage": ""
        },
        "855": {
          "source": "  saveDataSet: function (dataset_id, cb) {",
          "coverage": ""
        },
        "856": {
          "source": "    var onFail =  function(msg, err) {",
          "coverage": 162
        },
        "857": {
          "source": "      // save failed",
          "coverage": ""
        },
        "858": {
          "source": "      var errMsg = 'save to local storage failed  msg:' + msg + ' err:' + err;",
          "coverage": 0
        },
        "859": {
          "source": "      self.doNotify(dataset_id, null, self.notifications.CLIENT_STORAGE_FAILED, errMsg);",
          "coverage": 0
        },
        "860": {
          "source": "      self.consoleLog(errMsg);",
          "coverage": 0
        },
        "861": {
          "source": "    };",
          "coverage": ""
        },
        "862": {
          "source": "    self.getDataSet(dataset_id, function(dataset) {",
          "coverage": 162
        },
        "863": {
          "source": "      // save dataset to local storage",
          "coverage": ""
        },
        "864": {
          "source": "      Lawnchair({fail:onFail, adapter: self.config.storage_strategy, size:self.config.file_system_quota}, function (){",
          "coverage": 162
        },
        "865": {
          "source": "        this.save({key:\"dataset_\" + dataset_id, val:dataset}, function(){",
          "coverage": 162
        },
        "866": {
          "source": "          //save success",
          "coverage": ""
        },
        "867": {
          "source": "          if(cb) return cb();",
          "coverage": 203
        },
        "868": {
          "source": "        });",
          "coverage": ""
        },
        "869": {
          "source": "      });",
          "coverage": ""
        },
        "870": {
          "source": "    });",
          "coverage": ""
        },
        "871": {
          "source": "  },",
          "coverage": ""
        },
        "872": {
          "source": "",
          "coverage": ""
        },
        "873": {
          "source": "  loadDataSet: function (dataset_id, success, failure) {",
          "coverage": ""
        },
        "874": {
          "source": "    // load dataset from local storage",
          "coverage": ""
        },
        "875": {
          "source": "    var onFail = function(msg, err) {",
          "coverage": 3
        },
        "876": {
          "source": "      // load failed",
          "coverage": ""
        },
        "877": {
          "source": "      var errMsg = 'load from local storage failed  msg:' + msg;",
          "coverage": 0
        },
        "878": {
          "source": "      self.doNotify(dataset_id, null, self.notifications.CLIENT_STORAGE_FAILED, errMsg);",
          "coverage": 0
        },
        "879": {
          "source": "      self.consoleLog(errMsg);",
          "coverage": 0
        },
        "880": {
          "source": "    };",
          "coverage": ""
        },
        "881": {
          "source": "",
          "coverage": ""
        },
        "882": {
          "source": "        Lawnchair({fail:onFail, adapter: self.config.storage_strategy, size:self.config.file_system_quota},function (){       ",
          "coverage": 3
        },
        "883": {
          "source": "          this.get( \"dataset_\" + dataset_id, function (data){",
          "coverage": 3
        },
        "884": {
          "source": "            if (data &amp;&amp; data.val) {",
          "coverage": 3
        },
        "885": {
          "source": "              var dataset = data.val;",
          "coverage": 1
        },
        "886": {
          "source": "              if(typeof dataset === \"string\"){",
          "coverage": 1
        },
        "887": {
          "source": "                dataset = JSON.parse(dataset);",
          "coverage": 0
        },
        "888": {
          "source": "              }",
          "coverage": ""
        },
        "889": {
          "source": "              // Datasets should not be auto initialised when loaded - the mange function should be called for each dataset",
          "coverage": ""
        },
        "890": {
          "source": "              // the user wants sync",
          "coverage": ""
        },
        "891": {
          "source": "              dataset.initialised = false;",
          "coverage": 1
        },
        "892": {
          "source": "              self.datasets[dataset_id] = dataset; // TODO: do we need to handle binary data?",
          "coverage": 1
        },
        "893": {
          "source": "              self.consoleLog('load from local storage success for dataset_id :' + dataset_id);",
          "coverage": 1
        },
        "894": {
          "source": "              if(success) return success(dataset);",
          "coverage": 2
        },
        "895": {
          "source": "            } else {",
          "coverage": ""
        },
        "896": {
          "source": "              // no data yet, probably first time. failure calback should handle this",
          "coverage": ""
        },
        "897": {
          "source": "              if(failure) return failure();",
          "coverage": 4
        },
        "898": {
          "source": "            }",
          "coverage": ""
        },
        "899": {
          "source": "       });",
          "coverage": ""
        },
        "900": {
          "source": "    });",
          "coverage": ""
        },
        "901": {
          "source": "  },",
          "coverage": ""
        },
        "902": {
          "source": "",
          "coverage": ""
        },
        "903": {
          "source": "",
          "coverage": ""
        },
        "904": {
          "source": "  updateDatasetFromLocal: function(dataset, pendingRec) {",
          "coverage": ""
        },
        "905": {
          "source": "    var pending = dataset.pending;",
          "coverage": 22
        },
        "906": {
          "source": "    var previousPendingUid;",
          "coverage": 22
        },
        "907": {
          "source": "    var previousPending;",
          "coverage": 22
        },
        "908": {
          "source": "",
          "coverage": ""
        },
        "909": {
          "source": "    var uid = pendingRec.uid;",
          "coverage": 22
        },
        "910": {
          "source": "    self.consoleLog('updating local dataset for uid ' + uid + ' - action = ' + pendingRec.action);",
          "coverage": 22
        },
        "911": {
          "source": "",
          "coverage": ""
        },
        "912": {
          "source": "    dataset.meta[uid] = dataset.meta[uid] || {};",
          "coverage": 22
        },
        "913": {
          "source": "",
          "coverage": ""
        },
        "914": {
          "source": "    // Creating a new record",
          "coverage": ""
        },
        "915": {
          "source": "    if( pendingRec.action === \"create\" ) {",
          "coverage": 22
        },
        "916": {
          "source": "      if( dataset.data[uid] ) {",
          "coverage": 10
        },
        "917": {
          "source": "        self.consoleLog('dataset already exists for uid in create :: ' + JSON.stringify(dataset.data[uid]));",
          "coverage": 1
        },
        "918": {
          "source": "",
          "coverage": ""
        },
        "919": {
          "source": "        // We are trying to do a create using a uid which already exists",
          "coverage": ""
        },
        "920": {
          "source": "        if (dataset.meta[uid].fromPending) {",
          "coverage": 1
        },
        "921": {
          "source": "          // We are trying to create on top of an existing pending record",
          "coverage": ""
        },
        "922": {
          "source": "          // Remove the previous pending record and use this one instead",
          "coverage": ""
        },
        "923": {
          "source": "          previousPendingUid = dataset.meta[uid].pendingUid;",
          "coverage": 1
        },
        "924": {
          "source": "          delete pending[previousPendingUid];",
          "coverage": 1
        },
        "925": {
          "source": "        }",
          "coverage": ""
        },
        "926": {
          "source": "      }",
          "coverage": ""
        },
        "927": {
          "source": "      dataset.data[uid] = {};",
          "coverage": 10
        },
        "928": {
          "source": "    }",
          "coverage": ""
        },
        "929": {
          "source": "",
          "coverage": ""
        },
        "930": {
          "source": "    if( pendingRec.action === \"update\" ) {",
          "coverage": 22
        },
        "931": {
          "source": "      if( dataset.data[uid] ) {",
          "coverage": 7
        },
        "932": {
          "source": "        if (dataset.meta[uid].fromPending) {",
          "coverage": 7
        },
        "933": {
          "source": "          self.consoleLog('updating an existing pending record for dataset :: ' + JSON.stringify(dataset.data[uid]));",
          "coverage": 4
        },
        "934": {
          "source": "          // We are trying to update an existing pending record",
          "coverage": ""
        },
        "935": {
          "source": "          previousPendingUid = dataset.meta[uid].pendingUid;",
          "coverage": 4
        },
        "936": {
          "source": "          dataset.meta[uid].previousPendingUid = previousPendingUid;",
          "coverage": 4
        },
        "937": {
          "source": "          previousPending = pending[previousPendingUid];",
          "coverage": 4
        },
        "938": {
          "source": "          if(previousPending) {",
          "coverage": 4
        },
        "939": {
          "source": "            if(!previousPending.inFlight){",
          "coverage": 3
        },
        "940": {
          "source": "              self.consoleLog('existing pre-flight pending record = ' + JSON.stringify(previousPending));",
          "coverage": 1
        },
        "941": {
          "source": "              // We are trying to perform an update on an existing pending record",
          "coverage": ""
        },
        "942": {
          "source": "              // modify the original record to have the latest value and delete the pending update",
          "coverage": ""
        },
        "943": {
          "source": "              previousPending.post = pendingRec.post;",
          "coverage": 1
        },
        "944": {
          "source": "              previousPending.postHash = pendingRec.postHash;",
          "coverage": 1
        },
        "945": {
          "source": "              delete pending[pendingRec.hash];",
          "coverage": 1
        },
        "946": {
          "source": "              // Update the pending record to have the hash of the previous record as this is what is now being",
          "coverage": ""
        },
        "947": {
          "source": "              // maintained in the pending array &amp; is what we want in the meta record",
          "coverage": ""
        },
        "948": {
          "source": "              pendingRec.hash = previousPendingUid;",
          "coverage": 1
        },
        "949": {
          "source": "            } else {",
          "coverage": ""
        },
        "950": {
          "source": "              //we are performing changes to a pending record which is inFlight. Until the status of this pending record is resolved,",
          "coverage": ""
        },
        "951": {
          "source": "              //we should not submit this pending record to the cloud. Mark it as delayed.",
          "coverage": ""
        },
        "952": {
          "source": "              self.consoleLog('existing in-inflight pending record = ' + JSON.stringify(previousPending));",
          "coverage": 2
        },
        "953": {
          "source": "              pendingRec.delayed = true;",
          "coverage": 2
        },
        "954": {
          "source": "              pendingRec.waiting = previousPending.hash;",
          "coverage": 2
        },
        "955": {
          "source": "            }",
          "coverage": ""
        },
        "956": {
          "source": "          }",
          "coverage": ""
        },
        "957": {
          "source": "        }",
          "coverage": ""
        },
        "958": {
          "source": "      }",
          "coverage": ""
        },
        "959": {
          "source": "    }",
          "coverage": ""
        },
        "960": {
          "source": "",
          "coverage": ""
        },
        "961": {
          "source": "    if( pendingRec.action === \"delete\" ) {",
          "coverage": 22
        },
        "962": {
          "source": "      if( dataset.data[uid] ) {",
          "coverage": 5
        },
        "963": {
          "source": "        if (dataset.meta[uid].fromPending) {",
          "coverage": 5
        },
        "964": {
          "source": "          self.consoleLog('Deleting an existing pending record for dataset :: ' + JSON.stringify(dataset.data[uid]));",
          "coverage": 5
        },
        "965": {
          "source": "          // We are trying to delete an existing pending record",
          "coverage": ""
        },
        "966": {
          "source": "          previousPendingUid = dataset.meta[uid].pendingUid;",
          "coverage": 5
        },
        "967": {
          "source": "          dataset.meta[uid].previousPendingUid = previousPendingUid;",
          "coverage": 5
        },
        "968": {
          "source": "          previousPending = pending[previousPendingUid];",
          "coverage": 5
        },
        "969": {
          "source": "          if( previousPending ) {",
          "coverage": 5
        },
        "970": {
          "source": "            if(!previousPending.inFlight){",
          "coverage": 3
        },
        "971": {
          "source": "              self.consoleLog('existing pending record = ' + JSON.stringify(previousPending));",
          "coverage": 2
        },
        "972": {
          "source": "              if( previousPending.action === \"create\" ) {",
          "coverage": 2
        },
        "973": {
          "source": "                // We are trying to perform a delete on an existing pending create",
          "coverage": ""
        },
        "974": {
          "source": "                // These cancel each other out so remove them both",
          "coverage": ""
        },
        "975": {
          "source": "                delete pending[pendingRec.hash];",
          "coverage": 1
        },
        "976": {
          "source": "                delete pending[previousPendingUid];",
          "coverage": 1
        },
        "977": {
          "source": "              }",
          "coverage": ""
        },
        "978": {
          "source": "              if( previousPending.action === \"update\" ) {",
          "coverage": 2
        },
        "979": {
          "source": "                // We are trying to perform a delete on an existing pending update",
          "coverage": ""
        },
        "980": {
          "source": "                // Use the pre value from the pending update for the delete and",
          "coverage": ""
        },
        "981": {
          "source": "                // get rid of the pending update",
          "coverage": ""
        },
        "982": {
          "source": "                pendingRec.pre = previousPending.pre;",
          "coverage": 1
        },
        "983": {
          "source": "                pendingRec.preHash = previousPending.preHash;",
          "coverage": 1
        },
        "984": {
          "source": "                pendingRec.inFlight = false;",
          "coverage": 1
        },
        "985": {
          "source": "                delete pending[previousPendingUid];",
          "coverage": 1
        },
        "986": {
          "source": "              }",
          "coverage": ""
        },
        "987": {
          "source": "            } else {",
          "coverage": ""
        },
        "988": {
          "source": "              self.consoleLog('existing in-inflight pending record = ' + JSON.stringify(previousPending));",
          "coverage": 1
        },
        "989": {
          "source": "              pendingRec.delayed = true;",
          "coverage": 1
        },
        "990": {
          "source": "              pendingRec.waiting = previousPending.hash;",
          "coverage": 1
        },
        "991": {
          "source": "            }",
          "coverage": ""
        },
        "992": {
          "source": "          }",
          "coverage": ""
        },
        "993": {
          "source": "        }",
          "coverage": ""
        },
        "994": {
          "source": "        delete dataset.data[uid];",
          "coverage": 5
        },
        "995": {
          "source": "      }",
          "coverage": ""
        },
        "996": {
          "source": "    }",
          "coverage": ""
        },
        "997": {
          "source": "",
          "coverage": ""
        },
        "998": {
          "source": "    if( dataset.data[uid] ) {",
          "coverage": 22
        },
        "999": {
          "source": "      dataset.data[uid].data = pendingRec.post;",
          "coverage": 17
        },
        "1000": {
          "source": "      dataset.data[uid].hash = pendingRec.postHash;",
          "coverage": 17
        },
        "1001": {
          "source": "      dataset.meta[uid].fromPending = true;",
          "coverage": 17
        },
        "1002": {
          "source": "      dataset.meta[uid].pendingUid = pendingRec.hash;",
          "coverage": 17
        },
        "1003": {
          "source": "    }",
          "coverage": ""
        },
        "1004": {
          "source": "  },",
          "coverage": ""
        },
        "1005": {
          "source": "",
          "coverage": ""
        },
        "1006": {
          "source": "  updatePendingFromNewData: function(dataset_id, dataset, newData) {",
          "coverage": ""
        },
        "1007": {
          "source": "    var pending = dataset.pending;",
          "coverage": 21
        },
        "1008": {
          "source": "    var newRec;",
          "coverage": 21
        },
        "1009": {
          "source": "",
          "coverage": ""
        },
        "1010": {
          "source": "    if( pending &amp;&amp; newData.records) {",
          "coverage": 21
        },
        "1011": {
          "source": "      for( var pendingHash in pending ) {",
          "coverage": 9
        },
        "1012": {
          "source": "        if( pending.hasOwnProperty(pendingHash) ) {",
          "coverage": 10
        },
        "1013": {
          "source": "          var pendingRec = pending[pendingHash];",
          "coverage": 10
        },
        "1014": {
          "source": "",
          "coverage": ""
        },
        "1015": {
          "source": "          dataset.meta[pendingRec.uid] = dataset.meta[pendingRec.uid] || {};",
          "coverage": 10
        },
        "1016": {
          "source": "",
          "coverage": ""
        },
        "1017": {
          "source": "          if( pendingRec.inFlight === false ) {",
          "coverage": 10
        },
        "1018": {
          "source": "            // Pending record that has not been submitted",
          "coverage": ""
        },
        "1019": {
          "source": "            self.consoleLog('updatePendingFromNewData - Found Non inFlight record -&gt; action=' + pendingRec.action +' :: uid=' + pendingRec.uid  + ' :: hash=' + pendingRec.hash);",
          "coverage": 5
        },
        "1020": {
          "source": "            if( pendingRec.action === \"update\" || pendingRec.action === \"delete\") {",
          "coverage": 5
        },
        "1021": {
          "source": "              // Update the pre value of pending record to reflect the latest data returned from sync.",
          "coverage": ""
        },
        "1022": {
          "source": "              // This will prevent a collision being reported when the pending record is sent.",
          "coverage": ""
        },
        "1023": {
          "source": "              newRec = newData.records[pendingRec.uid];",
          "coverage": 3
        },
        "1024": {
          "source": "              if( newRec ) {",
          "coverage": 3
        },
        "1025": {
          "source": "                self.consoleLog('updatePendingFromNewData - Updating pre values for existing pending record ' + pendingRec.uid);",
          "coverage": 2
        },
        "1026": {
          "source": "                pendingRec.pre = newRec.data;",
          "coverage": 2
        },
        "1027": {
          "source": "                pendingRec.preHash = newRec.hash;",
          "coverage": 2
        },
        "1028": {
          "source": "              }",
          "coverage": ""
        },
        "1029": {
          "source": "              else {",
          "coverage": ""
        },
        "1030": {
          "source": "                // The update/delete may be for a newly created record in which case the uid will have changed.",
          "coverage": ""
        },
        "1031": {
          "source": "                var previousPendingUid = dataset.meta[pendingRec.uid].previousPendingUid;",
          "coverage": 1
        },
        "1032": {
          "source": "                var previousPending = pending[previousPendingUid];",
          "coverage": 1
        },
        "1033": {
          "source": "                if( previousPending ) {",
          "coverage": 1
        },
        "1034": {
          "source": "                  if( newData &amp;&amp; newData.updates &amp;&amp;  newData.updates.applied &amp;&amp; newData.updates.applied[previousPending.hash] ) {",
          "coverage": 1
        },
        "1035": {
          "source": "                    // There is an update in from a previous pending action",
          "coverage": ""
        },
        "1036": {
          "source": "                    var newUid = newData.updates.applied[previousPending.hash].uid;",
          "coverage": 1
        },
        "1037": {
          "source": "                    newRec = newData.records[newUid];",
          "coverage": 1
        },
        "1038": {
          "source": "                    if( newRec ) {",
          "coverage": 1
        },
        "1039": {
          "source": "                      self.consoleLog('updatePendingFromNewData - Updating pre values for existing pending record which was previously a create ' + pendingRec.uid + ' ==&gt; ' + newUid);",
          "coverage": 1
        },
        "1040": {
          "source": "                      pendingRec.pre = newRec.data;",
          "coverage": 1
        },
        "1041": {
          "source": "                      pendingRec.preHash = newRec.hash;",
          "coverage": 1
        },
        "1042": {
          "source": "                      pendingRec.uid = newUid;",
          "coverage": 1
        },
        "1043": {
          "source": "                    }",
          "coverage": ""
        },
        "1044": {
          "source": "                  }",
          "coverage": ""
        },
        "1045": {
          "source": "                }",
          "coverage": ""
        },
        "1046": {
          "source": "              }",
          "coverage": ""
        },
        "1047": {
          "source": "            }",
          "coverage": ""
        },
        "1048": {
          "source": "",
          "coverage": ""
        },
        "1049": {
          "source": "            if( pendingRec.action === \"create\" ) {",
          "coverage": 5
        },
        "1050": {
          "source": "              if( newData &amp;&amp; newData.updates &amp;&amp;  newData.updates.applied &amp;&amp; newData.updates.applied[pendingHash] ) {",
          "coverage": 2
        },
        "1051": {
          "source": "                self.consoleLog('updatePendingFromNewData - Found an update for a pending create ' + JSON.stringify(newData.updates.applied[pendingHash]));",
          "coverage": 1
        },
        "1052": {
          "source": "                newRec = newData.records[newData.updates.applied[pendingHash].uid];",
          "coverage": 1
        },
        "1053": {
          "source": "                if( newRec ) {",
          "coverage": 1
        },
        "1054": {
          "source": "                  self.consoleLog('updatePendingFromNewData - Changing pending create to an update based on new record  ' + JSON.stringify(newRec));",
          "coverage": 1
        },
        "1055": {
          "source": "",
          "coverage": ""
        },
        "1056": {
          "source": "                  // Set up the pending create as an update",
          "coverage": ""
        },
        "1057": {
          "source": "                  pendingRec.action = \"update\";",
          "coverage": 1
        },
        "1058": {
          "source": "                  pendingRec.pre = newRec.data;",
          "coverage": 1
        },
        "1059": {
          "source": "                  pendingRec.preHash = newRec.hash;",
          "coverage": 1
        },
        "1060": {
          "source": "                  pendingRec.uid = newData.updates.applied[pendingHash].uid;",
          "coverage": 1
        },
        "1061": {
          "source": "                }",
          "coverage": ""
        },
        "1062": {
          "source": "              }",
          "coverage": ""
        },
        "1063": {
          "source": "            }",
          "coverage": ""
        },
        "1064": {
          "source": "          }",
          "coverage": ""
        },
        "1065": {
          "source": "        }",
          "coverage": ""
        },
        "1066": {
          "source": "      }",
          "coverage": ""
        },
        "1067": {
          "source": "    }",
          "coverage": ""
        },
        "1068": {
          "source": "  },",
          "coverage": ""
        },
        "1069": {
          "source": "",
          "coverage": ""
        },
        "1070": {
          "source": "  updateNewDataFromInFlight: function(dataset_id, dataset, newData) {",
          "coverage": ""
        },
        "1071": {
          "source": "    var pending = dataset.pending;",
          "coverage": 21
        },
        "1072": {
          "source": "",
          "coverage": ""
        },
        "1073": {
          "source": "    if( pending &amp;&amp; newData.records) {",
          "coverage": 21
        },
        "1074": {
          "source": "      for( var pendingHash in pending ) {",
          "coverage": 9
        },
        "1075": {
          "source": "        if( pending.hasOwnProperty(pendingHash) ) {",
          "coverage": 10
        },
        "1076": {
          "source": "          var pendingRec = pending[pendingHash];",
          "coverage": 10
        },
        "1077": {
          "source": "",
          "coverage": ""
        },
        "1078": {
          "source": "          if( pendingRec.inFlight ) {",
          "coverage": 10
        },
        "1079": {
          "source": "            var updateReceivedForPending = (newData &amp;&amp; newData.updates &amp;&amp;  newData.updates.hashes &amp;&amp; newData.updates.hashes[pendingHash]) ? true : false;",
          "coverage": 5
        },
        "1080": {
          "source": "",
          "coverage": ""
        },
        "1081": {
          "source": "            self.consoleLog('updateNewDataFromInFlight - Found inflight pending Record - action = ' + pendingRec.action + ' :: hash = ' + pendingHash + ' :: updateReceivedForPending=' + updateReceivedForPending);",
          "coverage": 5
        },
        "1082": {
          "source": "",
          "coverage": ""
        },
        "1083": {
          "source": "            if( ! updateReceivedForPending ) {",
          "coverage": 5
        },
        "1084": {
          "source": "              var newRec = newData.records[pendingRec.uid];",
          "coverage": 3
        },
        "1085": {
          "source": "",
          "coverage": ""
        },
        "1086": {
          "source": "              if( pendingRec.action === \"update\" &amp;&amp; newRec) {",
          "coverage": 3
        },
        "1087": {
          "source": "                // Modify the new Record to have the updates from the pending record so the local dataset is consistent",
          "coverage": ""
        },
        "1088": {
          "source": "                newRec.data = pendingRec.post;",
          "coverage": 1
        },
        "1089": {
          "source": "                newRec.hash = pendingRec.postHash;",
          "coverage": 1
        },
        "1090": {
          "source": "              }",
          "coverage": ""
        },
        "1091": {
          "source": "              else if( pendingRec.action === \"delete\" &amp;&amp; newRec) {",
          "coverage": 2
        },
        "1092": {
          "source": "                // Remove the record from the new dataset so the local dataset is consistent",
          "coverage": ""
        },
        "1093": {
          "source": "                delete newData.records[pendingRec.uid];",
          "coverage": 1
        },
        "1094": {
          "source": "              }",
          "coverage": ""
        },
        "1095": {
          "source": "              else if( pendingRec.action === \"create\" ) {",
          "coverage": 1
        },
        "1096": {
          "source": "                // Add the pending create into the new dataset so it is not lost from the UI",
          "coverage": ""
        },
        "1097": {
          "source": "                self.consoleLog('updateNewDataFromInFlight - re adding pending create to incomming dataset');",
          "coverage": 1
        },
        "1098": {
          "source": "                var newPendingCreate = {",
          "coverage": 1
        },
        "1099": {
          "source": "                  data: pendingRec.post,",
          "coverage": ""
        },
        "1100": {
          "source": "                  hash: pendingRec.postHash",
          "coverage": ""
        },
        "1101": {
          "source": "                };",
          "coverage": ""
        },
        "1102": {
          "source": "                newData.records[pendingRec.uid] = newPendingCreate;",
          "coverage": 1
        },
        "1103": {
          "source": "              }",
          "coverage": ""
        },
        "1104": {
          "source": "            }",
          "coverage": ""
        },
        "1105": {
          "source": "          }",
          "coverage": ""
        },
        "1106": {
          "source": "        }",
          "coverage": ""
        },
        "1107": {
          "source": "      }",
          "coverage": ""
        },
        "1108": {
          "source": "    }",
          "coverage": ""
        },
        "1109": {
          "source": "  },",
          "coverage": ""
        },
        "1110": {
          "source": "",
          "coverage": ""
        },
        "1111": {
          "source": "  updateNewDataFromPending: function(dataset_id, dataset, newData) {",
          "coverage": ""
        },
        "1112": {
          "source": "    var pending = dataset.pending;",
          "coverage": 21
        },
        "1113": {
          "source": "",
          "coverage": ""
        },
        "1114": {
          "source": "    if( pending &amp;&amp; newData.records) {",
          "coverage": 21
        },
        "1115": {
          "source": "      for( var pendingHash in pending ) {",
          "coverage": 9
        },
        "1116": {
          "source": "        if( pending.hasOwnProperty(pendingHash) ) {",
          "coverage": 10
        },
        "1117": {
          "source": "          var pendingRec = pending[pendingHash];",
          "coverage": 10
        },
        "1118": {
          "source": "",
          "coverage": ""
        },
        "1119": {
          "source": "          if( pendingRec.inFlight === false ) {",
          "coverage": 10
        },
        "1120": {
          "source": "            self.consoleLog('updateNewDataFromPending - Found Non inFlight record -&gt; action=' + pendingRec.action +' :: uid=' + pendingRec.uid  + ' :: hash=' + pendingRec.hash);",
          "coverage": 5
        },
        "1121": {
          "source": "            var newRec = newData.records[pendingRec.uid];",
          "coverage": 5
        },
        "1122": {
          "source": "            if( pendingRec.action === \"update\" &amp;&amp; newRec) {",
          "coverage": 5
        },
        "1123": {
          "source": "              // Modify the new Record to have the updates from the pending record so the local dataset is consistent",
          "coverage": ""
        },
        "1124": {
          "source": "              newRec.data = pendingRec.post;",
          "coverage": 3
        },
        "1125": {
          "source": "              newRec.hash = pendingRec.postHash;",
          "coverage": 3
        },
        "1126": {
          "source": "            }",
          "coverage": ""
        },
        "1127": {
          "source": "            else if( pendingRec.action === \"delete\" &amp;&amp; newRec) {",
          "coverage": 2
        },
        "1128": {
          "source": "              // Remove the record from the new dataset so the local dataset is consistent",
          "coverage": ""
        },
        "1129": {
          "source": "              delete newData.records[pendingRec.uid];",
          "coverage": 1
        },
        "1130": {
          "source": "            }",
          "coverage": ""
        },
        "1131": {
          "source": "            else if( pendingRec.action === \"create\" ) {",
          "coverage": 1
        },
        "1132": {
          "source": "              // Add the pending create into the new dataset so it is not lost from the UI",
          "coverage": ""
        },
        "1133": {
          "source": "              self.consoleLog('updateNewDataFromPending - re adding pending create to incomming dataset');",
          "coverage": 1
        },
        "1134": {
          "source": "              var newPendingCreate = {",
          "coverage": 1
        },
        "1135": {
          "source": "                data: pendingRec.post,",
          "coverage": ""
        },
        "1136": {
          "source": "                hash: pendingRec.postHash",
          "coverage": ""
        },
        "1137": {
          "source": "              };",
          "coverage": ""
        },
        "1138": {
          "source": "              newData.records[pendingRec.uid] = newPendingCreate;",
          "coverage": 1
        },
        "1139": {
          "source": "            }",
          "coverage": ""
        },
        "1140": {
          "source": "          }",
          "coverage": ""
        },
        "1141": {
          "source": "        }",
          "coverage": ""
        },
        "1142": {
          "source": "      }",
          "coverage": ""
        },
        "1143": {
          "source": "    }",
          "coverage": ""
        },
        "1144": {
          "source": "  },",
          "coverage": ""
        },
        "1145": {
          "source": "",
          "coverage": ""
        },
        "1146": {
          "source": "  updateCrashedInFlightFromNewData: function(dataset_id, dataset, newData) {",
          "coverage": ""
        },
        "1147": {
          "source": "    var updateNotifications = {",
          "coverage": 21
        },
        "1148": {
          "source": "      applied: self.notifications.REMOTE_UPDATE_APPLIED,",
          "coverage": ""
        },
        "1149": {
          "source": "      failed: self.notifications.REMOTE_UPDATE_FAILED,",
          "coverage": ""
        },
        "1150": {
          "source": "      collisions: self.notifications.COLLISION_DETECTED",
          "coverage": ""
        },
        "1151": {
          "source": "    };",
          "coverage": ""
        },
        "1152": {
          "source": "",
          "coverage": ""
        },
        "1153": {
          "source": "    var pending = dataset.pending;",
          "coverage": 21
        },
        "1154": {
          "source": "    var resolvedCrashes = {};",
          "coverage": 21
        },
        "1155": {
          "source": "    var pendingHash;",
          "coverage": 21
        },
        "1156": {
          "source": "    var pendingRec;",
          "coverage": 21
        },
        "1157": {
          "source": "",
          "coverage": ""
        },
        "1158": {
          "source": "",
          "coverage": ""
        },
        "1159": {
          "source": "    if( pending ) {",
          "coverage": 21
        },
        "1160": {
          "source": "      for( pendingHash in pending ) {",
          "coverage": 21
        },
        "1161": {
          "source": "        if( pending.hasOwnProperty(pendingHash) ) {",
          "coverage": 21
        },
        "1162": {
          "source": "          pendingRec = pending[pendingHash];",
          "coverage": 21
        },
        "1163": {
          "source": "",
          "coverage": ""
        },
        "1164": {
          "source": "          if( pendingRec.inFlight &amp;&amp; pendingRec.crashed) {",
          "coverage": 21
        },
        "1165": {
          "source": "            self.consoleLog('updateCrashedInFlightFromNewData - Found crashed inFlight pending record uid=' + pendingRec.uid + ' :: hash=' + pendingRec.hash );",
          "coverage": 7
        },
        "1166": {
          "source": "            if( newData &amp;&amp; newData.updates &amp;&amp; newData.updates.hashes) {",
          "coverage": 7
        },
        "1167": {
          "source": "",
          "coverage": ""
        },
        "1168": {
          "source": "              // Check if the updates received contain any info about the crashed in flight update",
          "coverage": ""
        },
        "1169": {
          "source": "              var crashedUpdate = newData.updates.hashes[pendingHash];",
          "coverage": 5
        },
        "1170": {
          "source": "              if( crashedUpdate ) {",
          "coverage": 5
        },
        "1171": {
          "source": "                // We have found an update on one of our in flight crashed records",
          "coverage": ""
        },
        "1172": {
          "source": "",
          "coverage": ""
        },
        "1173": {
          "source": "                resolvedCrashes[crashedUpdate.uid] = crashedUpdate;",
          "coverage": 2
        },
        "1174": {
          "source": "",
          "coverage": ""
        },
        "1175": {
          "source": "                self.consoleLog('updateCrashedInFlightFromNewData - Resolving status for crashed inflight pending record ' + JSON.stringify(crashedUpdate));",
          "coverage": 2
        },
        "1176": {
          "source": "",
          "coverage": ""
        },
        "1177": {
          "source": "                if( crashedUpdate.type === 'failed' ) {",
          "coverage": 2
        },
        "1178": {
          "source": "                  // Crashed update failed - revert local dataset",
          "coverage": ""
        },
        "1179": {
          "source": "                  if( crashedUpdate.action === 'create' ) {",
          "coverage": 2
        },
        "1180": {
          "source": "                    self.consoleLog('updateCrashedInFlightFromNewData - Deleting failed create from dataset');",
          "coverage": 1
        },
        "1181": {
          "source": "                    delete dataset.data[crashedUpdate.uid];",
          "coverage": 1
        },
        "1182": {
          "source": "                  }",
          "coverage": ""
        },
        "1183": {
          "source": "                  else if ( crashedUpdate.action === 'update' || crashedUpdate.action === 'delete' ) {",
          "coverage": 1
        },
        "1184": {
          "source": "                    self.consoleLog('updateCrashedInFlightFromNewData - Reverting failed ' + crashedUpdate.action + ' in dataset');",
          "coverage": 1
        },
        "1185": {
          "source": "                    dataset.data[crashedUpdate.uid] = {",
          "coverage": 1
        },
        "1186": {
          "source": "                      data : pendingRec.pre,",
          "coverage": ""
        },
        "1187": {
          "source": "                      hash : pendingRec.preHash",
          "coverage": ""
        },
        "1188": {
          "source": "                    };",
          "coverage": ""
        },
        "1189": {
          "source": "                  }",
          "coverage": ""
        },
        "1190": {
          "source": "                }",
          "coverage": ""
        },
        "1191": {
          "source": "",
          "coverage": ""
        },
        "1192": {
          "source": "                delete pending[pendingHash];",
          "coverage": 2
        },
        "1193": {
          "source": "                self.doNotify(dataset_id, crashedUpdate.uid, updateNotifications[crashedUpdate.type], crashedUpdate);",
          "coverage": 2
        },
        "1194": {
          "source": "              }",
          "coverage": ""
        },
        "1195": {
          "source": "              else {",
          "coverage": ""
        },
        "1196": {
          "source": "                // No word on our crashed update - increment a counter to reflect another sync that did not give us",
          "coverage": ""
        },
        "1197": {
          "source": "                // any update on our crashed record.",
          "coverage": ""
        },
        "1198": {
          "source": "                if( pendingRec.crashedCount ) {",
          "coverage": 3
        },
        "1199": {
          "source": "                  pendingRec.crashedCount++;",
          "coverage": 1
        },
        "1200": {
          "source": "                }",
          "coverage": ""
        },
        "1201": {
          "source": "                else {",
          "coverage": ""
        },
        "1202": {
          "source": "                  pendingRec.crashedCount = 1;",
          "coverage": 2
        },
        "1203": {
          "source": "                }",
          "coverage": ""
        },
        "1204": {
          "source": "              }",
          "coverage": ""
        },
        "1205": {
          "source": "            }",
          "coverage": ""
        },
        "1206": {
          "source": "            else {",
          "coverage": ""
        },
        "1207": {
          "source": "              // No word on our crashed update - increment a counter to reflect another sync that did not give us",
          "coverage": ""
        },
        "1208": {
          "source": "              // any update on our crashed record.",
          "coverage": ""
        },
        "1209": {
          "source": "              if( pendingRec.crashedCount ) {",
          "coverage": 2
        },
        "1210": {
          "source": "                pendingRec.crashedCount++;",
          "coverage": 1
        },
        "1211": {
          "source": "              }",
          "coverage": ""
        },
        "1212": {
          "source": "              else {",
          "coverage": ""
        },
        "1213": {
          "source": "                pendingRec.crashedCount = 1;",
          "coverage": 1
        },
        "1214": {
          "source": "              }",
          "coverage": ""
        },
        "1215": {
          "source": "            }",
          "coverage": ""
        },
        "1216": {
          "source": "          }",
          "coverage": ""
        },
        "1217": {
          "source": "        }",
          "coverage": ""
        },
        "1218": {
          "source": "      }",
          "coverage": ""
        },
        "1219": {
          "source": "",
          "coverage": ""
        },
        "1220": {
          "source": "      for( pendingHash in pending ) {",
          "coverage": 21
        },
        "1221": {
          "source": "        if( pending.hasOwnProperty(pendingHash) ) {",
          "coverage": 19
        },
        "1222": {
          "source": "          pendingRec = pending[pendingHash];",
          "coverage": 19
        },
        "1223": {
          "source": "",
          "coverage": ""
        },
        "1224": {
          "source": "          if( pendingRec.inFlight &amp;&amp; pendingRec.crashed) {",
          "coverage": 19
        },
        "1225": {
          "source": "            if( pendingRec.crashedCount &gt; dataset.config.crashed_count_wait ) {",
          "coverage": 5
        },
        "1226": {
          "source": "              self.consoleLog('updateCrashedInFlightFromNewData - Crashed inflight pending record has reached crashed_count_wait limit : ' + JSON.stringify(pendingRec));",
          "coverage": 2
        },
        "1227": {
          "source": "              if( dataset.config.resend_crashed_updates ) {",
          "coverage": 2
        },
        "1228": {
          "source": "                self.consoleLog('updateCrashedInFlightFromNewData - Retryig crashed inflight pending record');",
          "coverage": 1
        },
        "1229": {
          "source": "                pendingRec.crashed = false;",
          "coverage": 1
        },
        "1230": {
          "source": "                pendingRec.inFlight = false;",
          "coverage": 1
        },
        "1231": {
          "source": "              }",
          "coverage": ""
        },
        "1232": {
          "source": "              else {",
          "coverage": ""
        },
        "1233": {
          "source": "                self.consoleLog('updateCrashedInFlightFromNewData - Deleting crashed inflight pending record');",
          "coverage": 1
        },
        "1234": {
          "source": "                delete pending[pendingHash];",
          "coverage": 1
        },
        "1235": {
          "source": "              }",
          "coverage": ""
        },
        "1236": {
          "source": "            }",
          "coverage": ""
        },
        "1237": {
          "source": "          }",
          "coverage": ""
        },
        "1238": {
          "source": "        }",
          "coverage": ""
        },
        "1239": {
          "source": "      }",
          "coverage": ""
        },
        "1240": {
          "source": "    }",
          "coverage": ""
        },
        "1241": {
          "source": "  },",
          "coverage": ""
        },
        "1242": {
          "source": "",
          "coverage": ""
        },
        "1243": {
          "source": "  updateDelayedFromNewData: function(dataset_id, dataset, newData){",
          "coverage": ""
        },
        "1244": {
          "source": "    var pending = dataset.pending;",
          "coverage": 21
        },
        "1245": {
          "source": "    var pendingHash;",
          "coverage": 21
        },
        "1246": {
          "source": "    var pendingRec;",
          "coverage": 21
        },
        "1247": {
          "source": "    if(pending){",
          "coverage": 21
        },
        "1248": {
          "source": "      for( pendingHash in pending ){",
          "coverage": 21
        },
        "1249": {
          "source": "        if( pending.hasOwnProperty(pendingHash) ){",
          "coverage": 18
        },
        "1250": {
          "source": "          pendingRec = pending[pendingHash];",
          "coverage": 18
        },
        "1251": {
          "source": "          if( pendingRec.delayed &amp;&amp; pendingRec.waiting ){",
          "coverage": 18
        },
        "1252": {
          "source": "            self.consoleLog('updateDelayedFromNewData - Found delayed pending record uid=' + pendingRec.uid + ' :: hash=' + pendingRec.hash + ' :: waiting=' + pendingRec.waiting);",
          "coverage": 3
        },
        "1253": {
          "source": "            if( newData &amp;&amp; newData.updates &amp;&amp; newData.updates.hashes ){",
          "coverage": 3
        },
        "1254": {
          "source": "              var waitingRec = newData.updates.hashes[pendingRec.waiting];",
          "coverage": 2
        },
        "1255": {
          "source": "              if(waitingRec){",
          "coverage": 2
        },
        "1256": {
          "source": "                self.consoleLog('updateDelayedFromNewData - Waiting pending record is resolved rec=' + JSON.stringify(waitingRec));",
          "coverage": 2
        },
        "1257": {
          "source": "                pendingRec.delayed = false;",
          "coverage": 2
        },
        "1258": {
          "source": "                pendingRec.waiting = undefined;",
          "coverage": 2
        },
        "1259": {
          "source": "              }",
          "coverage": ""
        },
        "1260": {
          "source": "            }",
          "coverage": ""
        },
        "1261": {
          "source": "          }",
          "coverage": ""
        },
        "1262": {
          "source": "        }",
          "coverage": ""
        },
        "1263": {
          "source": "      }",
          "coverage": ""
        },
        "1264": {
          "source": "    }",
          "coverage": ""
        },
        "1265": {
          "source": "  },",
          "coverage": ""
        },
        "1266": {
          "source": "",
          "coverage": ""
        },
        "1267": {
          "source": "  updateMetaFromNewData: function(dataset_id, dataset, newData){",
          "coverage": ""
        },
        "1268": {
          "source": "    var meta = dataset.meta;",
          "coverage": 21
        },
        "1269": {
          "source": "    if(meta &amp;&amp; newData &amp;&amp; newData.updates &amp;&amp; newData.updates.hashes){",
          "coverage": 21
        },
        "1270": {
          "source": "      for(var uid in meta){",
          "coverage": 11
        },
        "1271": {
          "source": "        if(meta.hasOwnProperty(uid)){",
          "coverage": 42
        },
        "1272": {
          "source": "          var metadata = meta[uid];",
          "coverage": 42
        },
        "1273": {
          "source": "          var pendingHash = metadata.pendingUid;",
          "coverage": 42
        },
        "1274": {
          "source": "          var previousPendingHash = metadata.previousPendingUid;",
          "coverage": 42
        },
        "1275": {
          "source": "          self.consoleLog(\"updateMetaFromNewData - Found metadata with uid = \" + uid + \" :: pendingHash = \" + pendingHash + \" :: previousPendingHash =\" + previousPendingHash);",
          "coverage": 42
        },
        "1276": {
          "source": "          var previousPendingResolved = true;",
          "coverage": 42
        },
        "1277": {
          "source": "          var pendingResolved = true;",
          "coverage": 42
        },
        "1278": {
          "source": "          if(previousPendingHash){",
          "coverage": 42
        },
        "1279": {
          "source": "            //we have previous pending in meta data, see if it's resolved",
          "coverage": ""
        },
        "1280": {
          "source": "            previousPendingResolved = false;",
          "coverage": 28
        },
        "1281": {
          "source": "            var resolved = newData.updates.hashes[previousPendingHash];",
          "coverage": 28
        },
        "1282": {
          "source": "            if(resolved){",
          "coverage": 28
        },
        "1283": {
          "source": "              self.consoleLog(\"updateMetaFromNewData - Found previousPendingUid in meta data resolved - resolved = \" + JSON.stringify(resolved));",
          "coverage": 2
        },
        "1284": {
          "source": "              //the previous pending is resolved in the cloud",
          "coverage": ""
        },
        "1285": {
          "source": "              metadata.previousPendingUid = undefined;",
          "coverage": 2
        },
        "1286": {
          "source": "              previousPendingResolved = true;",
          "coverage": 2
        },
        "1287": {
          "source": "            }",
          "coverage": ""
        },
        "1288": {
          "source": "          }",
          "coverage": ""
        },
        "1289": {
          "source": "          if(pendingHash){",
          "coverage": 42
        },
        "1290": {
          "source": "            //we have current pending in meta data, see if it's resolved",
          "coverage": ""
        },
        "1291": {
          "source": "            pendingResolved = false;",
          "coverage": 42
        },
        "1292": {
          "source": "            var resolved = newData.updates.hashes[pendingHash];",
          "coverage": 42
        },
        "1293": {
          "source": "            if(resolved){",
          "coverage": 42
        },
        "1294": {
          "source": "              self.consoleLog(\"updateMetaFromNewData - Found pendingUid in meta data resolved - resolved = \" + JSON.stringify(resolved));",
          "coverage": 5
        },
        "1295": {
          "source": "              //the current pending is resolved in the cloud",
          "coverage": ""
        },
        "1296": {
          "source": "              metadata.pendingUid = undefined;",
          "coverage": 5
        },
        "1297": {
          "source": "              pendingResolved = true;",
          "coverage": 5
        },
        "1298": {
          "source": "            }",
          "coverage": ""
        },
        "1299": {
          "source": "          }",
          "coverage": ""
        },
        "1300": {
          "source": "",
          "coverage": ""
        },
        "1301": {
          "source": "          if(previousPendingResolved &amp;&amp; pendingResolved){",
          "coverage": 42
        },
        "1302": {
          "source": "            self.consoleLog(\"updateMetaFromNewData - both previous and current pendings are resolved for meta data with uid \" + uid + \". Delete it.\");",
          "coverage": 5
        },
        "1303": {
          "source": "            //all pendings are resolved, the entry can be removed from meta data",
          "coverage": ""
        },
        "1304": {
          "source": "            delete meta[uid];",
          "coverage": 5
        },
        "1305": {
          "source": "          }",
          "coverage": ""
        },
        "1306": {
          "source": "        }",
          "coverage": ""
        },
        "1307": {
          "source": "      }",
          "coverage": ""
        },
        "1308": {
          "source": "    }",
          "coverage": ""
        },
        "1309": {
          "source": "  },",
          "coverage": ""
        },
        "1310": {
          "source": "",
          "coverage": ""
        },
        "1311": {
          "source": "",
          "coverage": ""
        },
        "1312": {
          "source": "  markInFlightAsCrashed : function(dataset) {",
          "coverage": ""
        },
        "1313": {
          "source": "    var pending = dataset.pending;",
          "coverage": 8
        },
        "1314": {
          "source": "    var pendingHash;",
          "coverage": 8
        },
        "1315": {
          "source": "    var pendingRec;",
          "coverage": 8
        },
        "1316": {
          "source": "",
          "coverage": ""
        },
        "1317": {
          "source": "    if( pending ) {",
          "coverage": 8
        },
        "1318": {
          "source": "      var crashedRecords = {};",
          "coverage": 8
        },
        "1319": {
          "source": "      for( pendingHash in pending ) {",
          "coverage": 8
        },
        "1320": {
          "source": "        if( pending.hasOwnProperty(pendingHash) ) {",
          "coverage": 9
        },
        "1321": {
          "source": "          pendingRec = pending[pendingHash];",
          "coverage": 9
        },
        "1322": {
          "source": "",
          "coverage": ""
        },
        "1323": {
          "source": "          if( pendingRec.inFlight ) {",
          "coverage": 9
        },
        "1324": {
          "source": "            self.consoleLog('Marking in flight pending record as crashed : ' + pendingHash);",
          "coverage": 7
        },
        "1325": {
          "source": "            pendingRec.crashed = true;",
          "coverage": 7
        },
        "1326": {
          "source": "            crashedRecords[pendingRec.uid] = pendingRec;",
          "coverage": 7
        },
        "1327": {
          "source": "          }",
          "coverage": ""
        },
        "1328": {
          "source": "        }",
          "coverage": ""
        },
        "1329": {
          "source": "      }",
          "coverage": ""
        },
        "1330": {
          "source": "    }",
          "coverage": ""
        },
        "1331": {
          "source": "  },",
          "coverage": ""
        },
        "1332": {
          "source": "",
          "coverage": ""
        },
        "1333": {
          "source": "  consoleLog: function(msg) {",
          "coverage": ""
        },
        "1334": {
          "source": "    if( self.config.do_console_log ) {",
          "coverage": 306
        },
        "1335": {
          "source": "      console.log(msg);",
          "coverage": 305
        },
        "1336": {
          "source": "    }",
          "coverage": ""
        },
        "1337": {
          "source": "  }",
          "coverage": ""
        },
        "1338": {
          "source": "};",
          "coverage": ""
        },
        "1339": {
          "source": "",
          "coverage": ""
        },
        "1340": {
          "source": "(function() {",
          "coverage": 2
        },
        "1341": {
          "source": "  self.config = self.defaults;",
          "coverage": 2
        },
        "1342": {
          "source": "  //Initialse the sync service with default config",
          "coverage": ""
        },
        "1343": {
          "source": "  //self.init({});",
          "coverage": ""
        },
        "1344": {
          "source": "})();",
          "coverage": ""
        },
        "1345": {
          "source": "",
          "coverage": ""
        },
        "1346": {
          "source": "module.exports = {",
          "coverage": 2
        },
        "1347": {
          "source": "  init: self.init,",
          "coverage": ""
        },
        "1348": {
          "source": "  manage: self.manage,",
          "coverage": ""
        },
        "1349": {
          "source": "  notify: self.notify,",
          "coverage": ""
        },
        "1350": {
          "source": "  doList: self.list,",
          "coverage": ""
        },
        "1351": {
          "source": "  doCreate: self.create,",
          "coverage": ""
        },
        "1352": {
          "source": "  doRead: self.read,",
          "coverage": ""
        },
        "1353": {
          "source": "  doUpdate: self.update,",
          "coverage": ""
        },
        "1354": {
          "source": "  doDelete: self['delete'],",
          "coverage": ""
        },
        "1355": {
          "source": "  listCollisions: self.listCollisions,",
          "coverage": ""
        },
        "1356": {
          "source": "  removeCollision: self.removeCollision,",
          "coverage": ""
        },
        "1357": {
          "source": "  getPending : self.getPending,",
          "coverage": ""
        },
        "1358": {
          "source": "  clearPending : self.clearPending,",
          "coverage": ""
        },
        "1359": {
          "source": "  getDataset : self.getDataSet,",
          "coverage": ""
        },
        "1360": {
          "source": "  getQueryParams: self.getQueryParams,",
          "coverage": ""
        },
        "1361": {
          "source": "  setQueryParams: self.setQueryParams,",
          "coverage": ""
        },
        "1362": {
          "source": "  getMetaData: self.getMetaData,",
          "coverage": ""
        },
        "1363": {
          "source": "  setMetaData: self.setMetaData,",
          "coverage": ""
        },
        "1364": {
          "source": "  getConfig: self.getConfig,",
          "coverage": ""
        },
        "1365": {
          "source": "  setConfig: self.setConfig,",
          "coverage": ""
        },
        "1366": {
          "source": "  startSync: self.startSync,",
          "coverage": ""
        },
        "1367": {
          "source": "  stopSync: self.stopSync,",
          "coverage": ""
        },
        "1368": {
          "source": "  doSync: self.doSync,",
          "coverage": ""
        },
        "1369": {
          "source": "  forceSync: self.forceSync,",
          "coverage": ""
        },
        "1370": {
          "source": "  generateHash: self.generateHash,",
          "coverage": ""
        },
        "1371": {
          "source": "  loadDataSet: self.loadDataSet,",
          "coverage": ""
        },
        "1372": {
          "source": "  checkHasCustomSync: self.checkHasCustomSync",
          "coverage": ""
        },
        "1373": {
          "source": "};",
          "coverage": ""
        }
      }
    },
    {
      "filename": "modules/uuid.js",
      "coverage": 100,
      "hits": 9,
      "misses": 0,
      "sloc": 9,
      "source": {
        "1": {
          "source": "module.exports = {",
          "coverage": 2
        },
        "2": {
          "source": "  createUUID : function () {",
          "coverage": ""
        },
        "3": {
          "source": "    //from http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript",
          "coverage": ""
        },
        "4": {
          "source": "    //based on RFC 4122, section 4.4 (Algorithms for creating UUID from truely random pr pseudo-random number)",
          "coverage": ""
        },
        "5": {
          "source": "    var s = [];",
          "coverage": 1
        },
        "6": {
          "source": "    var hexDigitals = \"0123456789ABCDEF\";",
          "coverage": 1
        },
        "7": {
          "source": "    for (var i = 0; i &lt; 32; i++) {",
          "coverage": 1
        },
        "8": {
          "source": "      s[i] = hexDigitals.substr(Math.floor(Math.random() * 0x10), 1);",
          "coverage": 32
        },
        "9": {
          "source": "    }",
          "coverage": ""
        },
        "10": {
          "source": "    s[12] = \"4\";",
          "coverage": 1
        },
        "11": {
          "source": "    s[16] = hexDigitals.substr((s[16] &amp; 0x3) | 0x8, 1);",
          "coverage": 1
        },
        "12": {
          "source": "    var uuid = s.join(\"\");",
          "coverage": 1
        },
        "13": {
          "source": "    return uuid;",
          "coverage": 1
        },
        "14": {
          "source": "  }",
          "coverage": ""
        },
        "15": {
          "source": "};",
          "coverage": ""
        }
      }
    },
    {
      "filename": "modules/waitForCloud.js",
      "coverage": 85.71428571428571,
      "hits": 42,
      "misses": 7,
      "sloc": 49,
      "source": {
        "1": {
          "source": "var initializer = require(\"./initializer\");",
          "coverage": 2
        },
        "2": {
          "source": "var events = require(\"./events\");",
          "coverage": 2
        },
        "3": {
          "source": "var CloudHost = require(\"./hosts\");",
          "coverage": 2
        },
        "4": {
          "source": "var constants = require(\"./constants\");",
          "coverage": 2
        },
        "5": {
          "source": "var logger = require(\"./logger\");",
          "coverage": 2
        },
        "6": {
          "source": "",
          "coverage": ""
        },
        "7": {
          "source": "",
          "coverage": ""
        },
        "8": {
          "source": "//the cloud configurations",
          "coverage": ""
        },
        "9": {
          "source": "var cloud_host;",
          "coverage": 2
        },
        "10": {
          "source": "",
          "coverage": ""
        },
        "11": {
          "source": "var is_initialising = false;",
          "coverage": 2
        },
        "12": {
          "source": "var is_cloud_ready = false;",
          "coverage": 2
        },
        "13": {
          "source": "var init_error = null;",
          "coverage": 2
        },
        "14": {
          "source": "",
          "coverage": ""
        },
        "15": {
          "source": "",
          "coverage": ""
        },
        "16": {
          "source": "var ready = function(cb){",
          "coverage": 2
        },
        "17": {
          "source": "  if(is_cloud_ready){",
          "coverage": 58
        },
        "18": {
          "source": "    return cb(null, {host: getCloudHostUrl()});",
          "coverage": 49
        },
        "19": {
          "source": "  } else {",
          "coverage": ""
        },
        "20": {
          "source": "    events.once(constants.INIT_EVENT, function(err, host){",
          "coverage": 9
        },
        "21": {
          "source": "      return cb(err, host);",
          "coverage": 9
        },
        "22": {
          "source": "    });",
          "coverage": ""
        },
        "23": {
          "source": "    if(!is_initialising){",
          "coverage": 9
        },
        "24": {
          "source": "      is_initialising = true;",
          "coverage": 9
        },
        "25": {
          "source": "      initializer.init(function(err, initRes){",
          "coverage": 9
        },
        "26": {
          "source": "        is_initialising = false;",
          "coverage": 9
        },
        "27": {
          "source": "        if(err){",
          "coverage": 9
        },
        "28": {
          "source": "          init_error = err;",
          "coverage": 0
        },
        "29": {
          "source": "          return events.emit(constants.INIT_EVENT, err);",
          "coverage": 0
        },
        "30": {
          "source": "        } else {",
          "coverage": ""
        },
        "31": {
          "source": "          init_error = null;",
          "coverage": 9
        },
        "32": {
          "source": "          is_cloud_ready = true;",
          "coverage": 9
        },
        "33": {
          "source": "          cloud_host = new CloudHost(initRes.cloud);",
          "coverage": 9
        },
        "34": {
          "source": "          return events.emit(constants.INIT_EVENT, null, {host: getCloudHostUrl()});",
          "coverage": 9
        },
        "35": {
          "source": "        }",
          "coverage": ""
        },
        "36": {
          "source": "      });",
          "coverage": ""
        },
        "37": {
          "source": "    }",
          "coverage": ""
        },
        "38": {
          "source": "  }",
          "coverage": ""
        },
        "39": {
          "source": "}",
          "coverage": ""
        },
        "40": {
          "source": "",
          "coverage": ""
        },
        "41": {
          "source": "var getCloudHost = function(){",
          "coverage": 2
        },
        "42": {
          "source": "  return cloud_host;",
          "coverage": 47
        },
        "43": {
          "source": "}",
          "coverage": ""
        },
        "44": {
          "source": "",
          "coverage": ""
        },
        "45": {
          "source": "var getCloudHostUrl = function(){",
          "coverage": 2
        },
        "46": {
          "source": "  if(typeof cloud_host !== \"undefined\"){",
          "coverage": 65
        },
        "47": {
          "source": "    var appProps = require(\"./appProps\").getAppProps();",
          "coverage": 65
        },
        "48": {
          "source": "    return cloud_host.getHost(appProps.mode);",
          "coverage": 65
        },
        "49": {
          "source": "  } else {",
          "coverage": ""
        },
        "50": {
          "source": "    return undefined;",
          "coverage": 0
        },
        "51": {
          "source": "  }",
          "coverage": ""
        },
        "52": {
          "source": "}",
          "coverage": ""
        },
        "53": {
          "source": "",
          "coverage": ""
        },
        "54": {
          "source": "var isReady = function(){",
          "coverage": 2
        },
        "55": {
          "source": "  return is_cloud_ready;",
          "coverage": 4
        },
        "56": {
          "source": "}",
          "coverage": ""
        },
        "57": {
          "source": "",
          "coverage": ""
        },
        "58": {
          "source": "var getInitError = function(){",
          "coverage": 2
        },
        "59": {
          "source": "  return init_error;",
          "coverage": 0
        },
        "60": {
          "source": "}",
          "coverage": ""
        },
        "61": {
          "source": "",
          "coverage": ""
        },
        "62": {
          "source": "//for test",
          "coverage": ""
        },
        "63": {
          "source": "var reset = function(){",
          "coverage": 2
        },
        "64": {
          "source": "  is_cloud_ready = false;",
          "coverage": 7
        },
        "65": {
          "source": "  is_initialising = false;",
          "coverage": 7
        },
        "66": {
          "source": "  cloud_host = undefined;",
          "coverage": 7
        },
        "67": {
          "source": "  init_error = undefined;",
          "coverage": 7
        },
        "68": {
          "source": "  ready(function(){",
          "coverage": 7
        },
        "69": {
          "source": "    ",
          "coverage": ""
        },
        "70": {
          "source": "  });",
          "coverage": ""
        },
        "71": {
          "source": "}",
          "coverage": ""
        },
        "72": {
          "source": "",
          "coverage": ""
        },
        "73": {
          "source": "ready(function(error, host){",
          "coverage": 2
        },
        "74": {
          "source": "  if(error){",
          "coverage": 2
        },
        "75": {
          "source": "    if(error.message !== \"app_config_missing\"){",
          "coverage": 0
        },
        "76": {
          "source": "      logger.error(\"Failed to initialise fh.\");",
          "coverage": 0
        },
        "77": {
          "source": "    } else {",
          "coverage": ""
        },
        "78": {
          "source": "      logger.info(\"No fh config file\");",
          "coverage": 0
        },
        "79": {
          "source": "    }",
          "coverage": ""
        },
        "80": {
          "source": "  } else {",
          "coverage": ""
        },
        "81": {
          "source": "    logger.info(\"fh cloud is ready\");",
          "coverage": 2
        },
        "82": {
          "source": "  }",
          "coverage": ""
        },
        "83": {
          "source": "});",
          "coverage": ""
        },
        "84": {
          "source": "",
          "coverage": ""
        },
        "85": {
          "source": "module.exports = {",
          "coverage": 2
        },
        "86": {
          "source": "  ready: ready,",
          "coverage": ""
        },
        "87": {
          "source": "  isReady: isReady,",
          "coverage": ""
        },
        "88": {
          "source": "  getCloudHost: getCloudHost,",
          "coverage": ""
        },
        "89": {
          "source": "  getCloudHostUrl: getCloudHostUrl,",
          "coverage": ""
        },
        "90": {
          "source": "  getInitError: getInitError,",
          "coverage": ""
        },
        "91": {
          "source": "  reset: reset",
          "coverage": ""
        },
        "92": {
          "source": "}",
          "coverage": ""
        }
      }
    }
  ],
  "stats": {
    "suites": 12,
    "tests": 46,
    "passes": 46,
    "pending": 0,
    "failures": 0,
    "start": "2014-04-24T16:02:46.044Z",
    "end": "2014-04-24T16:03:02.674Z",
    "duration": 16630
  },
  "tests": [
    {
      "title": "should call the success callback",
      "fullTitle": "test ajax module should call the success callback",
      "duration": 14
    },
    {
      "title": "should call the error callback",
      "fullTitle": "test ajax module should call the error callback",
      "duration": 4
    },
    {
      "title": "AES keygen",
      "fullTitle": "test security APIs AES keygen",
      "duration": 2
    },
    {
      "title": "AES encrypt/decrypt",
      "fullTitle": "test security APIs AES encrypt/decrypt",
      "duration": 3
    },
    {
      "title": "RSA encrypt",
      "fullTitle": "test security APIs RSA encrypt",
      "duration": 18
    },
    {
      "title": "hash",
      "fullTitle": "test security APIs hash",
      "duration": 3
    },
    {
      "title": "should emit fhinit events",
      "fullTitle": "test all cloud related test auto initialisation should emit fhinit events",
      "duration": 6
    },
    {
      "title": "act call should success",
      "fullTitle": "test all cloud related test act/cloud call act call should success",
      "duration": 8
    },
    {
      "title": "should work with cloud call",
      "fullTitle": "test all cloud related test act/cloud call should work with cloud call",
      "duration": 3
    },
    {
      "title": "auth call should work",
      "fullTitle": "test all cloud related test auth call auth call should work",
      "duration": 4
    },
    {
      "title": "mbaas call should call",
      "fullTitle": "test all cloud related test mbaas call mbaas call should call",
      "duration": 3
    },
    {
      "title": "$fh.init should initialise the app",
      "fullTitle": "test legacy app props/app init test legacy app init $fh.init should initialise the app",
      "duration": 7
    },
    {
      "title": "should emit fhinit events",
      "fullTitle": "test legacy app props/app init test auto initialisation should emit fhinit events",
      "duration": 3
    },
    {
      "title": "sync.manage",
      "fullTitle": "test sync framework offline sync.manage",
      "duration": 1
    },
    {
      "title": "sync.setConfig/getConfig",
      "fullTitle": "test sync framework offline sync.setConfig/getConfig",
      "duration": 1
    },
    {
      "title": "sync.getQueryParams/setQueryParams",
      "fullTitle": "test sync framework offline sync.getQueryParams/setQueryParams",
      "duration": 0
    },
    {
      "title": "sync.getMetaData/setMetaData",
      "fullTitle": "test sync framework offline sync.getMetaData/setMetaData",
      "duration": 0
    },
    {
      "title": "sync.notify",
      "fullTitle": "test sync framework offline sync.notify",
      "duration": 604
    },
    {
      "title": "sync.doCreate",
      "fullTitle": "test sync framework offline sync.doCreate",
      "duration": 10
    },
    {
      "title": "sync.doUpdate",
      "fullTitle": "test sync framework offline sync.doUpdate",
      "duration": 19
    },
    {
      "title": "sync.doList success",
      "fullTitle": "test sync framework offline sync.doList success",
      "duration": 2
    },
    {
      "title": "sync.doList fail",
      "fullTitle": "test sync framework offline sync.doList fail",
      "duration": 0
    },
    {
      "title": "sync.doRead success",
      "fullTitle": "test sync framework offline sync.doRead success",
      "duration": 1
    },
    {
      "title": "sync.doRead fail",
      "fullTitle": "test sync framework offline sync.doRead fail",
      "duration": 0
    },
    {
      "title": "sync.getPending",
      "fullTitle": "test sync framework offline sync.getPending",
      "duration": 0
    },
    {
      "title": "sync.stopSync/startSync",
      "fullTitle": "test sync framework offline sync.stopSync/startSync",
      "duration": 2007
    },
    {
      "title": "sync.doDelete",
      "fullTitle": "test sync framework offline sync.doDelete",
      "duration": 3
    },
    {
      "title": "sync.doSync",
      "fullTitle": "test sync framework offline sync.doSync",
      "duration": 505
    },
    {
      "title": "sync.forceSync",
      "fullTitle": "test sync framework offline sync.forceSync",
      "duration": 507
    },
    {
      "title": "test failures",
      "fullTitle": "test sync framework offline test failures",
      "duration": 3
    },
    {
      "title": "load initial dataset from remote",
      "fullTitle": "test sync framework online with fake XMLHttpRequest load initial dataset from remote",
      "duration": 506
    },
    {
      "title": "try create a new record",
      "fullTitle": "test sync framework online with fake XMLHttpRequest try create a new record",
      "duration": 1012
    },
    {
      "title": "try to update an existing record ",
      "fullTitle": "test sync framework online with fake XMLHttpRequest try to update an existing record ",
      "duration": 2020
    },
    {
      "title": "test create & delete",
      "fullTitle": "test sync framework online with fake XMLHttpRequest test create & delete",
      "duration": 3
    },
    {
      "title": "test remote data change",
      "fullTitle": "test sync framework online with fake XMLHttpRequest test remote data change",
      "duration": 511
    },
    {
      "title": "test delete existing data",
      "fullTitle": "test sync framework online with fake XMLHttpRequest test delete existing data",
      "duration": 517
    },
    {
      "title": "test update pending data",
      "fullTitle": "test sync framework online with fake XMLHttpRequest test update pending data",
      "duration": 507
    },
    {
      "title": "test create pending data",
      "fullTitle": "test sync framework online with fake XMLHttpRequest test create pending data",
      "duration": 506
    },
    {
      "title": "test updateNewDataFromInFlight create/update",
      "fullTitle": "test sync framework online with fake XMLHttpRequest test updateNewDataFromInFlight create/update",
      "duration": 1520
    },
    {
      "title": "test updateNewDataFromPending",
      "fullTitle": "test sync framework online with fake XMLHttpRequest test updateNewDataFromPending",
      "duration": 1013
    },
    {
      "title": "test updateCrashedInFlightFromNewData create",
      "fullTitle": "test sync framework online with fake XMLHttpRequest test updateCrashedInFlightFromNewData create",
      "duration": 2533
    },
    {
      "title": "test updateCrashedInFlightFromNewData update",
      "fullTitle": "test sync framework online with fake XMLHttpRequest test updateCrashedInFlightFromNewData update",
      "duration": 1013
    },
    {
      "title": "test updateCrashedInFlightFromNewData resend",
      "fullTitle": "test sync framework online with fake XMLHttpRequest test updateCrashedInFlightFromNewData resend",
      "duration": 1012
    },
    {
      "title": "test listCollisions",
      "fullTitle": "test sync framework online with fake XMLHttpRequest test listCollisions",
      "duration": 5
    },
    {
      "title": "test removeCollision",
      "fullTitle": "test sync framework online with fake XMLHttpRequest test removeCollision",
      "duration": 3
    },
    {
      "title": "test checkHasCustomSync",
      "fullTitle": "test sync framework online with fake XMLHttpRequest test checkHasCustomSync",
      "duration": 4
    }
  ],
  "failures": [],
  "passes": [
    {
      "title": "should call the success callback",
      "fullTitle": "test ajax module should call the success callback",
      "duration": 14
    },
    {
      "title": "should call the error callback",
      "fullTitle": "test ajax module should call the error callback",
      "duration": 4
    },
    {
      "title": "AES keygen",
      "fullTitle": "test security APIs AES keygen",
      "duration": 2
    },
    {
      "title": "AES encrypt/decrypt",
      "fullTitle": "test security APIs AES encrypt/decrypt",
      "duration": 3
    },
    {
      "title": "RSA encrypt",
      "fullTitle": "test security APIs RSA encrypt",
      "duration": 18
    },
    {
      "title": "hash",
      "fullTitle": "test security APIs hash",
      "duration": 3
    },
    {
      "title": "should emit fhinit events",
      "fullTitle": "test all cloud related test auto initialisation should emit fhinit events",
      "duration": 6
    },
    {
      "title": "act call should success",
      "fullTitle": "test all cloud related test act/cloud call act call should success",
      "duration": 8
    },
    {
      "title": "should work with cloud call",
      "fullTitle": "test all cloud related test act/cloud call should work with cloud call",
      "duration": 3
    },
    {
      "title": "auth call should work",
      "fullTitle": "test all cloud related test auth call auth call should work",
      "duration": 4
    },
    {
      "title": "mbaas call should call",
      "fullTitle": "test all cloud related test mbaas call mbaas call should call",
      "duration": 3
    },
    {
      "title": "$fh.init should initialise the app",
      "fullTitle": "test legacy app props/app init test legacy app init $fh.init should initialise the app",
      "duration": 7
    },
    {
      "title": "should emit fhinit events",
      "fullTitle": "test legacy app props/app init test auto initialisation should emit fhinit events",
      "duration": 3
    },
    {
      "title": "sync.manage",
      "fullTitle": "test sync framework offline sync.manage",
      "duration": 1
    },
    {
      "title": "sync.setConfig/getConfig",
      "fullTitle": "test sync framework offline sync.setConfig/getConfig",
      "duration": 1
    },
    {
      "title": "sync.getQueryParams/setQueryParams",
      "fullTitle": "test sync framework offline sync.getQueryParams/setQueryParams",
      "duration": 0
    },
    {
      "title": "sync.getMetaData/setMetaData",
      "fullTitle": "test sync framework offline sync.getMetaData/setMetaData",
      "duration": 0
    },
    {
      "title": "sync.notify",
      "fullTitle": "test sync framework offline sync.notify",
      "duration": 604
    },
    {
      "title": "sync.doCreate",
      "fullTitle": "test sync framework offline sync.doCreate",
      "duration": 10
    },
    {
      "title": "sync.doUpdate",
      "fullTitle": "test sync framework offline sync.doUpdate",
      "duration": 19
    },
    {
      "title": "sync.doList success",
      "fullTitle": "test sync framework offline sync.doList success",
      "duration": 2
    },
    {
      "title": "sync.doList fail",
      "fullTitle": "test sync framework offline sync.doList fail",
      "duration": 0
    },
    {
      "title": "sync.doRead success",
      "fullTitle": "test sync framework offline sync.doRead success",
      "duration": 1
    },
    {
      "title": "sync.doRead fail",
      "fullTitle": "test sync framework offline sync.doRead fail",
      "duration": 0
    },
    {
      "title": "sync.getPending",
      "fullTitle": "test sync framework offline sync.getPending",
      "duration": 0
    },
    {
      "title": "sync.stopSync/startSync",
      "fullTitle": "test sync framework offline sync.stopSync/startSync",
      "duration": 2007
    },
    {
      "title": "sync.doDelete",
      "fullTitle": "test sync framework offline sync.doDelete",
      "duration": 3
    },
    {
      "title": "sync.doSync",
      "fullTitle": "test sync framework offline sync.doSync",
      "duration": 505
    },
    {
      "title": "sync.forceSync",
      "fullTitle": "test sync framework offline sync.forceSync",
      "duration": 507
    },
    {
      "title": "test failures",
      "fullTitle": "test sync framework offline test failures",
      "duration": 3
    },
    {
      "title": "load initial dataset from remote",
      "fullTitle": "test sync framework online with fake XMLHttpRequest load initial dataset from remote",
      "duration": 506
    },
    {
      "title": "try create a new record",
      "fullTitle": "test sync framework online with fake XMLHttpRequest try create a new record",
      "duration": 1012
    },
    {
      "title": "try to update an existing record ",
      "fullTitle": "test sync framework online with fake XMLHttpRequest try to update an existing record ",
      "duration": 2020
    },
    {
      "title": "test create & delete",
      "fullTitle": "test sync framework online with fake XMLHttpRequest test create & delete",
      "duration": 3
    },
    {
      "title": "test remote data change",
      "fullTitle": "test sync framework online with fake XMLHttpRequest test remote data change",
      "duration": 511
    },
    {
      "title": "test delete existing data",
      "fullTitle": "test sync framework online with fake XMLHttpRequest test delete existing data",
      "duration": 517
    },
    {
      "title": "test update pending data",
      "fullTitle": "test sync framework online with fake XMLHttpRequest test update pending data",
      "duration": 507
    },
    {
      "title": "test create pending data",
      "fullTitle": "test sync framework online with fake XMLHttpRequest test create pending data",
      "duration": 506
    },
    {
      "title": "test updateNewDataFromInFlight create/update",
      "fullTitle": "test sync framework online with fake XMLHttpRequest test updateNewDataFromInFlight create/update",
      "duration": 1520
    },
    {
      "title": "test updateNewDataFromPending",
      "fullTitle": "test sync framework online with fake XMLHttpRequest test updateNewDataFromPending",
      "duration": 1013
    },
    {
      "title": "test updateCrashedInFlightFromNewData create",
      "fullTitle": "test sync framework online with fake XMLHttpRequest test updateCrashedInFlightFromNewData create",
      "duration": 2533
    },
    {
      "title": "test updateCrashedInFlightFromNewData update",
      "fullTitle": "test sync framework online with fake XMLHttpRequest test updateCrashedInFlightFromNewData update",
      "duration": 1013
    },
    {
      "title": "test updateCrashedInFlightFromNewData resend",
      "fullTitle": "test sync framework online with fake XMLHttpRequest test updateCrashedInFlightFromNewData resend",
      "duration": 1012
    },
    {
      "title": "test listCollisions",
      "fullTitle": "test sync framework online with fake XMLHttpRequest test listCollisions",
      "duration": 5
    },
    {
      "title": "test removeCollision",
      "fullTitle": "test sync framework online with fake XMLHttpRequest test removeCollision",
      "duration": 3
    },
    {
      "title": "test checkHasCustomSync",
      "fullTitle": "test sync framework online with fake XMLHttpRequest test checkHasCustomSync",
      "duration": 4
    }
  ]
}